/*
  whitebox
  homepage: <https://github.com/vladmandic/whitebox>
  author: <https://github.com/vladmandic>'
*/

var WO=Object.create;var Nb=Object.defineProperty;var UO=Object.getOwnPropertyDescriptor;var HO=Object.getOwnPropertyNames;var qO=Object.getPrototypeOf,KO=Object.prototype.hasOwnProperty;var eo=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),qt=(r,t)=>{for(var e in t)Nb(r,e,{get:t[e],enumerable:!0})},jO=(r,t,e,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of HO(t))!KO.call(r,n)&&n!==e&&Nb(r,n,{get:()=>t[n],enumerable:!(o=UO(t,n))||o.enumerable});return r};var Wp=(r,t,e)=>(e=r!=null?WO(qO(r)):{},jO(t||!r||!r.__esModule?Nb(e,"default",{value:r,enumerable:!0}):e,r));var zv=eo((E8,Pv)=>{Pv.exports=be;var ho=null;try{ho=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(r){}function be(r,t,e){this.low=r|0,this.high=t|0,this.unsigned=!!e}be.prototype.__isLong__;Object.defineProperty(be.prototype,"__isLong__",{value:!0});function Hr(r){return(r&&r.__isLong__)===!0}be.isLong=Hr;var Ev={},$v={};function ll(r,t){var e,o,n;return t?(r>>>=0,(n=0<=r&&r<256)&&(o=$v[r],o)?o:(e=we(r,(r|0)<0?-1:0,!0),n&&($v[r]=e),e)):(r|=0,(n=-128<=r&&r<128)&&(o=Ev[r],o)?o:(e=we(r,r<0?-1:0,!1),n&&(Ev[r]=e),e))}be.fromInt=ll;function go(r,t){if(isNaN(r))return t?al:xo;if(t){if(r<0)return al;if(r>=Rv)return Lv}else{if(r<=-Dv)return Ur;if(r+1>=Dv)return Ov}return r<0?go(-r,t).neg():we(r%mc|0,r/mc|0,t)}be.fromNumber=go;function we(r,t,e){return new be(r,t,e)}be.fromBits=we;var hh=Math.pow;function Pb(r,t,e){if(r.length===0)throw Error("empty string");if(r==="NaN"||r==="Infinity"||r==="+Infinity"||r==="-Infinity")return xo;if(typeof t=="number"?(e=t,t=!1):t=!!t,e=e||10,e<2||36<e)throw RangeError("radix");var o;if((o=r.indexOf("-"))>0)throw Error("interior hyphen");if(o===0)return Pb(r.substring(1),t,e).neg();for(var n=go(hh(e,8)),s=xo,i=0;i<r.length;i+=8){var a=Math.min(8,r.length-i),l=parseInt(r.substring(i,i+a),e);if(a<8){var u=go(hh(e,a));s=s.mul(u).add(go(l))}else s=s.mul(n),s=s.add(go(l))}return s.unsigned=t,s}be.fromString=Pb;function Vo(r,t){return typeof r=="number"?go(r,t):typeof r=="string"?Pb(r,t):we(r.low,r.high,typeof t=="boolean"?t:r.unsigned)}be.fromValue=Vo;var Av=1<<16,gL=1<<24,mc=Av*Av,Rv=mc*mc,Dv=Rv/2,Fv=ll(gL),xo=ll(0);be.ZERO=xo;var al=ll(0,!0);be.UZERO=al;var pc=ll(1);be.ONE=pc;var _v=ll(1,!0);be.UONE=_v;var Lb=ll(-1);be.NEG_ONE=Lb;var Ov=we(-1,2147483647,!1);be.MAX_VALUE=Ov;var Lv=we(-1,-1,!0);be.MAX_UNSIGNED_VALUE=Lv;var Ur=we(0,-2147483648,!1);be.MIN_VALUE=Ur;var ut=be.prototype;ut.toInt=function(){return this.unsigned?this.low>>>0:this.low};ut.toNumber=function(){return this.unsigned?(this.high>>>0)*mc+(this.low>>>0):this.high*mc+(this.low>>>0)};ut.toString=function(t){if(t=t||10,t<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative())if(this.eq(Ur)){var e=go(t),o=this.div(e),n=o.mul(e).sub(this);return o.toString(t)+n.toInt().toString(t)}else return"-"+this.neg().toString(t);for(var s=go(hh(t,6),this.unsigned),i=this,a="";;){var l=i.div(s),u=i.sub(l.mul(s)).toInt()>>>0,c=u.toString(t);if(i=l,i.isZero())return c+a;for(;c.length<6;)c="0"+c;a=""+c+a}};ut.getHighBits=function(){return this.high};ut.getHighBitsUnsigned=function(){return this.high>>>0};ut.getLowBits=function(){return this.low};ut.getLowBitsUnsigned=function(){return this.low>>>0};ut.getNumBitsAbs=function(){if(this.isNegative())return this.eq(Ur)?64:this.neg().getNumBitsAbs();for(var t=this.high!=0?this.high:this.low,e=31;e>0&&(t&1<<e)==0;e--);return this.high!=0?e+33:e+1};ut.isZero=function(){return this.high===0&&this.low===0};ut.eqz=ut.isZero;ut.isNegative=function(){return!this.unsigned&&this.high<0};ut.isPositive=function(){return this.unsigned||this.high>=0};ut.isOdd=function(){return(this.low&1)===1};ut.isEven=function(){return(this.low&1)===0};ut.equals=function(t){return Hr(t)||(t=Vo(t)),this.unsigned!==t.unsigned&&this.high>>>31===1&&t.high>>>31===1?!1:this.high===t.high&&this.low===t.low};ut.eq=ut.equals;ut.notEquals=function(t){return!this.eq(t)};ut.neq=ut.notEquals;ut.ne=ut.notEquals;ut.lessThan=function(t){return this.comp(t)<0};ut.lt=ut.lessThan;ut.lessThanOrEqual=function(t){return this.comp(t)<=0};ut.lte=ut.lessThanOrEqual;ut.le=ut.lessThanOrEqual;ut.greaterThan=function(t){return this.comp(t)>0};ut.gt=ut.greaterThan;ut.greaterThanOrEqual=function(t){return this.comp(t)>=0};ut.gte=ut.greaterThanOrEqual;ut.ge=ut.greaterThanOrEqual;ut.compare=function(t){if(Hr(t)||(t=Vo(t)),this.eq(t))return 0;var e=this.isNegative(),o=t.isNegative();return e&&!o?-1:!e&&o?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1};ut.comp=ut.compare;ut.negate=function(){return!this.unsigned&&this.eq(Ur)?Ur:this.not().add(pc)};ut.neg=ut.negate;ut.add=function(t){Hr(t)||(t=Vo(t));var e=this.high>>>16,o=this.high&65535,n=this.low>>>16,s=this.low&65535,i=t.high>>>16,a=t.high&65535,l=t.low>>>16,u=t.low&65535,c=0,p=0,m=0,f=0;return f+=s+u,m+=f>>>16,f&=65535,m+=n+l,p+=m>>>16,m&=65535,p+=o+a,c+=p>>>16,p&=65535,c+=e+i,c&=65535,we(m<<16|f,c<<16|p,this.unsigned)};ut.subtract=function(t){return Hr(t)||(t=Vo(t)),this.add(t.neg())};ut.sub=ut.subtract;ut.multiply=function(t){if(this.isZero())return xo;if(Hr(t)||(t=Vo(t)),ho){var e=ho.mul(this.low,this.high,t.low,t.high);return we(e,ho.get_high(),this.unsigned)}if(t.isZero())return xo;if(this.eq(Ur))return t.isOdd()?Ur:xo;if(t.eq(Ur))return this.isOdd()?Ur:xo;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(Fv)&&t.lt(Fv))return go(this.toNumber()*t.toNumber(),this.unsigned);var o=this.high>>>16,n=this.high&65535,s=this.low>>>16,i=this.low&65535,a=t.high>>>16,l=t.high&65535,u=t.low>>>16,c=t.low&65535,p=0,m=0,f=0,h=0;return h+=i*c,f+=h>>>16,h&=65535,f+=s*c,m+=f>>>16,f&=65535,f+=i*u,m+=f>>>16,f&=65535,m+=n*c,p+=m>>>16,m&=65535,m+=s*u,p+=m>>>16,m&=65535,m+=i*l,p+=m>>>16,m&=65535,p+=o*c+n*u+s*l+i*a,p&=65535,we(f<<16|h,p<<16|m,this.unsigned)};ut.mul=ut.multiply;ut.divide=function(t){if(Hr(t)||(t=Vo(t)),t.isZero())throw Error("division by zero");if(ho){if(!this.unsigned&&this.high===-2147483648&&t.low===-1&&t.high===-1)return this;var e=(this.unsigned?ho.div_u:ho.div_s)(this.low,this.high,t.low,t.high);return we(e,ho.get_high(),this.unsigned)}if(this.isZero())return this.unsigned?al:xo;var o,n,s;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return al;if(t.gt(this.shru(1)))return _v;s=al}else{if(this.eq(Ur)){if(t.eq(pc)||t.eq(Lb))return Ur;if(t.eq(Ur))return pc;var i=this.shr(1);return o=i.div(t).shl(1),o.eq(xo)?t.isNegative()?pc:Lb:(n=this.sub(t.mul(o)),s=o.add(n.div(t)),s)}else if(t.eq(Ur))return this.unsigned?al:xo;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();s=xo}for(n=this;n.gte(t);){o=Math.max(1,Math.floor(n.toNumber()/t.toNumber()));for(var a=Math.ceil(Math.log(o)/Math.LN2),l=a<=48?1:hh(2,a-48),u=go(o),c=u.mul(t);c.isNegative()||c.gt(n);)o-=l,u=go(o,this.unsigned),c=u.mul(t);u.isZero()&&(u=pc),s=s.add(u),n=n.sub(c)}return s};ut.div=ut.divide;ut.modulo=function(t){if(Hr(t)||(t=Vo(t)),ho){var e=(this.unsigned?ho.rem_u:ho.rem_s)(this.low,this.high,t.low,t.high);return we(e,ho.get_high(),this.unsigned)}return this.sub(this.div(t).mul(t))};ut.mod=ut.modulo;ut.rem=ut.modulo;ut.not=function(){return we(~this.low,~this.high,this.unsigned)};ut.and=function(t){return Hr(t)||(t=Vo(t)),we(this.low&t.low,this.high&t.high,this.unsigned)};ut.or=function(t){return Hr(t)||(t=Vo(t)),we(this.low|t.low,this.high|t.high,this.unsigned)};ut.xor=function(t){return Hr(t)||(t=Vo(t)),we(this.low^t.low,this.high^t.high,this.unsigned)};ut.shiftLeft=function(t){return Hr(t)&&(t=t.toInt()),(t&=63)===0?this:t<32?we(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):we(0,this.low<<t-32,this.unsigned)};ut.shl=ut.shiftLeft;ut.shiftRight=function(t){return Hr(t)&&(t=t.toInt()),(t&=63)===0?this:t<32?we(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):we(this.high>>t-32,this.high>=0?0:-1,this.unsigned)};ut.shr=ut.shiftRight;ut.shiftRightUnsigned=function(t){if(Hr(t)&&(t=t.toInt()),t&=63,t===0)return this;var e=this.high;if(t<32){var o=this.low;return we(o>>>t|e<<32-t,e>>>t,this.unsigned)}else return t===32?we(e,0,this.unsigned):we(e>>>t-32,0,this.unsigned)};ut.shru=ut.shiftRightUnsigned;ut.shr_u=ut.shiftRightUnsigned;ut.toSigned=function(){return this.unsigned?we(this.low,this.high,!1):this};ut.toUnsigned=function(){return this.unsigned?this:we(this.low,this.high,!0)};ut.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()};ut.toBytesLE=function(){var t=this.high,e=this.low;return[e&255,e>>>8&255,e>>>16&255,e>>>24,t&255,t>>>8&255,t>>>16&255,t>>>24]};ut.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24,t>>>16&255,t>>>8&255,t&255,e>>>24,e>>>16&255,e>>>8&255,e&255]};be.fromBytes=function(t,e,o){return o?be.fromBytesLE(t,e):be.fromBytesBE(t,e)};be.fromBytesLE=function(t,e){return new be(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,e)};be.fromBytesBE=function(t,e){return new be(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],e)}});var yN=eo(()=>{});var bN=eo(()=>{});var fS=eo((mS,Iw)=>{(function(r,t,e){function o(a){var l=this,u=i();l.next=function(){var c=2091639*l.s0+l.c*23283064365386963e-26;return l.s0=l.s1,l.s1=l.s2,l.s2=c-(l.c=c|0)},l.c=1,l.s0=u(" "),l.s1=u(" "),l.s2=u(" "),l.s0-=u(a),l.s0<0&&(l.s0+=1),l.s1-=u(a),l.s1<0&&(l.s1+=1),l.s2-=u(a),l.s2<0&&(l.s2+=1),u=null}function n(a,l){return l.c=a.c,l.s0=a.s0,l.s1=a.s1,l.s2=a.s2,l}function s(a,l){var u=new o(a),c=l&&l.state,p=u.next;return p.int32=function(){return u.next()*4294967296|0},p.double=function(){return p()+(p()*2097152|0)*11102230246251565e-32},p.quick=p,c&&(typeof c=="object"&&n(c,u),p.state=function(){return n(u,{})}),p}function i(){var a=4022871197,l=function(u){u=String(u);for(var c=0;c<u.length;c++){a+=u.charCodeAt(c);var p=.02519603282416938*a;a=p>>>0,p-=a,p*=a,a=p>>>0,p-=a,a+=p*4294967296}return(a>>>0)*23283064365386963e-26};return l}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.alea=s})(mS,typeof Iw=="object"&&Iw,typeof define=="function"&&define)});var dS=eo((hS,Tw)=>{(function(r,t,e){function o(i){var a=this,l="";a.x=0,a.y=0,a.z=0,a.w=0,a.next=function(){var c=a.x^a.x<<11;return a.x=a.y,a.y=a.z,a.z=a.w,a.w^=a.w>>>19^c^c>>>8},i===(i|0)?a.x=i:l+=i;for(var u=0;u<l.length+64;u++)a.x^=l.charCodeAt(u)|0,a.next()}function n(i,a){return a.x=i.x,a.y=i.y,a.z=i.z,a.w=i.w,a}function s(i,a){var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(typeof u=="object"&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xor128=s})(hS,typeof Tw=="object"&&Tw,typeof define=="function"&&define)});var xS=eo((gS,kw)=>{(function(r,t,e){function o(i){var a=this,l="";a.next=function(){var c=a.x^a.x>>>2;return a.x=a.y,a.y=a.z,a.z=a.w,a.w=a.v,(a.d=a.d+362437|0)+(a.v=a.v^a.v<<4^(c^c<<1))|0},a.x=0,a.y=0,a.z=0,a.w=0,a.v=0,i===(i|0)?a.x=i:l+=i;for(var u=0;u<l.length+64;u++)a.x^=l.charCodeAt(u)|0,u==l.length&&(a.d=a.x<<10^a.x>>>4),a.next()}function n(i,a){return a.x=i.x,a.y=i.y,a.z=i.z,a.w=i.w,a.v=i.v,a.d=i.d,a}function s(i,a){var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(typeof u=="object"&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xorwow=s})(gS,typeof kw=="object"&&kw,typeof define=="function"&&define)});var bS=eo((yS,Ew)=>{(function(r,t,e){function o(i){var a=this;a.next=function(){var u=a.x,c=a.i,p,m,f;return p=u[c],p^=p>>>7,m=p^p<<24,p=u[c+1&7],m^=p^p>>>10,p=u[c+3&7],m^=p^p>>>3,p=u[c+4&7],m^=p^p<<7,p=u[c+7&7],p=p^p<<13,m^=p^p<<9,u[c]=m,a.i=c+1&7,m};function l(u,c){var p,m,f=[];if(c===(c|0))m=f[0]=c;else for(c=""+c,p=0;p<c.length;++p)f[p&7]=f[p&7]<<15^c.charCodeAt(p)+f[p+1&7]<<13;for(;f.length<8;)f.push(0);for(p=0;p<8&&f[p]===0;++p);for(p==8?m=f[7]=-1:m=f[p],u.x=f,u.i=0,p=256;p>0;--p)u.next()}l(a,i)}function n(i,a){return a.x=i.x.slice(),a.i=i.i,a}function s(i,a){i==null&&(i=+new Date);var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(u.x&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xorshift7=s})(yS,typeof Ew=="object"&&Ew,typeof define=="function"&&define)});var CS=eo((wS,$w)=>{(function(r,t,e){function o(i){var a=this;a.next=function(){var u=a.w,c=a.X,p=a.i,m,f;return a.w=u=u+1640531527|0,f=c[p+34&127],m=c[p=p+1&127],f^=f<<13,m^=m<<17,f^=f>>>15,m^=m>>>12,f=c[p]=f^m,a.i=p,f+(u^u>>>16)|0};function l(u,c){var p,m,f,h,d,g=[],y=128;for(c===(c|0)?(m=c,c=null):(c=c+"\0",m=0,y=Math.max(y,c.length)),f=0,h=-32;h<y;++h)c&&(m^=c.charCodeAt((h+32)%c.length)),h===0&&(d=m),m^=m<<10,m^=m>>>15,m^=m<<4,m^=m>>>13,h>=0&&(d=d+1640531527|0,p=g[h&127]^=m+d,f=p==0?f+1:0);for(f>=128&&(g[(c&&c.length||0)&127]=-1),f=127,h=4*128;h>0;--h)m=g[f+34&127],p=g[f=f+1&127],m^=m<<13,p^=p<<17,m^=m>>>15,p^=p>>>12,g[f]=m^p;u.w=d,u.X=g,u.i=f}l(a,i)}function n(i,a){return a.i=i.i,a.w=i.w,a.X=i.X.slice(),a}function s(i,a){i==null&&(i=+new Date);var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(u.X&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xor4096=s})(wS,typeof $w=="object"&&$w,typeof define=="function"&&define)});var NS=eo((vS,Aw)=>{(function(r,t,e){function o(i){var a=this,l="";a.next=function(){var c=a.b,p=a.c,m=a.d,f=a.a;return c=c<<25^c>>>7^p,p=p-m|0,m=m<<24^m>>>8^f,f=f-c|0,a.b=c=c<<20^c>>>12^p,a.c=p=p-m|0,a.d=m<<16^p>>>16^f,a.a=f-c|0},a.a=0,a.b=0,a.c=-1640531527,a.d=1367130551,i===Math.floor(i)?(a.a=i/4294967296|0,a.b=i|0):l+=i;for(var u=0;u<l.length+20;u++)a.b^=l.charCodeAt(u)|0,a.next()}function n(i,a){return a.a=i.a,a.b=i.b,a.c=i.c,a.d=i.d,a}function s(i,a){var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(typeof u=="object"&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.tychei=s})(vS,typeof Aw=="object"&&Aw,typeof define=="function"&&define)});var SS=eo(()=>{});var TS=eo((IS,wd)=>{(function(r,t,e){var o=256,n=6,s=52,i="random",a=e.pow(o,n),l=e.pow(2,s),u=l*2,c=o-1,p;function m(w,C,I){var $=[];C=C==!0?{entropy:!0}:C||{};var A=g(d(C.entropy?[w,b(t)]:w==null?y():w,3),$),_=new f($),O=function(){for(var P=_.g(n),B=a,V=0;P<l;)P=(P+V)*o,B*=o,V=_.g(1);for(;P>=u;)P/=2,B/=2,V>>>=1;return(P+V)/B};return O.int32=function(){return _.g(4)|0},O.quick=function(){return _.g(4)/4294967296},O.double=O,g(b(_.S),t),(C.pass||I||function(P,B,V,G){return G&&(G.S&&h(G,_),P.state=function(){return h(_,{})}),V?(e[i]=P,B):P})(O,A,"global"in C?C.global:this==e,C.state)}function f(w){var C,I=w.length,$=this,A=0,_=$.i=$.j=0,O=$.S=[];for(I||(w=[I++]);A<o;)O[A]=A++;for(A=0;A<o;A++)O[A]=O[_=c&_+w[A%I]+(C=O[A])],O[_]=C;($.g=function(P){for(var B,V=0,G=$.i,H=$.j,W=$.S;P--;)B=W[G=c&G+1],V=V*o+W[c&(W[G]=W[H=c&H+B])+(W[H]=B)];return $.i=G,$.j=H,V})(o)}function h(w,C){return C.i=w.i,C.j=w.j,C.S=w.S.slice(),C}function d(w,C){var I=[],$=typeof w,A;if(C&&$=="object")for(A in w)try{I.push(d(w[A],C-1))}catch(_){}return I.length?I:$=="string"?w:w+"\0"}function g(w,C){for(var I=w+"",$,A=0;A<I.length;)C[c&A]=c&($^=C[c&A]*19)+I.charCodeAt(A++);return b(C)}function y(){try{var w;return p&&(w=p.randomBytes)?w=w(o):(w=new Uint8Array(o),(r.crypto||r.msCrypto).getRandomValues(w)),b(w)}catch($){var C=r.navigator,I=C&&C.plugins;return[+new Date,r,I,r.screen,b(t)]}}function b(w){return String.fromCharCode.apply(0,w)}if(g(e.random(),t),typeof wd=="object"&&wd.exports){wd.exports=m;try{p=SS()}catch(w){}}else typeof define=="function"&&define.amd?define(function(){return m}):e["seed"+i]=m})(typeof self!="undefined"?self:IS,[],Math)});var cm=eo((Vct,kS)=>{var cM=fS(),pM=dS(),mM=xS(),fM=bS(),hM=CS(),dM=NS(),Nl=TS();Nl.alea=cM;Nl.xor128=pM;Nl.xorwow=mM;Nl.xorshift7=fM;Nl.xor4096=hM;Nl.tychei=dM;kS.exports=Nl});var Y1=eo(()=>{});var qa=class{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}},Pn=class{refCount(t){return ro("refCount")}incRef(t){return ro("incRef")}timerAvailable(){return!0}time(t){return ro("time")}read(t){return ro("read")}readSync(t){return ro("readSync")}readToGPU(t,e){return ro("readToGPU")}numDataIds(){return ro("numDataIds")}disposeData(t,e){return ro("disposeData")}write(t,e,o){return ro("write")}move(t,e,o,n,s){return ro("move")}memory(){return ro("memory")}floatPrecision(){return ro("floatPrecision")}epsilon(){return this.floatPrecision()===32?1e-7:1e-4}dispose(){return ro("dispose")}};function ro(r){throw new Error(`'${r}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function xv(r){let t=r.length,e=0;for(;t>0;)e=Math.random()*t|0,t--,ch(r,t,e)}function XO(r,t){if(r.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${r.length}Second array length was ${t.length}`);let e=r.length,o=0;for(;e>0;)o=Math.random()*e|0,e--,ch(r,e,o),ch(t,e,o)}function iu(r,t,e){return Math.max(r,Math.min(t,e))}function YO(r){return r%2===0?r:r+1}function ch(r,t,e){let o=r[t];r[t]=r[e],r[e]=o}function ZO(r){let t=0;for(let e=0;e<r.length;e++)t+=r[e];return t}function JO(r,t){let e=Math.random();return t*e+(1-e)*r}function QO(r,t){let e=0;for(let o=0;o<r.length;o++){let n=Number(r[o])-Number(t[o]);e+=n*n}return e}function E(r,t){if(!r)throw new Error(typeof t=="string"?t:t())}function Ne(r,t,e=""){E(no(r,t),()=>e+` Shapes ${r} and ${t} must match`)}function oo(r){E(r!=null,()=>"The input to the tensor constructor must be a non-null value.")}function zn(r,t=[],e=!1){if(t==null&&(t=[]),Array.isArray(r)||Or(r)&&!e)for(let o=0;o<r.length;++o)zn(r[o],t,e);else t.push(r);return t}function Ot(r){if(r.length===0)return 1;let t=r[0];for(let e=1;e<r.length;e++)t*=r[e];return t}function tL(r){return r.length===0}function no(r,t){if(r===t)return!0;if(r==null||t==null||r.length!==t.length)return!1;for(let e=0;e<r.length;e++)if(r[e]!==t[e])return!1;return!0}function Mn(r){return r%1===0}function eL(r){if(Math.tanh!=null)return Math.tanh(r);if(r===1/0)return 1;if(r===-1/0)return-1;{let t=Math.exp(2*r);return(t-1)/(t+1)}}function rL(r){let t=Math.ceil(Math.sqrt(r));return[t,Math.ceil(r/t)]}function oL(r){let t=new Uint32Array(r);for(let e=0;e<r;++e)t[e]=e;return xv(t),t}function ja(r,t){return t<=r.length?r:r+" ".repeat(t-r.length)}function nL(r,t=o=>0,e){return new Promise((o,n)=>{let s=0,i=()=>{if(r()){o();return}s++;let a=t(s);if(e!=null&&s>=e){n();return}setTimeout(i,a)};i()})}function sL(r,t){let e=1,o=-1;for(let s=0;s<r.length;++s)if(r[s]>=0)e*=r[s];else if(r[s]===-1){if(o!==-1)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${o} and dim ${s}`);o=s}else if(r[s]<0)throw Error(`Shapes can not be < 0. Found ${r[s]} at dim ${s}`);if(o===-1){if(t>0&&t!==e)throw Error(`Size(${t}) must match the product of shape ${r}`);return r}if(e===0)throw Error(`Cannot infer the missing size in [${r}] when there are 0 elements`);if(t%e!==0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${e}`);let n=r.slice();return n[o]=t/e,n}function Le(r,t){let e=t.length;return r=r==null?t.map((o,n)=>n):[].concat(r),E(r.every(o=>o>=-e&&o<e),()=>`All values in axis param must be in range [-${e}, ${e}) but got axis ${r}`),E(r.every(o=>Mn(o)),()=>`All values in axis param must be integers but got axis ${r}`),r.map(o=>o<0?e+o:o)}function Sb(r,t){let e=[],o=[],n=t!=null&&Array.isArray(t)&&t.length===0,s=t==null||n?null:Le(t,r).sort(),i=0;for(let a=0;a<r.length;++a){if(s!=null){if(s[i]===a&&r[a]!==1)throw new Error(`Can't squeeze axis ${a} since its dim '${r[a]}' is not 1`);(s[i]==null||s[i]>a)&&r[a]===1&&(e.push(r[a]),o.push(a)),s[i]<=a&&i++}r[a]!==1&&(e.push(r[a]),o.push(a))}return{newShape:e,keptDims:o}}function Ib(r,t){let e=null;if(r==null||r==="float32")e=new Float32Array(t);else if(r==="int32")e=new Int32Array(t);else if(r==="bool")e=new Uint8Array(t);else throw new Error(`Unknown data type ${r}`);return e}function Tb(r,t){let e=null;if(r==null||r==="float32")e=new Float32Array(t);else if(r==="int32")e=new Int32Array(t);else if(r==="bool")e=new Uint8Array(t);else if(r==="string")e=new Array(t);else throw new Error(`Unknown data type ${r}`);return e}function kb(r,t){for(let e=0;e<r.length;e++){let o=r[e];if(isNaN(o)||!isFinite(o))throw Error(`A tensor of type ${t} being uploaded contains ${o}.`)}}function Eb(r){return r==="bool"||r==="complex64"||r==="float32"||r==="int32"||r==="string"}function iL(r,t){return!(t==="complex64"||t==="float32"&&r!=="complex64"||t==="int32"&&r!=="float32"&&r!=="complex64"||t==="bool"&&r==="bool")}function Or(r){return r instanceof Float32Array||r instanceof Int32Array||r instanceof Uint8Array||r instanceof Uint8ClampedArray}function ph(r){if(r==="float32"||r==="int32")return 4;if(r==="complex64")return 8;if(r==="bool")return 1;throw new Error(`Unknown dtype ${r}`)}function $b(r){if(r==null)return 0;let t=0;return r.forEach(e=>t+=e.length),t}function Xa(r){return typeof r=="string"||r instanceof String}function yv(r){return typeof r=="boolean"}function bv(r){return typeof r=="number"}function au(r){return Array.isArray(r)?au(r[0]):r instanceof Float32Array?"float32":r instanceof Int32Array||r instanceof Uint8Array||r instanceof Uint8ClampedArray?"int32":bv(r)?"float32":Xa(r)?"string":yv(r)?"bool":"float32"}function lu(r){return!!(r&&r.constructor&&r.call&&r.apply)}function uu(r,t){for(let e=t;e<r;++e)if(r%e===0)return e;return r}function nn(r){let t=r.length;if(t<2)return[];let e=new Array(t-1);e[t-2]=r[t-1];for(let o=t-3;o>=0;--o)e[o]=e[o+1]*r[o+1];return e}function wv(r,t,e,o=!1){let n=new Array;if(t.length===1){let s=t[0]*(o?2:1);for(let i=0;i<s;i++)n[i]=e[r+i]}else{let s=t[0],i=t.slice(1),a=i.reduce((l,u)=>l*u)*(o?2:1);for(let l=0;l<s;l++)n[l]=wv(r+l*a,i,e,o)}return n}function Ka(r,t,e=!1){if(r.length===0)return t[0];let o=r.reduce((n,s)=>n*s)*(e?2:1);if(o===0)return[];if(o!==t.length)throw new Error(`[${r}] does not match the input size ${t.length}${e?" for a complex tensor":""}.`);return wv(0,r,t,e)}function Up(r,t){let e=cu(r,t);for(let o=0;o<e.length;o++)e[o]=1;return e}function cu(r,t){if(t==null||t==="float32"||t==="complex64")return new Float32Array(r);if(t==="int32")return new Int32Array(r);if(t==="bool")return new Uint8Array(r);throw new Error(`Unknown data type ${t}`)}function aL(r,t){let e=r.reduce((o,n)=>o*n,1);if(t==null||t==="float32")return Ka(r,new Float32Array(e));if(t==="int32")return Ka(r,new Int32Array(e));if(t==="bool")return Ka(r,new Uint8Array(e));throw new Error(`Unknown data type ${t}`)}function Hp(r){r.forEach(t=>{E(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${r}].`)})}function lL(r,t,e){if(t===0)return 0;if(t===1)return r[0];let o=r[r.length-1];for(let n=0;n<r.length-1;++n)o+=e[n]*r[n];return o}function uL(r,t,e){if(t===0)return[];if(t===1)return[r];let o=new Array(t);for(let n=0;n<o.length-1;++n)o[n]=Math.floor(r/e[n]),r-=o[n]*e[n];return o[o.length-1]=r,o}function qp(r){return r&&r.then&&typeof r.then=="function"}var Cv="tfjsflags",Kp=class{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=pL,this.populateURLFlags()}setPlatform(t,e){this.platform!=null&&(M().getBool("IS_TEST")||M().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)),this.platformName=t,this.platform=e}registerFlag(t,e,o){if(this.flagRegistry[t]={evaluationFn:e,setHook:o},this.urlFlags[t]!=null){let n=this.urlFlags[t];M().getBool("IS_TEST")||M().getBool("PROD")||console.warn(`Setting feature override from URL ${t}: ${n}.`),this.set(t,n)}}async getAsync(t){return t in this.flags?this.flags[t]:(this.flags[t]=await this.evaluateFlag(t),this.flags[t])}get(t){if(t in this.flags)return this.flags[t];let e=this.evaluateFlag(t);if(qp(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(this.flagRegistry[t]==null)throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,this.flagRegistry[t].setHook!=null&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(this.flagRegistry[t]==null)throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global=="undefined"||typeof this.global.location=="undefined"||typeof this.global.location.search=="undefined")return;let t=this.getQueryParams(this.global.location.search);Cv in t&&t[Cv].split(",").forEach(o=>{let[n,s]=o.split(":");this.urlFlags[n]=fL(n,s)})}};function pL(r){let t={};return r.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...o)=>(mL(t,o[0],o[1]),o.join("="))),t}function mL(r,t,e){r[decodeURIComponent(t)]=decodeURIComponent(e||"")}function fL(r,t){if(t=t.toLowerCase(),t==="true"||t==="false")return t==="true";if(`${+t}`===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${r}.`)}function M(){return Ab}var Ab=null;function vv(r){Ab=r}var Db;function Fb(){if(Db==null){let r;if(typeof window!="undefined")r=window;else if(typeof global!="undefined")r=global;else if(typeof process!="undefined")r=process;else if(typeof self!="undefined")r=self;else throw new Error("Could not find a global object");Db=r}return Db}function hL(){let r=Fb();return r._tfGlobals==null&&(r._tfGlobals=new Map),r._tfGlobals}function jp(r,t){let e=hL();if(e.has(r))return e.get(r);{let o=t();return e.set(r,o),e.get(r)}}var si="Abs",Bn="Acos",Vn="Acosh",Bo="Add",ii="AddN",pu="All",mu="Any",ai="ArgMax",li="ArgMin",Gn="Asin",Wn="Asinh",Un="Atan",Hn="Atanh",qn="Atan2",ui="AvgPool",fu="AvgPoolGrad",ci="AvgPool3D",hu="AvgPool3DGrad",pi="BatchMatMul",mi="BatchToSpaceND",du="Bincount",Nv="BroadcastTo",gu="BroadcastArgs",sn="Cast",Kn="Ceil",jn="ClipByValue",xu="Complex",fi="ComplexAbs",hi="Concat",di="Conv2D",yu="Conv2DBackpropFilter",gi="Conv2DBackpropInput",xi="Conv3D",bu="Conv3DBackpropFilterV2",wu="Conv3DBackpropInputV2",Xn="Cos",Yn="Cosh",Cu="Cumprod",yi="Cumsum",vu="CropAndResize",Nu="DenseBincount",Su="DepthToSpace",bi="DepthwiseConv2dNative",Iu="DepthwiseConv2dNativeBackpropFilter",Tu="DepthwiseConv2dNativeBackpropInput",ku="Diag",wi="Dilation2D",Xp="Dilation2DBackpropInput",Yp="Dilation2DBackpropFilter",Zn="RealDiv",Eu="Einsum",Jn="Elu",$u="EluGrad",Qn="Erf",Ya="Equal",ts="Exp",Ci="ExpandDims",es="Expm1",Au="FFT",Du="Fill",Fu="FlipLeftRight",rs="Floor",os="FloorDiv",vi="FusedBatchNorm",Ni="GatherV2",Ru="GatherNd",Za="Greater",ns="GreaterEqual",an="Identity",_u="IFFT",Ou="Imag",ss="IsFinite",is="IsInf",as="IsNan",Si="LeakyRelu",Ja="Less",Qa="LessEqual",Lu="LinSpace",ls="Log",us="Log1p",tl="LogicalAnd",el="LogicalNot",rl="LogicalOr";var Sv="LogSoftmax";var Ii="LRN",Pu="LRNGrad",Ti="Max",cs="Maximum",ki="MaxPool",zu="MaxPoolGrad",Ei="MaxPool3D",Mu="MaxPool3DGrad",Bu="MaxPoolWithArgmax",$i="Mean",Ai="Min",ps="Minimum",Di="MirrorPad",ms="Mod",Vu="Multinomial",fs="Multiply",Fi="Neg",ol="NotEqual",Gu="NonMaxSuppressionV3",Wu="NonMaxSuppressionV4",Uu="NonMaxSuppressionV5",Ri="OnesLike",_i="OneHot",Oi="Pack",Li="PadV2";var hs="Pow",Pi="Prelu",zi="Prod",Hu="Range",qu="Real",ds="Reciprocal",gs="Relu",Mi="Reshape",Bi="ResizeNearestNeighbor",Ku="ResizeNearestNeighborGrad",Vi="ResizeBilinear",ju="ResizeBilinearGrad",xs="Relu6",Gi="Reverse",ys="Round",bs="Rsqrt",Xu="ScatterNd",Yu="SearchSorted",Wi="Select",ws="Selu",Ui="Slice",Cs="Sin",vs="Sinh",Ns="Sign",Ss="Sigmoid",Is="Softplus",Ts="Sqrt",Hi="Sum",qi="SpaceToBatchND",Ki="SplitV",ji="Softmax",Zu="SparseFillEmptyRows",Ju="SparseReshape",Qu="SparseSegmentMean",tc="SparseSegmentSum",ec="SparseToDense",ks="SquaredDifference",rc="Square",oc="StridedSlice",nc="StringNGrams",sc="StringSplit",ic="StringToHashBucketFast",Es="Sub",$s="Tan",As="Tanh",ln="Tile",ac="TopK",lc="Transform",un="Transpose",uc="Unique",Xi="Unpack",Yi="UnsortedSegmentSum";var Zi="ZerosLike",Ds="Step",Zp="FromPixels",cc="RotateWithOffset",nl="_FusedMatMul",sl="FusedConv2D",il="FusedDepthwiseConv2D";function cn(...r){M().getBool("IS_TEST")||M().getBool("PROD")||console.warn(...r)}function dL(...r){M().getBool("IS_TEST")||M().getBool("PROD")||console.log(...r)}var mh=jp("kernelRegistry",()=>new Map),Rb=jp("gradRegistry",()=>new Map);function Jp(r,t){let e=kv(r,t);return mh.get(e)}function _b(r){return Rb.get(r)}function Ob(r){let t=mh.entries(),e=[];for(;;){let{done:o,value:n}=t.next();if(o)break;let[s,i]=n,[a]=s.split("_");a===r&&e.push(i)}return e}function fh(r){let{kernelName:t,backendName:e}=r,o=kv(t,e);mh.has(o)&&cn(`The kernel '${t}' for backend '${e}' is already registered`),mh.set(o,r)}function Tv(r){let{kernelName:t}=r;Rb.has(t)&&M().getBool("DEBUG")&&cn(`Overriding the gradient for '${t}'`),Rb.set(t,r)}function kv(r,t){return`${t}_${r}`}var x={};qt(x,{arraysEqual:()=>no,assert:()=>E,assertNonNegativeIntegerDimensions:()=>Hp,assertNonNull:()=>oo,assertShapesMatch:()=>Ne,bytesFromStringArray:()=>$b,bytesPerElement:()=>ph,checkConversionForErrors:()=>kb,clamp:()=>iu,computeStrides:()=>nn,createScalarValue:()=>vL,createShuffledIndices:()=>oL,decodeString:()=>hc,distSquared:()=>QO,encodeString:()=>ml,fetch:()=>SL,fingerPrint64:()=>CL,flatten:()=>zn,getArrayFromDType:()=>Tb,getTypedArrayFromDType:()=>Ib,hasEncodingLoss:()=>iL,hexToLong:()=>Qp,indexToLoc:()=>uL,inferDtype:()=>au,inferFromImplicitShape:()=>sL,isBoolean:()=>yv,isFunction:()=>lu,isInt:()=>Mn,isNumber:()=>bv,isPromise:()=>qp,isScalarShape:()=>tL,isString:()=>Xa,isTypedArray:()=>Or,isValidDtype:()=>Eb,locToIndex:()=>lL,makeOnesTypedArray:()=>Up,makeZerosNestedTypedArray:()=>aL,makeZerosTypedArray:()=>cu,nearestDivisor:()=>uu,nearestLargerEven:()=>YO,now:()=>pl,parseAxisParam:()=>Le,randUniform:()=>JO,repeatedTry:()=>nL,rightPad:()=>ja,shuffle:()=>xv,shuffleCombo:()=>XO,sizeFromShape:()=>Ot,sizeToSquarishShape:()=>rL,squeezeShape:()=>Sb,sum:()=>ZO,swap:()=>ch,tanh:()=>eL,toNestedArray:()=>Ka,toTypedArray:()=>fc});var Mb=Wp(zv());var cl=Mb.default||Mb;function Qp(r){return cl.fromString(r,!0,16)}var Bv=Qp("c3a5c85c97cb3127"),ul=Qp("b492b66fbe98f273"),wr=Qp("9ae16a3b2f90404f");function zb(r){return r.xor(r.shru(47))}function Vv(r,t,e){let o=r.slice(t,t+e);return cl.fromBytes(Array.from(o),!0,!0)}function fe(r,t){return Vv(r,t,8)}function Mv(r,t){return Vv(r,t,4)}function Ye(r,t){return t===0?r:r.shru(t).or(r.shl(64-t))}function Ji(r,t,e=Qp("9ddfea08eb382d69")){let o=r.xor(t).mul(e);o=o.xor(o.shru(47));let n=t.xor(o).mul(e);return n=n.xor(n.shru(47)),n=n.mul(e),n}function xL(r,t,e,o,n,s){n=n.add(r),s=Ye(s.add(n).add(o),21);let i=n;return n=n.add(t),n=n.add(e),s=s.add(Ye(n,44)),[n.add(o),s.add(i)]}function dh(r,t,e,o){return xL(fe(r,t),fe(r,t+8),fe(r,t+16),fe(r,t+24),e,o)}function yL(r,t=r.length){if(t>=8){let e=wr.add(t*2),o=fe(r,0).add(wr),n=fe(r,t-8),s=Ye(n,37).mul(e).add(o),i=Ye(o,25).add(n).mul(e);return Ji(s,i,e)}if(t>=4){let e=wr.add(t*2),o=Mv(r,0);return Ji(o.shl(3).add(t),Mv(r,t-4),e)}if(t>0){let e=r[0],o=r[t>>1],n=r[t-1],s=e+(o<<8),i=t+(n<<2);return zb(wr.mul(s).xor(Bv.mul(i))).mul(wr)}return wr}function bL(r,t=r.length){let e=wr.add(t*2),o=fe(r,0).mul(ul),n=fe(r,8),s=fe(r,t-8).mul(e),i=fe(r,t-16).mul(wr);return Ji(Ye(o.add(n),43).add(Ye(s,30)).add(i),o.add(Ye(n.add(wr),18)).add(s),e)}function wL(r,t=r.length){let e=wr.add(t*2),o=fe(r,0).mul(wr),n=fe(r,8),s=fe(r,t-8).mul(e),i=fe(r,t-16).mul(wr),a=Ye(o.add(n),43).add(Ye(s,30)).add(i),l=Ji(a,o.add(Ye(n.add(wr),18)).add(s),e),u=fe(r,16).mul(e),c=fe(r,24),p=a.add(fe(r,t-32)).mul(e),m=l.add(fe(r,t-24)).mul(e);return Ji(Ye(u.add(c),43).add(Ye(p,30)).add(m),u.add(Ye(c.add(o),18)).add(p),e)}function CL(r,t=r.length){let e=cl.fromNumber(81,!0);if(t<=32)return t<=16?yL(r,t):bL(r,t);if(t<=64)return wL(r,t);let o=e,n=e.mul(ul).add(113),s=zb(n.mul(wr).add(113)).mul(wr),i=[cl.UZERO,cl.UZERO],a=[cl.UZERO,cl.UZERO];o=o.mul(wr).add(fe(r,0));let l=0,u=(t-1>>6)*64,c=u+(t-1&63)-63;do o=Ye(o.add(n).add(i[0]).add(fe(r,l+8)),37).mul(ul),n=Ye(n.add(i[1]).add(fe(r,l+48)),42).mul(ul),o=o.xor(a[1]),n=n.add(i[0]).add(fe(r,l+40)),s=Ye(s.add(a[0]),33).mul(ul),i=dh(r,l,i[1].mul(ul),o.add(a[0])),a=dh(r,l+32,s.add(a[1]),n.add(fe(r,l+16))),[s,o]=[o,s],l+=64;while(l!==u);let p=ul.add(s.and(255).shl(1));return l=c,a[0]=a[0].add(t-1&63),i[0]=i[0].add(a[0]),a[0]=a[0].add(i[0]),o=Ye(o.add(n).add(i[0]).add(fe(r,l+8)),37).mul(p),n=Ye(n.add(i[1]).add(fe(r,l+48)),42).mul(p),o=o.xor(a[1].mul(9)),n=n.add(i[0].mul(9).add(fe(r,l+40))),s=Ye(s.add(a[0]),33).mul(p),i=dh(r,l,i[1].mul(p),o.add(a[0])),a=dh(r,l+32,s.add(a[1]),n.add(fe(r,l+16))),[s,o]=[o,s],Ji(Ji(i[0],a[0],p).add(zb(n).mul(Bv)).add(s),Ji(i[1],a[1],p).add(o),p)}function vL(r,t){return t==="string"?ml(r):fc([r],t)}function NL(r,t){return r instanceof Float32Array&&t==="float32"||r instanceof Int32Array&&t==="int32"||r instanceof Uint8Array&&t==="bool"}function fc(r,t){if(t==="string")throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(r)&&(r=zn(r)),M().getBool("DEBUG")&&kb(r,t),NL(r,t))return r;if(t==null||t==="float32"||t==="complex64")return new Float32Array(r);if(t==="int32")return new Int32Array(r);if(t==="bool"){let e=new Uint8Array(r.length);for(let o=0;o<e.length;++o)Math.round(r[o])!==0&&(e[o]=1);return e}else throw new Error(`Unknown data type ${t}`)}function pl(){return M().platform.now()}function SL(r,t){return M().platform.fetch(r,t)}function ml(r,t="utf-8"){return t=t||"utf-8",M().platform.encode(r,t)}function hc(r,t="utf-8"){return t=t||"utf-8",M().platform.decode(r,t)}var gh=class{constructor(t,e){this.backendTimer=t,this.logger=e,e==null&&(this.logger=new Bb)}profileKernel(t,e,o){let n,s=()=>{n=o()},i,a=pl();if(this.backendTimer.timerAvailable())i=this.backendTimer.time(s);else{s();for(let u of n)u.dataSync();i=Promise.resolve({kernelMs:pl()-a})}if(M().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let u=0;u<n.length;u++){let c=n[u];c.data().then(p=>{IL(p,c.dtype,t)})}return{kernelName:t,outputs:n,inputs:e,timeMs:i.then(u=>u.kernelMs),extraInfo:i.then(u=>u.getExtraProfileInfo!=null?u.getExtraProfileInfo():"")}}logKernelProfile(t){let{kernelName:e,outputs:o,timeMs:n,inputs:s,extraInfo:i}=t;o.forEach(a=>{Promise.all([a.data(),n,i]).then(l=>{this.logger.logKernelProfile(e,a,l[0],l[1],s,l[2])})})}};function IL(r,t,e){if(t!=="float32")return!1;for(let o=0;o<r.length;o++){let n=r[o];if(isNaN(n)||!isFinite(n))return console.warn(`Found ${n} in the result of '${e}'`),!0}return!1}var Bb=class{logKernelProfile(t,e,o,n,s,i){let a=typeof n=="number"?ja(`${n}ms`,9):n.error,l=ja(t,25),u=e.rank,c=e.size,p=ja(e.shape.toString(),14),m="";for(let f in s){let h=s[f];if(h!=null){let d=h.shape||e.shape,g=d.length;m+=`${f}: ${g}D ${g>0?d:""} `}}console.log(`%c${l}	%c${a}	%c${u}D ${p}	%c${c}	%c${m}	%c${i}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}};function Gv(r,t,e){let o={},n={};for(let l=0;l<t.length;l++)o[t[l].id]=!0;for(let l=0;l<r.length;l++){let u=r[l],c=u.inputs;for(let p in c){let m=c[p],f=!1;for(let h=0;h<t.length;h++)if(o[m.id]){u.outputs.forEach(d=>o[d.id]=!0),f=!0,n[u.id]=!0;break}if(f)break}}let s={};s[e.id]=!0;let i={};for(let l=r.length-1;l>=0;l--){let u=r[l],c=u.inputs;for(let p=0;p<u.outputs.length;p++)if(s[u.outputs[p].id]){for(let m in c)s[c[m].id]=!0,i[u.id]=!0;break}}let a=[];for(let l=0;l<r.length;l++){let u=r[l];if(n[u.id]&&i[u.id]){let c={};for(let m in u.inputs){let f=u.inputs[m];o[f.id]&&(c[m]=f)}let p=Object.assign({},u);p.inputs=c,p.outputs=u.outputs,a.push(p)}}return a}function Wv(r,t,e,o){for(let n=t.length-1;n>=0;n--){let s=t[n],i=[];if(s.outputs.forEach(l=>{let u=r[l.id];u!=null?i.push(u):i.push(null)}),s.gradient==null)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);let a=s.gradient(i);for(let l in s.inputs){if(!(l in a))throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(a)}.`);let u=e(()=>a[l]());if(u.dtype!=="float32")throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${u.dtype}'`);let c=s.inputs[l];if(!no(u.shape,c.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${l}' has shape '${u.shape}', which does not match the shape of the input '${c.shape}'`);if(r[c.id]==null)r[c.id]=u;else{let p=r[c.id];r[c.id]=o(p,u),p.dispose()}}}}var Uv=20,tm=3,Vb=7;function Hv(r,t,e,o){let n=nn(t),s=TL(r,t,e,n),i=t.length,a=xh(r,t,e,n,s),l=["Tensor"];return o&&(l.push(`  dtype: ${e}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(a.map(u=>"    "+u).join(`
`)),l.join(`
`)}function TL(r,t,e,o){let n=Ot(t),s=o[o.length-1],i=new Array(s).fill(0),a=t.length,l=e==="complex64"?rm(r):r;if(a>1)for(let u=0;u<n/s;u++){let c=u*s;for(let p=0;p<s;p++)i[p]=Math.max(i[p],em(l[c+p],0,e).length)}return i}function em(r,t,e){let o;return Array.isArray(r)?o=`${parseFloat(r[0].toFixed(Vb))} + ${parseFloat(r[1].toFixed(Vb))}j`:Xa(r)?o=`'${r}'`:e==="bool"?o=qv(r):o=parseFloat(r.toFixed(Vb)).toString(),ja(o,t)}function qv(r){return r===0?"false":"true"}function xh(r,t,e,o,n,s=!0){let i=e==="complex64"?2:1,a=t[0],l=t.length;if(l===0){if(e==="complex64"){let d=rm(r);return[em(d[0],0,e)]}return e==="bool"?[qv(r[0])]:[r[0].toString()]}if(l===1){if(a>Uv){let g=tm*i,y=Array.from(r.slice(0,g)),b=Array.from(r.slice((a-tm)*i,a*i));return e==="complex64"&&(y=rm(y),b=rm(b)),["["+y.map((w,C)=>em(w,n[C],e)).join(", ")+", ..., "+b.map((w,C)=>em(w,n[a-tm+C],e)).join(", ")+"]"]}let d=e==="complex64"?rm(r):Array.from(r);return["["+d.map((g,y)=>em(g,n[y],e)).join(", ")+"]"]}let u=t.slice(1),c=o.slice(1),p=o[0]*i,m=[];if(a>Uv){for(let d=0;d<tm;d++){let g=d*p,y=g+p;m.push(...xh(r.slice(g,y),u,e,c,n,!1))}m.push("...");for(let d=a-tm;d<a;d++){let g=d*p,y=g+p;m.push(...xh(r.slice(g,y),u,e,c,n,d===a-1))}}else for(let d=0;d<a;d++){let g=d*p,y=g+p;m.push(...xh(r.slice(g,y),u,e,c,n,d===a-1))}let f=l===2?",":"";m[0]="["+m[0]+f;for(let d=1;d<m.length-1;d++)m[d]=" "+m[d]+f;let h=`,
`;for(let d=2;d<l;d++)h+=`
`;return m[m.length-1]=" "+m[m.length-1]+"]"+(s?"":h),m}function rm(r){let t=[];for(let e=0;e<r.length;e+=2)t.push([r[e],r[e+1]]);return t}var Ut=class{constructor(t,e,o){if(this.dtype=e,this.shape=t.slice(),this.size=Ot(t),o!=null){let n=o.length;E(n===this.size,()=>`Length of values '${n}' does not match the size inferred by the shape '${this.size}'.`)}if(e==="complex64")throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=o||Tb(e,this.size),this.strides=nn(t)}set(t,...e){e.length===0&&(e=[0]),E(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);let o=this.locToIndex(e);this.values[o]=t}get(...t){t.length===0&&(t=[0]);let e=0;for(let n of t){if(n<0||n>=this.shape[e]){let s=`Requested out of range element at ${t}.   Buffer shape=${this.shape}`;throw new Error(s)}e++}let o=t[t.length-1];for(let n=0;n<t.length-1;++n)o+=this.strides[n]*t[n];return this.values[o]}locToIndex(t){if(this.rank===0)return 0;if(this.rank===1)return t[0];let e=t[t.length-1];for(let o=0;o<t.length-1;++o)e+=this.strides[o]*t[o];return e}indexToLoc(t){if(this.rank===0)return[];if(this.rank===1)return[t];let e=new Array(this.shape.length);for(let o=0;o<e.length-1;++o)e[o]=Math.floor(t/this.strides[o]),t-=e[o]*this.strides[o];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return Go().makeTensor(this.values,this.shape,this.dtype)}},Go=null,dc=null,kL=null;function Kv(r){Go=r}function jv(r){dc=r}function Xv(r){kL=r}var Dt=class{constructor(t,e,o,n){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=Ot(t),this.strides=nn(t),this.dataId=o,this.id=n,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){let t=await this.data();return dc.buffer(this.shape,this.dtype,t)}bufferSync(){return dc.buffer(this.shape,this.dtype,this.dataSync())}async array(){let t=await this.data();return Ka(this.shape,t,this.dtype==="complex64")}arraySync(){return Ka(this.shape,this.dataSync(),this.dtype==="complex64")}async data(){this.throwIfDisposed();let t=Go().read(this.dataId);if(this.dtype==="string"){let e=await t;try{return e.map(o=>hc(o))}catch(o){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataToGPU(t){return this.throwIfDisposed(),Go().readToGPU(this.dataId,t)}dataSync(){this.throwIfDisposed();let t=Go().readSync(this.dataId);if(this.dtype==="string")try{return t.map(e=>hc(e))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();let t=await Go().read(this.dataId);return this.dtype==="string"?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(Go().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return dc.print(this,t)}clone(){return this.throwIfDisposed(),dc.clone(this)}toString(t=!1){let e=this.dataSync();return Hv(e,this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),dc.cast(this,t)}variable(t=!0,e,o){return this.throwIfDisposed(),Go().makeVariable(this,t,e,o)}};Object.defineProperty(Dt,Symbol.hasInstance,{value:r=>!!r&&r.data!=null&&r.dataSync!=null&&r.throwIfDisposed!=null});function R(){return jp("Tensor",()=>Dt)}R();var Fs=class extends Dt{constructor(t,e,o,n){super(t.shape,t.dtype,t.dataId,n),this.trainable=e,this.name=o}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!no(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);Go().disposeTensor(this),this.dataId=t.dataId,Go().incRef(this,null)}dispose(){Go().disposeVariable(this),this.isDisposedInternal=!0}};Object.defineProperty(Fs,Symbol.hasInstance,{value:r=>r instanceof Dt&&r.assign!=null&&r.assign instanceof Function});var yo={};qt(yo,{assertTypesMatch:()=>Kb,getTensorsInContainer:()=>om,isTensorInList:()=>$L,makeTypesMatch:()=>Ft});var Gb;(function(r){r.R0="R0",r.R1="R1",r.R2="R2",r.R3="R3",r.R4="R4",r.R5="R5",r.R6="R6"})(Gb||(Gb={}));var Wb;(function(r){r.float32="float32",r.int32="int32",r.bool="int32",r.complex64="complex64"})(Wb||(Wb={}));var Ub;(function(r){r.float32="float32",r.int32="int32",r.bool="bool",r.complex64="complex64"})(Ub||(Ub={}));var Hb;(function(r){r.float32="float32",r.int32="float32",r.bool="float32",r.complex64="complex64"})(Hb||(Hb={}));var qb;(function(r){r.float32="complex64",r.int32="complex64",r.bool="complex64",r.complex64="complex64"})(qb||(qb={}));var EL={float32:Hb,int32:Wb,bool:Ub,complex64:qb};function Re(r,t){if(r==="string"||t==="string"){if(r==="string"&&t==="string")return"string";throw new Error(`Can not upcast ${r} with ${t}`)}return EL[r][t]}function fl(r){return Re(r,"int32")}function Ft(r,t){if(r.dtype===t.dtype)return[r,t];let e=Re(r.dtype,t.dtype);return[r.cast(e),t.cast(e)]}function Kb(r,t){E(r.dtype===t.dtype,()=>`The dtypes of the first(${r.dtype}) and second(${t.dtype}) input must match`)}function $L(r,t){return t.some(e=>e.id===r.id)}function om(r){let t=[];return Yv(r,t,new Set),t}function Yv(r,t,e){if(r==null)return;if(r instanceof Dt){t.push(r);return}if(!AL(r))return;let o=r;for(let n in o){let s=o[n];e.has(s)||(e.add(s),Yv(s,t,e))}}function AL(r){return Array.isArray(r)||typeof r=="object"}function jb(r){return r.kernelName!=null}var yh=class{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(t=>t.name)))}}}dispose(){for(let t in this.registeredVariables)this.registeredVariables[t].dispose()}},Qi=class{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new yh}async ready(){if(this.pendingBackendInit!=null)return this.pendingBackendInit.then(()=>{});if(this.backendInstance!=null)return;let t=this.getSortedBackends();for(let e=0;e<t.length;e++){let o=t[e];if(await this.initializeBackend(o).success){await this.setBackend(o);return}}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(this.pendingBackendInit!=null)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(this.backendInstance==null){let{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry))if(t in this.registryFactory){let{asyncInit:e}=this.initializeBackend(t);if(e)return null}else return null;return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,o=1){return t in this.registryFactory?(cn(`${t} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[t]={factory:e,priority:o},!0)}async setBackend(t){if(this.registryFactory[t]==null)throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,this.registry[t]==null){this.backendInstance=null;let{success:e,asyncInit:o}=this.initializeBackend(t);if(!(o?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new gh(this.backendInstance),!0}setupRegisteredKernels(){Ob(this.backendName).forEach(e=>{e.setupFunc!=null&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(t){Ob(t).forEach(o=>{o.disposeFunc!=null&&o.disposeFunc(this.registry[t])})}initializeBackend(t){let e=this.registryFactory[t];if(e==null)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{let o=e.factory();if(o&&!(o instanceof Pn)&&typeof o.then=="function"){let n=++this.pendingBackendInitId,s=o.then(i=>n<this.pendingBackendInitId?!1:(this.registry[t]=i,this.pendingBackendInit=null,!0)).catch(i=>(n<this.pendingBackendInitId||(this.pendingBackendInit=null,cn(`Initialization of backend ${t} failed`),cn(i.stack||i.message)),!1));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}else return this.registry[t]=o,{success:!0,asyncInit:!1}}catch(o){return cn(`Initialization of backend ${t} failed`),cn(o.stack||o.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(`${t} backend not found in registry`);this.backendName===t&&this.pendingBackendInit!=null&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(Object.keys(this.registryFactory).length===0)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority)}initializeBackendsAndReturnBest(){let t=this.getSortedBackends();for(let e=0;e<t.length;e++){let o=t[e],{success:n,asyncInit:s}=this.initializeBackend(o);if(s||n)return{name:o,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){let o=this.state.tensorInfo.get(e),n=o.backend,s=this.readSync(e),i=n.refCount(e);n.disposeData(e,!0),o.backend=t,t.move(e,s,o.shape,o.dtype,i),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let o=null;if(e==null){if(typeof t!="function")throw new Error("Please provide a function to tidy()");e=t}else{if(typeof t!="string"&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if(typeof e!="function")throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");o=t}let n;return this.scopedRun(()=>this.startScope(o),()=>this.endScope(n),()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(t,e,o){t();try{let n=o();return e(),n}catch(n){throw e(),n}}nextTensorId(){return Qi.nextTensorId++}nextVariableId(){return Qi.nextVariableId++}clone(t){let e=k.runKernel(an,{x:t}),o={x:t},n=i=>({x:()=>{let a="float32",l={x:i},u={dtype:a};return k.runKernel(sn,l,u)}}),s=[];return this.addTapeNode(this.state.activeScope.name,o,[e],n,s,{}),e}runKernel(t,e,o){if(this.backendName==null&&this.backend,!(Jp(t,this.backendName)!=null))throw new Error(`Kernel '${t}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:t,inputs:e,attrs:o})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,o){let n=this.backend.numDataIds(),s=0;o.forEach(l=>{s+=l.dtype==="complex64"?3:1});let i=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],a=n-e-s-i;if(a>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${t}'`)}runKernelFunc(t){let e,o=[],n=this.isTapeOn(),s=this.state.numBytes,i=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);let a;this.backendName==null&&this.backend;let l,u=jb(t)?t.kernelName:this.state.activeScope!=null?this.state.activeScope.name:"";if(jb(t)){let{kernelName:h,inputs:d,attrs:g}=t;this.backendName==null&&this.backend;let y=Jp(h,this.backendName);E(y!=null,()=>`Cannot find registered kernel '${h}' for backend '${this.backendName}'`),a=()=>{let b=this.backend.numDataIds();l=y.kernelFunc({inputs:d,attrs:g,backend:this.backend});let w=Array.isArray(l)?l:[l];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(h,b,w);let C=w.map(I=>I.rank!=null?I:this.makeTensorFromTensorInfo(I));if(n){let I=this.getTensorsForGradient(h,d,C);o=this.saveTensorsForBackwardMode(I)}return C}}else{let{forwardFunc:h}=t,d=g=>{!n||(o=g.map(y=>this.keep(this.clone(y))))};a=()=>{let g=this.backend.numDataIds();l=this.tidy(()=>h(this.backend,d));let y=Array.isArray(l)?l:[l];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,g,y),y}}let{inputs:c,attrs:p}=t,m=jb(t)?null:t.backwardsFunc,f;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{!this.ENV.getBool("DEBUG")&&!this.state.profiling?e=a():(f=this.profiler.profileKernel(u,c,()=>a()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(f),e=f.outputs)}),n&&this.addTapeNode(u,c,e,m,o,p),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-i,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(c).map(h=>c[h]!=null?c[h].shape:null),outputShapes:e.map(h=>h.shape),kernelTimeMs:f.timeMs,extraInfo:f.extraInfo}),Array.isArray(l)?e:e[0]}saveTensorsForBackwardMode(t){return t.map(o=>this.keep(this.clone(o)))}getTensorsForGradient(t,e,o){let n=_b(t);if(n!=null){let s=n.inputsToSave||[],i=n.outputsToSave||[],a;n.saveAllInputs?(E(Array.isArray(e),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(e).map(u=>e[u])):a=s.map(u=>e[u]);let l=o.filter((u,c)=>i[c]);return a.concat(l)}return[]}makeTensor(t,e,o,n){if(t==null)throw new Error("Values passed to engine.makeTensor() are null");o=o||"float32",n=n||this.backend;let s=t;o==="string"&&Xa(t[0])&&(s=t.map(l=>ml(l)));let i=n.write(s,e,o),a=new Dt(e,o,i,this.nextTensorId());if(this.trackTensor(a,n),o==="string"){let l=this.state.tensorInfo.get(i),u=$b(s);this.state.numBytes+=u-l.bytes,l.bytes=u}return a}makeTensorFromDataId(t,e,o,n){o=o||"float32";let s={dataId:t,shape:e,dtype:o};return this.makeTensorFromTensorInfo(s,n)}makeTensorFromTensorInfo(t,e){let{dataId:o,shape:n,dtype:s}=t,i=new Dt(n,s,o,this.nextTensorId());return this.trackTensor(i,e),i}makeVariable(t,e=!0,o,n){o=o||this.nextVariableId().toString(),n!=null&&n!==t.dtype&&(t=t.cast(n));let s=new Fs(t,e,o,this.nextTensorId());if(this.state.registeredVariables[s.name]!=null)throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(t,e){this.state.numTensors++,t.dtype==="string"&&this.state.numStringTensors++;let o=0;t.dtype!=="complex64"&&t.dtype!=="string"&&(o=t.size*ph(t.dtype)),this.state.numBytes+=o,this.state.tensorInfo.has(t.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:o})),t instanceof Fs||this.track(t)}incRef(t,e){this.trackTensor(t,e),this.backend.incRef(t.dataId)}removeDataId(t,e){this.state.tensorInfo.has(t)&&this.state.tensorInfo.get(t).backend===e&&(this.state.tensorInfo.delete(t),this.state.numDataBuffers--)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;let e=this.state.tensorInfo.get(t.dataId);if(this.state.numTensors--,t.dtype==="string"&&(this.state.numStringTensors--,this.state.numBytes-=e.bytes),t.dtype!=="complex64"&&t.dtype!=="string"){let o=t.size*ph(t.dtype);this.state.numBytes-=o}e.backend.disposeData(t.dataId)&&this.removeDataId(t.dataId,e.backend)}disposeVariables(){for(let t in this.state.registeredVariables){let e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),this.state.registeredVariables[t.name]!=null&&delete this.state.registeredVariables[t.name]}memory(){let t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,t.reasons==null&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;let e=this.state.numBytes,o=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(n=>n.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-o;for(let n of this.state.activeProfile.kernels)n.kernelTimeMs=await n.kernelTimeMs,n.extraInfo=await n.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&this.state.kernelDepth===0}addTapeNode(t,e,o,n,s,i){let a={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:o,saved:s},l=_b(t);l!=null&&(n=l.gradFunc),n!=null&&(a.gradient=u=>(u=u.map((c,p)=>{if(c==null){let m=o[p],f=cu(m.size,m.dtype);return this.makeTensor(f,m.shape,m.dtype)}return c}),n(u.length>1?u:u[0],s,i))),this.state.activeTape.push(a)}keep(t){return t.kept=!0,t}startTape(){this.state.gradientDepth===0&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){let e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){let e=om(t),o=new Set(e.map(s=>s.id));for(let s=0;s<this.state.activeScope.track.length;s++){let i=this.state.activeScope.track[s];!i.kept&&!o.has(i.id)&&i.dispose()}let n=this.state.scopeStack.pop();this.state.activeScope=this.state.scopeStack.length===0?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach(s=>{!s.kept&&s.scopeId===n.id&&this.track(s)})}gradients(t,e,o,n=!1){if(E(e.length>0,()=>"gradients() received an empty list of xs."),o!=null&&o.dtype!=="float32")throw new Error(`dy must have 'float32' dtype, but has '${o.dtype}'`);let s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",t));E(s instanceof Dt,()=>"The result y returned by f() must be a tensor.");let i=Gv(this.state.activeTape,e,s);if(!n&&i.length===0&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{let a={};a[s.id]=o==null?DL(s.shape):o,Wv(a,i,u=>this.tidy(u),FL);let l=e.map(u=>a[u.id]);return this.state.gradientDepth===0&&(this.state.activeTape.forEach(u=>{for(let c of u.saved)c.dispose()}),this.state.activeTape=null),{value:s,grads:l}})}customGrad(t){return E(lu(t),()=>"The f passed in customGrad(f) must be a function."),(...e)=>{E(e.every(a=>a instanceof Dt),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");let o,n={};e.forEach((a,l)=>{n[l]=a});let s=(a,l)=>(o=t(...e,l),E(o.value instanceof Dt,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),E(lu(o.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),o.value),i=(a,l)=>{let u=o.gradFunc(a,l),c=Array.isArray(u)?u:[u];E(c.length===e.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),E(c.every(m=>m instanceof Dt),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");let p={};return c.forEach((m,f)=>{p[f]=()=>m}),p};return this.runKernelFunc({forwardFunc:s,backwardsFunc:i,inputs:n})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}readToGPU(t,e){return this.state.tensorInfo.get(t).backend.readToGPU(t,e)}async time(t){let e=pl(),o=await this.backend.time(t);return o.wallMs=pl()-e,o}track(t){return this.state.activeScope!=null&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new yh;for(let t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}};Qi.nextTensorId=0;Qi.nextVariableId=0;function DL(r){let t=Up(Ot(r),"float32");return k.makeTensor(t,r,"float32")}function Xb(){let r=Fb();if(r._tfengine==null){let t=new Kp(r);r._tfengine=new Qi(t)}return vv(r._tfengine.ENV),Kv(()=>r._tfengine),r._tfengine}var k=Xb();function FL(r,t){let e={a:r,b:t};return k.runKernel(Bo,e)}var ta={};qt(ta,{isBrowser:()=>Zb,isMobile:()=>OL,mockIsMobile:()=>_L});function RL(){return typeof navigator!="undefined"&&navigator!=null}var Yb;function _L(r){Yb=r}function OL(r){if(Yb!==void 0)return Yb;if(r||RL()){if(r||(r=navigator),r.product==="ReactNative")return!0;let t=r.userAgent||r.vendor||(typeof window!="undefined"?window.opera:"");if(!t){let e=r;return e.userAgentData&&e.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Zb(){return typeof window!="undefined"&&window.document!=null||typeof WorkerGlobalScope!="undefined"}var bo=M();bo.registerFlag("DEBUG",()=>!1,r=>{r&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")});bo.registerFlag("IS_BROWSER",()=>Zb());bo.registerFlag("IS_NODE",()=>typeof process!="undefined"&&typeof process.versions!="undefined"&&typeof process.versions.node!="undefined");bo.registerFlag("IS_CHROME",()=>typeof navigator!="undefined"&&navigator!=null&&navigator.userAgent!=null&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor));bo.registerFlag("PROD",()=>!1);bo.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>bo.getBool("DEBUG"));bo.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0);bo.registerFlag("IS_TEST",()=>!1);bo.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0);bo.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1);bo.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);function Cr(r,t){let e=r;if(Or(r))return t==="string"?[]:[r.length];if(!Array.isArray(r))return[];let o=[];for(;Array.isArray(e)||Or(e)&&t!=="string";)o.push(e.length),e=e[0];return Array.isArray(r)&&M().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Jv(r,o,[]),o}function Jv(r,t,e){if(e=e||[],!Array.isArray(r)&&!Or(r)){E(t.length===0,()=>`Element arr[${e.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);return}E(t.length>0,()=>`Element arr[${e.join("][")}] should be a primitive, but is an array of ${r.length} elements`),E(r.length===t[0],()=>`Element arr[${e.join("][")}] should have ${t[0]} elements, but has ${r.length} elements`);let o=t.slice(1);for(let n=0;n<r.length;++n)Jv(r[n],o,e.concat(n))}function Zv(r,t,e,o){if(r!=="string_or_numeric"){if(r==null)throw new Error("Expected dtype cannot be null.");if(r!=="numeric"&&r!==t||r==="numeric"&&t==="string")throw new Error(`Argument '${e}' passed to '${o}' must be ${r} tensor, but got ${t} tensor`)}}function N(r,t,e,o="numeric"){if(r instanceof Dt)return Zv(o,r.dtype,t,e),r;let n=au(r);if(n!=="string"&&["bool","int32","float32"].indexOf(o)>=0&&(n=o),Zv(o,n,t,e),r==null||!Or(r)&&!Array.isArray(r)&&typeof r!="number"&&typeof r!="boolean"&&typeof r!="string"){let l=r==null?"null":r.constructor.name;throw new Error(`Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${l}'`)}let s=Cr(r,n);!Or(r)&&!Array.isArray(r)&&(r=[r]);let a=n!=="string"?fc(r,n):zn(r,[],!0);return k.makeTensor(a,s,n)}function ea(r,t,e,o="numeric"){if(!Array.isArray(r))throw new Error(`Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``);return r.map((s,i)=>N(s,`${t}[${i}]`,e,o))}var Jb="__op";function S(r){let t=Object.keys(r);if(t.length!==1)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let e=t[0],o=r[e];e.endsWith("_")&&(e=e.substring(0,e.length-1)),e=e+Jb;let n=(...s)=>{k.startScope(e);try{let i=o(...s);return qp(i)&&console.error("Cannot return a Promise inside of tidy."),k.endScope(i),i}catch(i){throw k.endScope(null),i}};return Object.defineProperty(n,"name",{value:e,configurable:!0}),n}function LL(r,t){let e=N(r,"real","complex"),o=N(t,"imag","complex");Ne(e.shape,o.shape,`real and imag shapes, ${e.shape} and ${o.shape}, must match in call to tf.complex().`);let n={real:e,imag:o};return k.runKernel(xu,n)}var Lr=S({complex_:LL});function vr(r,t,e,o){if(o==null&&(o=au(r)),o==="complex64")throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!Or(r)&&!Array.isArray(r)&&typeof r!="number"&&typeof r!="boolean"&&typeof r!="string")throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(t!=null){Hp(t);let n=Ot(t),s=Ot(e);E(n===s,()=>`Based on the provided shape, [${t}], the tensor should have ${n} values but has ${s}`);for(let i=0;i<e.length;++i){let a=e[i],l=i===e.length-1?a!==Ot(t.slice(i)):!0;E(e[i]===t[i]||!l,()=>`Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `)}}return!Or(r)&&!Array.isArray(r)&&(r=[r]),t=t||e,r=o!=="string"?fc(r,o):zn(r,[],!0),k.makeTensor(r,t,o)}function Ze(r,t,e){let o=Cr(r,e);return vr(r,t,o,e)}var nm={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var bh=4;async function tN(r,t){let e=[],o=[],n=Array.isArray(r)?r.map(i=>i.name):Object.keys(r);for(let i=0;i<n.length;++i){let a=n[i],l=Array.isArray(r)?r[i].tensor:r[a];if(l.dtype!=="float32"&&l.dtype!=="int32"&&l.dtype!=="bool"&&l.dtype!=="string"&&l.dtype!=="complex64")throw new Error(`Unsupported dtype in weight '${a}': ${l.dtype}`);let u={name:a,shape:l.shape,dtype:l.dtype};if(l.dtype==="string"){let c=new Promise(async p=>{let m=await l.bytes(),f=m.reduce((g,y)=>g+y.length,0)+bh*m.length,h=new Uint8Array(f),d=0;for(let g=0;g<m.length;g++){let y=m[g],b=new Uint8Array(new Uint32Array([y.length]).buffer);h.set(b,d),d+=bh,h.set(y,d),d+=y.length}p(h)});o.push(c)}else o.push(l.data());t!=null&&(u.group=t),e.push(u)}let s=await Promise.all(o);return{data:PL(s),specs:e}}function wh(r,t){let e={},o,n=0;for(let s of t){let i=s.name,a=s.dtype,l=s.shape,u=Ot(l),c;if("quantization"in s){let p=s.quantization;if(p.dtype==="uint8"||p.dtype==="uint16"){if(!("min"in p&&"scale"in p))throw new Error(`Weight ${s.name} with quantization ${p.dtype} doesn't have corresponding metadata min and scale.`)}else if(p.dtype==="float16"){if(a!=="float32")throw new Error(`Weight ${s.name} is quantized with ${p.dtype} which only supports weights of type float32 not ${a}.`)}else throw new Error(`Weight ${s.name} has unknown quantization dtype ${p.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);let m=nm[p.dtype],f=r.slice(n,n+u*m),h=p.dtype==="uint8"?new Uint8Array(f):new Uint16Array(f);if(a==="float32")if(p.dtype==="uint8"||p.dtype==="uint16"){c=new Float32Array(h.length);for(let d=0;d<h.length;d++){let g=h[d];c[d]=g*p.scale+p.min}}else if(p.dtype==="float16")o===void 0&&(o=VL()),c=o(h);else throw new Error(`Unsupported quantization type ${p.dtype} for weight type float32.`);else if(a==="int32"){if(p.dtype!=="uint8"&&p.dtype!=="uint16")throw new Error(`Unsupported quantization type ${p.dtype} for weight type int32.`);c=new Int32Array(h.length);for(let d=0;d<h.length;d++){let g=h[d];c[d]=Math.round(g*p.scale+p.min)}}else throw new Error(`Unsupported dtype in weight '${i}': ${a}`);n+=u*m}else if(a==="string"){let p=Ot(s.shape);c=[];for(let m=0;m<p;m++){let f=new Uint32Array(r.slice(n,n+bh))[0];n+=bh;let h=new Uint8Array(r.slice(n,n+f));c.push(h),n+=f}}else{let p=nm[a],m=r.slice(n,n+u*p);if(a==="float32")c=new Float32Array(m);else if(a==="int32")c=new Int32Array(m);else if(a==="bool")c=new Uint8Array(m);else if(a==="complex64"){c=new Float32Array(m);let f=new Float32Array(c.length/2),h=new Float32Array(c.length/2);for(let y=0;y<f.length;y++)f[y]=c[y*2],h[y]=c[y*2+1];let d=Ze(f,l,"float32"),g=Ze(h,l,"float32");e[i]=Lr(d,g),d.dispose(),g.dispose()}else throw new Error(`Unsupported dtype in weight '${i}': ${a}`);n+=u*p}a!=="complex64"&&(e[i]=Ze(c,l,a))}return e}function PL(r){if(r===null)throw new Error(`Invalid input value: ${JSON.stringify(r)}`);let t=0,e=[];r.forEach(s=>{if(t+=s.byteLength,e.push(s.byteLength===s.buffer.byteLength?s:new s.constructor(s)),!(s instanceof Float32Array||s instanceof Int32Array||s instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${s.constructor.name}`)});let o=new Uint8Array(t),n=0;return e.forEach(s=>{o.set(new Uint8Array(s.buffer),n),n+=s.byteLength}),o.buffer}var Qb=typeof Buffer!="undefined"&&(typeof Blob=="undefined"||typeof atob=="undefined"||typeof btoa=="undefined");function Qv(r){return Qb?Buffer.byteLength(r):new Blob([r]).size}function eN(r){if(Qb)return Buffer.from(r).toString("base64");let t=new Uint8Array(r),e="";for(let o=0,n=t.length;o<n;o++)e+=String.fromCharCode(t[o]);return btoa(e)}function rN(r){if(Qb){let o=Buffer.from(r,"base64");return o.buffer.slice(o.byteOffset,o.byteOffset+o.byteLength)}let t=atob(r),e=new Uint8Array(t.length);for(let o=0;o<t.length;++o)e.set([t.charCodeAt(o)],o);return e.buffer}function gc(r){if(r.length===1)return r[0];let t=0;r.forEach(n=>{t+=n.byteLength});let e=new Uint8Array(t),o=0;return r.forEach(n=>{e.set(new Uint8Array(n),o),o+=n.byteLength}),e.buffer}function tw(r){let t="/";for(r=r.trim();r.endsWith(t);)r=r.slice(0,r.length-1);let e=r.split(t);return e[e.length-1]}function Ch(r,t){let e={modelTopology:r.modelTopology,format:r.format,generatedBy:r.generatedBy,convertedBy:r.convertedBy,weightsManifest:t};return r.signature!=null&&(e.signature=r.signature),r.userDefinedMetadata!=null&&(e.userDefinedMetadata=r.userDefinedMetadata),r.modelInitializer!=null&&(e.modelInitializer=r.modelInitializer),r.trainingConfig!=null&&(e.trainingConfig=r.trainingConfig),e}async function xc(r,t){let e={modelTopology:r.modelTopology,format:r.format,generatedBy:r.generatedBy,convertedBy:r.convertedBy};if(r.trainingConfig!=null&&(e.trainingConfig=r.trainingConfig),r.weightsManifest!=null){let[o,n]=await t(r.weightsManifest);e.weightSpecs=o,e.weightData=n}return r.signature!=null&&(e.signature=r.signature),r.userDefinedMetadata!=null&&(e.userDefinedMetadata=r.userDefinedMetadata),r.modelInitializer!=null&&(e.modelInitializer=r.modelInitializer),e}function pn(r){if(r.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:r.modelTopology==null?0:Qv(JSON.stringify(r.modelTopology)),weightSpecsBytes:r.weightSpecs==null?0:Qv(JSON.stringify(r.weightSpecs)),weightDataBytes:r.weightData==null?0:r.weightData.byteLength}}function zL(){let r=e=>{let o=e<<13,n=0;for(;(o&8388608)===0;)n-=8388608,o<<=1;return o&=-8388609,n+=947912704,o|n},t=new Uint32Array(2048);t[0]=0;for(let e=1;e<1024;e++)t[e]=r(e);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}function ML(){let r=new Uint32Array(64);r[0]=0,r[31]=1199570944,r[32]=2147483648,r[63]=3347054592;for(let t=1;t<31;t++)r[t]=t<<23;for(let t=33;t<63;t++)r[t]=2147483648+(t-32<<23);return r}function BL(){let r=new Uint32Array(64);for(let t=0;t<64;t++)r[t]=1024;return r[0]=r[32]=0,r}function VL(){let r=zL(),t=ML(),e=BL();return o=>{let n=new ArrayBuffer(4*o.length),s=new Uint32Array(n);for(let i=0;i<o.length;i++){let a=o[i],l=r[e[a>>10]+(a&1023)]+t[a>>10];s[i]=l}return new Float32Array(n)}}var Jt=class{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return Jt.instance==null&&(Jt.instance=new Jt),Jt.instance}static registerSaveRouter(t){Jt.getInstance().saveRouters.push(t)}static registerLoadRouter(t){Jt.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return Jt.getHandlers(t,"save")}static getLoadHandlers(t,e){return Jt.getHandlers(t,"load",e)}static getHandlers(t,e,o){let n=[];return(e==="load"?Jt.getInstance().loadRouters:Jt.getInstance().saveRouters).forEach(i=>{let a=i(t,o);a!==null&&n.push(a)}),n}},oN=r=>Jt.registerSaveRouter(r),nN=r=>Jt.registerLoadRouter(r),sN=r=>Jt.getSaveHandlers(r),iN=(r,t)=>Jt.getLoadHandlers(r,t);var ew="tensorflowjs",rw=1,hl="models_store",ra="model_info_store";function aN(){if(!M().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");let r=typeof window=="undefined"?self:window,t=r.indexedDB||r.mozIndexedDB||r.webkitIndexedDB||r.msIndexedDB||r.shimIndexedDB;if(t==null)throw new Error("The current browser does not appear to support IndexedDB.");return t}function ow(r){let t=r.result;t.createObjectStore(hl,{keyPath:"modelPath"}),t.createObjectStore(ra,{keyPath:"modelPath"})}var mn=class{constructor(t){if(this.indexedDB=aN(),t==null||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise((o,n)=>{let s=this.indexedDB.open(ew,rw);s.onupgradeneeded=()=>ow(s),s.onsuccess=()=>{let i=s.result;if(e==null){let a=i.transaction(hl,"readonly"),u=a.objectStore(hl).get(this.modelPath);u.onsuccess=()=>{if(u.result==null)return i.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));o(u.result.modelArtifacts)},u.onerror=c=>(i.close(),n(u.error)),a.oncomplete=()=>i.close()}else{let a=pn(e),l=i.transaction(ra,"readwrite"),u=l.objectStore(ra),c=u.put({modelPath:this.modelPath,modelArtifactsInfo:a}),p;c.onsuccess=()=>{p=i.transaction(hl,"readwrite");let f=p.objectStore(hl).put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:a});f.onsuccess=()=>o({modelArtifactsInfo:a}),f.onerror=h=>{u=l.objectStore(ra);let d=u.delete(this.modelPath);d.onsuccess=()=>(i.close(),n(f.error)),d.onerror=g=>(i.close(),n(f.error))}},c.onerror=m=>(i.close(),n(c.error)),l.oncomplete=()=>{p==null?i.close():p.oncomplete=()=>i.close()}}},s.onerror=i=>n(s.error)})}};mn.URL_SCHEME="indexeddb://";var lN=r=>M().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(mn.URL_SCHEME)?GL(r.slice(mn.URL_SCHEME.length)):null;Jt.registerSaveRouter(lN);Jt.registerLoadRouter(lN);function GL(r){return new mn(r)}function WL(r){return r.startsWith(mn.URL_SCHEME)?r.slice(mn.URL_SCHEME.length):r}var vh=class{constructor(){this.indexedDB=aN()}async listModels(){return new Promise((t,e)=>{let o=this.indexedDB.open(ew,rw);o.onupgradeneeded=()=>ow(o),o.onsuccess=()=>{let n=o.result,s=n.transaction(ra,"readonly"),a=s.objectStore(ra).getAll();a.onsuccess=()=>{let l={};for(let u of a.result)l[u.modelPath]=u.modelArtifactsInfo;t(l)},a.onerror=l=>(n.close(),e(a.error)),s.oncomplete=()=>n.close()},o.onerror=n=>e(o.error)})}async removeModel(t){return t=WL(t),new Promise((e,o)=>{let n=this.indexedDB.open(ew,rw);n.onupgradeneeded=()=>ow(n),n.onsuccess=()=>{let s=n.result,i=s.transaction(ra,"readwrite"),a=i.objectStore(ra),l=a.get(t),u;l.onsuccess=()=>{if(l.result==null)return s.close(),o(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{let c=a.delete(t),p=()=>{u=s.transaction(hl,"readwrite");let f=u.objectStore(hl).delete(t);f.onsuccess=()=>e(l.result.modelArtifactsInfo),f.onerror=h=>o(l.error)};c.onsuccess=p,c.onerror=m=>(p(),s.close(),o(l.error))}},l.onerror=c=>(s.close(),o(l.error)),i.oncomplete=()=>{u==null?s.close():u.oncomplete=()=>s.close()}},n.onerror=s=>o(n.error)})}};var Rs="/",yc="tensorflowjs_models",uN="info",UL="model_topology",HL="weight_specs",qL="weight_data",KL="model_metadata";function cN(r){return{info:[yc,r,uN].join(Rs),topology:[yc,r,UL].join(Rs),weightSpecs:[yc,r,HL].join(Rs),weightData:[yc,r,qL].join(Rs),modelMetadata:[yc,r,KL].join(Rs)}}function pN(r){for(let t of Object.values(r))window.localStorage.removeItem(t)}function jL(r){let t=r.split(Rs);if(t.length<3)throw new Error(`Invalid key format: ${r}`);return t.slice(1,t.length-1).join(Rs)}function XL(r){return r.startsWith(fn.URL_SCHEME)?r.slice(fn.URL_SCHEME.length):r}var fn=class{constructor(t){if(!M().getBool("IS_BROWSER")||typeof window=="undefined"||typeof window.localStorage=="undefined")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,t==null||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=cN(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{let e=JSON.stringify(t.modelTopology),o=JSON.stringify(t.weightSpecs),n=pn(t);try{this.LS.setItem(this.keys.info,JSON.stringify(n)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,o),this.LS.setItem(this.keys.weightData,eN(t.weightData));let s={format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,signature:t.signature!=null?t.signature:void 0,userDefinedMetadata:t.userDefinedMetadata!=null?t.userDefinedMetadata:void 0,modelInitializer:t.modelInitializer!=null?t.modelInitializer:void 0,trainingConfig:t.trainingConfig!=null?t.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:n}}catch(s){throw pN(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${n.modelTopologyBytes}, weightSpecsBytes=${n.weightSpecsBytes}, weightDataBytes=${n.weightDataBytes}.`)}}}async load(){let t=JSON.parse(this.LS.getItem(this.keys.info));if(t==null)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if(t.modelTopologyType!=="JSON")throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");let e={},o=JSON.parse(this.LS.getItem(this.keys.topology));if(o==null)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=o;let n=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(n==null)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=n;let s=this.LS.getItem(this.keys.modelMetadata);if(s!=null){let a=JSON.parse(s);e.format=a.format,e.generatedBy=a.generatedBy,e.convertedBy=a.convertedBy,a.signature!=null&&(e.signature=a.signature),a.userDefinedMetadata!=null&&(e.userDefinedMetadata=a.userDefinedMetadata),a.modelInitializer!=null&&(e.modelInitializer=a.modelInitializer),a.trainingConfig!=null&&(e.trainingConfig=a.trainingConfig)}let i=this.LS.getItem(this.keys.weightData);if(i==null)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=rN(i),e}};fn.URL_SCHEME="localstorage://";var mN=r=>M().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(fn.URL_SCHEME)?YL(r.slice(fn.URL_SCHEME.length)):null;Jt.registerSaveRouter(mN);Jt.registerLoadRouter(mN);function YL(r){return new fn(r)}var Nh=class{constructor(){E(M().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),E(typeof window=="undefined"||typeof window.localStorage!="undefined",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){let t={},e=yc+Rs,o=Rs+uN;for(let n=0;n<this.LS.length;++n){let s=this.LS.key(n);if(s.startsWith(e)&&s.endsWith(o)){let i=jL(s);t[i]=JSON.parse(this.LS.getItem(s))}}return t}async removeModel(t){t=XL(t);let e=cN(t);if(this.LS.getItem(e.info)==null)throw new Error(`Cannot find model at path '${t}'`);let o=JSON.parse(this.LS.getItem(e.info));return pN(e),o}};var bc="://",Je=class{constructor(){this.managers={}}static getInstance(){return Je.instance==null&&(Je.instance=new Je),Je.instance}static registerManager(t,e){E(t!=null,()=>"scheme must not be undefined or null."),t.endsWith(bc)&&(t=t.slice(0,t.indexOf(bc))),E(t.length>0,()=>"scheme must not be an empty string.");let o=Je.getInstance();E(o.managers[t]==null,()=>`A model store manager is already registered for scheme '${t}'.`),o.managers[t]=e}static getManager(t){let e=Je.getInstance().managers[t];if(e==null)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(Je.getInstance().managers)}};function Sh(r){if(r.indexOf(bc)===-1)throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Je.getSchemes().join(",")}`);return{scheme:r.split(bc)[0],path:r.split(bc)[1]}}async function fN(r,t,e=!1){E(r!==t,()=>`Old path and new path are the same: '${r}'`);let o=Jt.getLoadHandlers(r);E(o.length>0,()=>`Copying failed because no load handler is found for source URL ${r}.`),E(o.length<2,()=>`Copying failed because more than one (${o.length}) load handlers for source URL ${r}.`);let n=o[0],s=Jt.getSaveHandlers(t);E(s.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),E(s.length<2,()=>`Copying failed because more than one (${o.length}) save handlers for destination URL ${t}.`);let i=s[0],a=Sh(r).scheme,l=Sh(r).path,u=a===Sh(r).scheme,c=await n.load();e&&u&&await Je.getManager(a).removeModel(l);let p=await i.save(c);return e&&!u&&await Je.getManager(a).removeModel(l),p.modelArtifactsInfo}async function hN(){let r=Je.getSchemes(),t={};for(let e of r){let o=await Je.getManager(e).listModels();for(let n in o){let s=e+bc+n;t[s]=o[n]}}return t}async function dN(r){let t=Sh(r);return Je.getManager(t.scheme).removeModel(t.path)}async function gN(r,t){return fN(r,t,!1)}async function xN(r,t){return fN(r,t,!0)}var nw=class{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if(e!=="utf-8"&&e!=="utf8")throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return this.textEncoder==null&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}};if(M().get("IS_BROWSER")){M().setPlatform("browser",new nw);try{Je.registerManager(fn.URL_SCHEME,new Nh)}catch(r){}try{Je.registerManager(mn.URL_SCHEME,new vh)}catch(r){}}var ZL={importFetch:()=>yN()},sw;var iw=class{constructor(){this.util=bN(),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return M().global.fetch!=null?M().global.fetch(t,e):(sw==null&&(sw=ZL.importFetch()),sw(t,e))}now(){let t=process.hrtime();return t[0]*1e3+t[1]/1e6}encode(t,e){if(e!=="utf-8"&&e!=="utf8")throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(t)}decode(t,e){return t.length===0?"":new this.util.TextDecoder(e).decode(t)}};M().get("IS_NODE")&&!M().get("IS_BROWSER")&&M().setPlatform("node",new iw);function pt(r,t="float32",e){return t=t||"float32",Hp(r),new Ut(r,t,e)}function JL(r,t){let e=N(r,"x","cast");if(!Eb(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if(t==="string"&&e.dtype!=="string"||t!=="string"&&e.dtype==="string")throw new Error("Only strings can be casted to strings");let o={x:e},n={dtype:t};return k.runKernel(sn,o,n)}var q=S({cast_:JL});function QL(r){let e={x:N(r,"x","clone","string_or_numeric")};return k.runKernel(an,e)}var Nr=S({clone_:QL});function Ih(r,t=!1){console.log(r.toString(t))}Xb();var tP={buffer:pt,cast:q,clone:Nr,print:Ih};jv(tP);var Wo={};qt(Wo,{browserFiles:()=>CN,browserHTTPRequest:()=>SN,concatenateArrayBuffers:()=>gc,copyModel:()=>gN,decodeWeights:()=>wh,encodeWeights:()=>tN,fromMemory:()=>IN,fromMemorySync:()=>mw,getLoadHandlers:()=>iN,getModelArtifactsForJSON:()=>xc,getModelArtifactsInfoForJSON:()=>pn,getSaveHandlers:()=>sN,http:()=>kh,isHTTPScheme:()=>Th,listModels:()=>hN,loadWeights:()=>vN,moveModel:()=>xN,registerLoadRouter:()=>nN,registerSaveRouter:()=>oN,removeModel:()=>dN,weightsLoaderFactory:()=>cw,withSaveHandler:()=>TN,withSaveHandlerSync:()=>kN});var eP="model",rP=".json",oP=".weights.bin";function wN(r){return new Promise(t=>setTimeout(t)).then(r)}var _s=class{constructor(t){if(!M().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(_s.URL_SCHEME)&&(t=t.slice(_s.URL_SCHEME.length)),(t==null||t.length===0)&&(t=eP),this.modelJsonFileName=t+rP,this.weightDataFileName=t+oP}async save(t){if(typeof document=="undefined")throw new Error("Browser downloads are not supported in this environment since `document` is not present");let e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{let o=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],n=Ch(t,o),s=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),i=this.modelJsonAnchor==null?document.createElement("a"):this.modelJsonAnchor;if(i.download=this.modelJsonFileName,i.href=s,await wN(()=>i.dispatchEvent(new MouseEvent("click"))),t.weightData!=null){let a=this.weightDataAnchor==null?document.createElement("a"):this.weightDataAnchor;a.download=this.weightDataFileName,a.href=e,await wN(()=>a.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:pn(t)}}}};_s.URL_SCHEME="downloads://";var aw=class{constructor(t){if(t==null||t.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${t}`);this.jsonFile=t[0],this.weightsFiles=t.slice(1)}async load(){return new Promise((t,e)=>{let o=new FileReader;o.onload=n=>{let s=JSON.parse(n.target.result),i=s.modelTopology;if(i==null){e(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));return}if(s.weightsManifest==null){e(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));return}if(this.weightsFiles.length===0){t({modelTopology:i});return}let l=xc(s,u=>this.loadWeights(u));t(l)},o.onerror=n=>e(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),o.readAsText(this.jsonFile)})}loadWeights(t){let e=[],o=[];for(let i of t)e.push(...i.weights),o.push(...i.paths);let n=this.checkManifestAndWeightFiles(t),s=o.map(i=>this.loadWeightsFile(i,n[i]));return Promise.all(s).then(i=>[e,gc(i)])}loadWeightsFile(t,e){return new Promise((o,n)=>{let s=new FileReader;s.onload=i=>{let a=i.target.result;o(a)},s.onerror=i=>n(`Failed to weights data from file of path '${t}'.`),s.readAsArrayBuffer(e)})}checkManifestAndWeightFiles(t){let e=[],o=this.weightsFiles.map(s=>tw(s.name)),n={};for(let s of t)s.paths.forEach(i=>{let a=tw(i);if(e.indexOf(a)!==-1)throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(e.push(a),o.indexOf(a)===-1)throw new Error(`Weight file with basename '${a}' is not provided.`);n[i]=this.weightsFiles[o.indexOf(a)]});if(e.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${e.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return n}},nP=r=>M().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(_s.URL_SCHEME)?sP(r.slice(_s.URL_SCHEME.length)):null;Jt.registerSaveRouter(nP);function sP(r="model"){return new _s(r)}function CN(r){return new aw(r)}function lw(r,t,e,o){i(r),e=e==null?0:e,o=o==null?1:o,a(e,o);let n=0,s=l=>(l.then(u=>{let c=e+ ++n/r.length*(o-e);return t(c),u}),l);function i(l){E(l!=null&&Array.isArray(l)&&l.length>0,()=>"promises must be a none empty array")}function a(l,u){E(l>=0&&l<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${l}`),E(u>=0&&u<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${u}`),E(u>=l,()=>`startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${u}`)}return Promise.all(r.map(s))}async function uw(r,t){t==null&&(t={});let e=t.fetchFunc==null?M().platform.fetch:t.fetchFunc,o=r.map(p=>e(p,t.requestInit,{isBinary:!0})),n=0,s=.5,a=(t.onProgress==null?await Promise.all(o):await lw(o,t.onProgress,n,s)).map(p=>p.arrayBuffer()),l=.5,u=1;return t.onProgress==null?await Promise.all(a):await lw(a,t.onProgress,l,u)}async function vN(r,t="",e,o){return cw(i=>uw(i,{requestInit:o}))(r,t,e)}function cw(r){return async(t,e="",o)=>{let n=t.map(()=>!1),s={},i=o!=null?o.map(()=>!1):[],a=[];if(t.forEach((f,h)=>{let d=0;f.weights.forEach(g=>{let y="quantization"in g?g.quantization.dtype:g.dtype,b=nm[y]*Ot(g.shape),w=()=>{n[h]=!0,s[h]==null&&(s[h]=[]),s[h].push({manifestEntry:g,groupOffset:d,sizeBytes:b})};o!=null?o.forEach((C,I)=>{C===g.name&&(w(),i[I]=!0)}):w(),a.push(g.name),d+=b})}),!i.every(f=>f)){let f=o.filter((h,d)=>!i[d]);throw new Error(`Could not find weights in manifest with names: ${f.join(", ")}. 
Manifest JSON has weights with names: ${a.join(", ")}.`)}let l=n.reduce((f,h,d)=>(h&&f.push(d),f),[]),u=[];l.forEach(f=>{t[f].paths.forEach(h=>{let d=e+(e.endsWith("/")?"":"/")+h;u.push(d)})});let c=await r(u),p={},m=0;return l.forEach(f=>{let h=t[f].paths.length,d=0;for(let C=0;C<h;C++)d+=c[m+C].byteLength;let g=new ArrayBuffer(d),y=new Uint8Array(g),b=0;for(let C=0;C<h;C++){let I=new Uint8Array(c[m+C]);y.set(I,b),b+=I.byteLength}s[f].forEach(C=>{let I=g.slice(C.groupOffset,C.groupOffset+C.sizeBytes),$=wh(I,[C.manifestEntry]);for(let A in $)p[A]=$[A]}),m+=h}),p}}var iP="application/octet-stream",aP="application/json",sm=class{constructor(t,e){if(this.DEFAULT_METHOD="POST",e==null&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,this.weightUrlConverter=e.weightUrlConverter,e.fetchFunc!=null?(E(typeof e.fetchFunc=="function",()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=e.fetchFunc):this.fetch=M().platform.fetch,E(t!=null&&t.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(t)&&E(t.length===2,()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`),this.path=t,e.requestInit!=null&&e.requestInit.body!=null)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");let e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;let o=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],n=Ch(t,o);e.body.append("model.json",new Blob([JSON.stringify(n)],{type:aP}),"model.json"),t.weightData!=null&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:iP}),"model.weights.bin");let s=await this.fetch(this.path,e);if(s.ok)return{modelArtifactsInfo:pn(t),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){let t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);let e;try{e=await t.json()}catch(s){let i=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?i+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":i+=" Please make sure the server is serving valid JSON for this request.",new Error(i)}let o=e.modelTopology,n=e.weightsManifest;if(o==null&&n==null)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return xc(e,s=>this.loadWeights(s))}async loadWeights(t){let e=Array.isArray(this.path)?this.path[1]:this.path,[o,n]=lP(e),s=this.weightPathPrefix||o,i=[];for(let c of t)i.push(...c.weights);let a=[],l=[];for(let c of t)for(let p of c.paths)this.weightUrlConverter!=null?l.push(this.weightUrlConverter(p)):a.push(s+p+n);this.weightUrlConverter&&a.push(...await Promise.all(l));let u=await uw(a,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress});return[i,gc(u)]}};sm.URL_SCHEME_REGEX=/^https?:\/\//;function lP(r){let t=r.lastIndexOf("/"),e=r.lastIndexOf("?"),o=r.substring(0,t),n=e>t?r.substring(e):"";return[o+"/",n]}function Th(r){return r.match(sm.URL_SCHEME_REGEX)!=null}var NN=(r,t)=>{if(typeof fetch=="undefined"&&(t==null||t.fetchFunc==null))return null;{let e=!0;if(Array.isArray(r)?e=r.every(o=>Th(o)):e=Th(r),e)return kh(r,t)}return null};Jt.registerSaveRouter(NN);Jt.registerLoadRouter(NN);function kh(r,t){return new sm(r,t)}function SN(r,t){return kh(r,t)}var im=class{constructor(t){this.modelArtifacts=t}load(){return this.modelArtifacts}},Eh=class{constructor(t){this.saveHandler=t}save(t){return this.saveHandler(t)}},pw=class{constructor(t){t.load&&(this.load=()=>Promise.resolve(t.load())),t.save&&(this.save=e=>Promise.resolve(t.save(e)))}};function IN(r,t,e,o){let n=arguments;return new pw(mw(...n))}function mw(r,t,e,o){return arguments.length===1?r.modelTopology!=null||r.weightSpecs!=null?new im(r):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new im({modelTopology:r})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new im({modelTopology:r,weightSpecs:t,weightData:e,trainingConfig:o}))}function TN(r){return new Eh(r)}function kN(r){return new Eh(r)}function uP(r,t,e=!1,o=!1){let n=N(r,"a","matMul"),s=N(t,"b","matMul");[n,s]=Ft(n,s);let i={a:n,b:s},a={transposeA:e,transposeB:o};return k.runKernel(pi,i,a)}var kt=S({matMul_:uP});function cP(r,t,e=1,o=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);let s={indices:N(r,"indices","oneHot","int32")},i={depth:t,onValue:e,offValue:o};return k.runKernel(_i,s,i)}var hn=S({oneHot_:cP});function pP(r){M().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(r+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}Xv(pP);function dn(){return k}function oa(){return k.memory()}function z(r,t){return k.tidy(r,t)}function yt(r){om(r).forEach(e=>e.dispose())}function ue(r){return k.keep(r)}function fw(r){return k.setBackend(r)}function EN(){return k.ready()}function hw(){return k.backendName}function $h(r,t,e=1){return k.registerBackend(r,t,e)}function $N(){return k.backend}function mP(r){let e={input:N(r,"input","imag")};return k.runKernel(Ou,e)}var na=S({imag_:mP});function fP(r){let e={x:N(r,"x","neg")};return k.runKernel(Fi,e)}var Rt=S({neg_:fP});function hP(r){let e={input:N(r,"input","real")};return k.runKernel(qu,e)}var Os=S({real_:hP});function dP(r,t,e){let o=N(r,"x","transpose");if(t==null&&(t=o.shape.map((i,a)=>a).reverse()),E(o.rank===t.length,()=>`Error in transpose: rank of input ${o.rank} must match length of perm ${t}.`),t.forEach(i=>{E(i>=0&&i<o.rank,()=>`All entries in 'perm' must be between 0 and ${o.rank-1} but got ${t}`)}),o.rank<=1)return o.clone();let n={x:o},s={perm:t};return o.dtype==="complex64"?z(()=>{let i=Os(o),a=na(o);return i=k.runKernel(un,{x:i},s),a=k.runKernel(un,{x:a},s),e&&(a=Rt(a)),Lr(i,a)}):k.runKernel(un,n,s)}var St=S({transpose_:dP});function gP(r,t,e){let o=N(r,"labels","confusionMatrix"),n=N(t,"predictions","confusionMatrix");E(e==null||e>0&&Number.isInteger(e),()=>`If provided, numClasses must be a positive integer, but got ${e}`),E(o.rank===1,()=>`Expected the rank of labels to be 1, but got ${o.rank}`),E(n.rank===1,()=>`Expected the rank of predictions to be 1, but got ${n.rank}`),E(o.shape[0]===n.shape[0],()=>`Mismatch in the number of examples: ${o.shape[0]} vs. ${n.shape[0]}. Labels and predictions should have the same number of elements.`),E(e>0&&Number.isInteger(e),()=>`numClasses is required to be a positive integer, but got ${e}`);let s=hn(q(o,"int32"),e),i=hn(q(n,"int32"),e),a=St(s),l=kt(a,i);return q(l,"int32")}var xP=S({confusionMatrix_:gP});var qr={};qt(qr,{assertAndGetBroadcastShape:()=>It,getBroadcastDims:()=>AN,getReductionAxes:()=>jt});function AN(r,t){let e=r.length,o=[];for(let n=0;n<e;n++){let s=e-1-n,i=r[s]||1;(t[t.length-1-n]||1)>1&&i===1&&o.unshift(s)}return o}function jt(r,t){let e=[];for(let o=0;o<t.length;o++){let n=r[r.length-o-1],s=t.length-o-1,i=t[s];(n==null||n===1&&i>1)&&e.unshift(s)}return e}function It(r,t){let e=[],o=Math.max(r.length,t.length);for(let n=0;n<o;n++){let s=r[r.length-n-1];s==null&&(s=1);let i=t[t.length-n-1];if(i==null&&(i=1),s===1)e.unshift(i);else if(i===1)e.unshift(s);else if(s!==i){let a=`Operands could not be broadcast together with shapes ${r} and ${t}.`;throw Error(a)}else e.unshift(s)}return e}var wc={};qt(wc,{fromPixels:()=>IP,fromPixelsAsync:()=>NP,toPixels:()=>SP});function Ah(r,t,e){if(oo(r),t!=null&&t.length!==3)throw new Error("tensor3d() requires shape to have three numbers");let o=Cr(r,e);if(o.length!==3&&o.length!==1)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return vr(r,t,o,e)}var dl;function DN(r,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(r==null)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let e=!1,o=!1,n=!1,s=!1,i=!1,a=!1;if(r.data instanceof Uint8Array)e=!0;else if(typeof ImageData!="undefined"&&r instanceof ImageData)o=!0;else if(typeof HTMLVideoElement!="undefined"&&r instanceof HTMLVideoElement)n=!0;else if(typeof HTMLImageElement!="undefined"&&r instanceof HTMLImageElement)s=!0;else if(r.getContext!=null)i=!0;else if(typeof ImageBitmap!="undefined"&&r instanceof ImageBitmap)a=!0;else throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${r.constructor.name}`);if(n&&n&&r.readyState<2)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.");if(Jp(Zp,k.backendName)!=null){let h={pixels:r},d={numChannels:t};return k.runKernel(Zp,h,d)}let[u,c]=n?[r.videoWidth,r.videoHeight]:[r.width,r.height],p;if(i)p=r.getContext("2d").getImageData(0,0,u,c).data;else if(o||e)p=r.data;else if(s||n||a){if(dl==null)if(typeof document=="undefined")if(typeof OffscreenCanvas!="undefined"&&typeof OffscreenCanvasRenderingContext2D!="undefined")dl=new OffscreenCanvas(1,1).getContext("2d");else throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");else dl=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});dl.canvas.width=u,dl.canvas.height=c,dl.drawImage(r,0,0,u,c),p=dl.getImageData(0,0,u,c).data}let m;if(t===4)m=new Int32Array(p);else{let h=u*c;m=new Int32Array(h*t);for(let d=0;d<h;d++)for(let g=0;g<t;++g)m[d*t+g]=p[d*4+g]}return Ah(m,[c,u,t],"int32")}function bP(r){return r!=null&&r.data instanceof Uint8Array}function wP(){return typeof window!="undefined"&&typeof ImageBitmap!="undefined"&&window.hasOwnProperty("createImageBitmap")}function CP(r){return r!=null&&r.width!==0&&r.height!==0}function vP(r){return wP()&&!(r instanceof ImageBitmap)&&CP(r)&&!bP(r)}async function NP(r,t=3){let e=null;if(M().getBool("WRAP_TO_IMAGEBITMAP")&&vP(r)){let o;try{o=await createImageBitmap(r,{premultiplyAlpha:"none"})}catch(n){o=null}o!=null&&o.width===r.width&&o.height===r.height?e=o:e=r}else e=r;return DN(e,t)}async function SP(r,t){let e=N(r,"img","toPixels");if(!(r instanceof Dt)){let u=e;e=q(u,"int32"),u.dispose()}if(e.rank!==2&&e.rank!==3)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);let[o,n]=e.shape.slice(0,2),s=e.rank===2?1:e.shape[2];if(s>4||s===2)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${s}`);if(e.dtype!=="float32"&&e.dtype!=="int32")throw new Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`);let i=await e.data(),a=e.dtype==="float32"?255:1,l=new Uint8ClampedArray(n*o*4);for(let u=0;u<o*n;++u){let c=[0,0,0,255];for(let m=0;m<s;m++){let f=i[u*s+m];if(e.dtype==="float32"){if(f<0||f>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${f}.`)}else if(e.dtype==="int32"&&(f<0||f>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${f}.`);s===1?(c[0]=f*a,c[1]=f*a,c[2]=f*a):c[m]=f*a}let p=u*4;l[p+0]=Math.round(c[0]),l[p+1]=Math.round(c[1]),l[p+2]=Math.round(c[2]),l[p+3]=Math.round(c[3])}if(t!=null){t.width=n,t.height=o;let u=t.getContext("2d"),c=new ImageData(l,n,o);u.putImageData(c,0,0)}return e!==r&&e.dispose(),l}var IP=S({fromPixels_:DN});function TP(r,t){let e=r.shape.length,o=t.shape.length;if(e<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`);if(o<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${o}.`);if(t.dtype!=="int32")throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[o-1]>e)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[o-1]} vs. ${e}`);if(Ot(r.shape)===0)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${r.shape}.`);let n=t.shape,s=n[n.length-1],i=1;for(let p=0;p<n.length-1;++p)i*=n[p];let a=r.shape,l=n.slice();l.pop();let u=1;for(let p=s;p<e;++p)u*=a[p],l.push(a[p]);let c=[...nn(r.shape).map(p=>p/u),1].slice(0,s);return[l,i,u,c]}function FN(r,t,e){let o=t.rank>1?t.shape[t.rank-1]:1,n=t.rank>1?t.rank-1:1,s=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${r}, sliceDim: ${o}, and batchDim: ${n}.`;if(e.rank<n)throw new Error(s+` update.rank < ${n}. `);if(r.length<o+(e.rank-n))throw new Error(s+` Output shape length < ${o+(e.rank-n)}`);if(e.rank!==n+r.length-o)throw new Error(s+` update.rank != ${n+r.length-o}`);for(let i=0;i<n;++i)if(e.shape[i]!==t.shape[i])throw new Error(s+` updates.shape[${i}] (${e.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);for(let i=0;i<e.rank-n;++i)if(e.shape[i+n]!==r[i+o])throw new Error(s+` updates.shape[${i+n}] (${e.shape[i+n]}) != shape[${i+n}] (${r[i+n]})`)}function dw(r,t,e){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(r.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${r.rank}.`);if(t.dtype!=="int32")throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(e.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${e}`);if(e.length===0){if(t.size===0)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(r.size===0)throw new Error(`Updates specified for empty output. updates shape: ${r.shape}`)}FN(e,t,r)}function EP(r,t,e){let o=t.shape.length,n=o>1?t.shape[o-1]:1,s=e.length,i=1;for(let p=n;p<s;++p)i*=e[p];let a=n<1?1:n,l=Ot(t.shape)/a,u=[...nn(e.slice(0,n)),1],c=Ot(e);return{sliceRank:n,numUpdates:l,sliceSize:i,strides:u,outputSize:c}}var qe={};qt(qe,{assertParamsValid:()=>AP,computeFlatOffset:()=>OP,computeOutShape:()=>FP,getNormalizedAxes:()=>RP,isSliceContinous:()=>_P,maskToAxes:()=>DP,parseSliceParams:()=>xw,sliceInfo:()=>LP,startForAxis:()=>VN,startIndicesWithElidedDims:()=>zN,stopForAxis:()=>GN,stopIndicesWithElidedDims:()=>MN,stridesForAxis:()=>BN,stridesWithElidedDims:()=>ON});var gw=-2,$P=-1;function AP(r,t,e){let o=r.shape.length;E(o===t.length,()=>`Error in slice${o}D: Length of begin ${t} must match the rank of the array (${o}).`),E(o===e.length,()=>`Error in slice${o}D: Length of size ${e} must match the rank of the array (${o}).`);for(let n=0;n<o;++n)E(t[n]+e[n]<=r.shape[n],()=>`Error in slice${o}D: begin[${n}] + size[${n}] (${t[n]+e[n]}) would overflow input.shape[${n}] (${r.shape[n]})`)}function DP(r){let t=[],e=0;for(;r>0;)r&1&&t.push(e),r/=2,e++;return t}function FP(r,t,e){let o=[];for(let n=0;n<r.length;n++)o[n]=Math.ceil((t[n]-r[n])/e[n]);return o}function ON(r,t,e,o){let n=[...r];for(let s=n.length;s<o.length;s++)n.push(1);for(let s=0;s<e;s++)s===0?n[t]=1:(n.splice(t,0,1),n.pop());return n}function LN(r,t,e){return e<=r?e:e-(t-1)}function PN(r,t){let e=[];for(let o=0;o<r;o++)e.push(t+o);return e}function RP(r,t,e,o,n,s,i,a,l){let u=r.length,c=new Array(u),p=new Array(u),m=new Array(u);if(t.length&&e>0){let f=t[0],h=e+1;c=zN(i,f,h,o,r),p=MN(a,f,h,n,r),m=ON(s,f,h,r)}else for(let f=0;f<u;f++)c[f]=VN(i,o,s,r,f,l),p[f]=GN(a,n,s,r,f,l),m[f]=BN(s,f,l);return{begin:c,end:p,strides:m}}function zN(r,t,e,o,n){let s=[...n],i=PN(e,t);for(let a=0;a<s.length;a++)if(i.indexOf(a)>-1)s[a]=0;else{let l=LN(t,e,a),u=o[l];r&1<<l&&(u=0),s[a]=u}return s}function MN(r,t,e,o,n){let s=[...n],i=PN(e,t);for(let a=0;a<s.length;a++)if(i.indexOf(a)>-1)s[a]=Number.MAX_SAFE_INTEGER;else{let l=LN(t,e,a),u=o[l];r&1<<l&&(u=Number.MAX_SAFE_INTEGER),s[a]=u}for(let a=0;a<s.length;a++){let l=n[a];s[a]<0&&(s[a]+=l),s[a]=iu(0,s[a],n[a])}return s}function BN(r,t,e){let o=r[t];return(e&1<<t||o==null)&&(o=1),o}function VN(r,t,e,o,n,s){let i=t[n],a=e[n]||1;(r&1<<n||s&1<<n||i==null)&&(a>0?i=Number.MIN_SAFE_INTEGER:i=Number.MAX_SAFE_INTEGER);let l=o[n];return i<0&&(i+=l),i=iu(0,i,l-1),i}function GN(r,t,e,o,n,s){let i=t[n],a=e[n]||1;(r&1<<n||s&1<<n||i==null)&&(a>0?i=Number.MAX_SAFE_INTEGER:i=Number.MIN_SAFE_INTEGER);let l=o[n];return i<0&&(i+=l),a>0?i=iu(0,i,l):i=iu(-1,i,l-1),i}function _P(r,t,e){let o=e.length;for(let n=0;n<e.length;n++)if(e[n]>1){o=n;break}for(let n=o+1;n<e.length;n++)if(t[n]>0||e[n]!==r[n])return!1;return!0}function OP(r,t){let e=r.length>0?r[r.length-1]:1;for(let o=0;o<r.length-1;o++)e+=r[o]*t[o];return e}function xw(r,t,e){let o,n=r.shape.length;typeof t=="number"?o=[t,...new Array(n-1).fill(0)]:t.length<n?o=t.concat(new Array(n-t.length).fill(0)):o=t.slice(),o.forEach(i=>{E(i!==-1,()=>"slice() does not support negative begin indexing.")});let s;return e==null?s=new Array(n).fill(-1):typeof e=="number"?s=[e,...new Array(n-1).fill(-1)]:e.length<n?s=e.concat(new Array(n-e.length).fill(-1)):s=e,s=s.map((i,a)=>i>=0?i:(E(i===-1,()=>`Negative size values should be exactly -1 but got ${i} for the slice() size at index ${a}.`),r.shape[a]-o[a])),[o,s]}function LP(r,t,e,o,n,s,i,a,l){let u;if(o==null?(u=new Array(t.length),u.fill(1)):u=o,i!=null&&(i&i-1)!==0)throw new Error("Multiple ellipses in slice is not allowed.");let c=!1,p={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:e.slice(),strides:u.slice(),beginMask:n,endMask:s,ellipsisMask:i,newAxisMask:a,shrinkAxisMask:l};for(let w=0;w<p.dims;w++)c&&(1<<w&a)!==0&&p.numAddAxisAfterEllipsis++,1<<w&i&&(c=!0);c||(p.ellipsisMask|=1<<p.dims,p.dims++);let m={dims:r.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};PP(p,m);let f=!0,h=!0,d=!0,g=[],y=[];for(let w=0;w<r.length;++w){if(m.strides[w]===0)throw Error(`strides[${w}] must be non-zero`);let C=!!(m.shrinkAxisMask&1<<w),I=r[w];if(I===-1){g.push(C?1:-1);continue}let $=[m.beginMask&1<<w,m.endMask&1<<w],A=[m.strides[w]>0?0:-1,m.strides[w]>0?I:I-1];if(C&&m.strides[w]<=0)throw Error("only stride 1 allowed on non-range indexing.");d=d&&m.strides[w]===1;let _=!!(m.beginMask&1<<w&&m.endMask&1<<w);if(m.beginValid&&m.endValid){if(C){let V=m.begin[w]<0?I+m.begin[w]:m.begin[w];if(m.begin[w]=V,m.end[w]=m.begin[w]+1,V<0||V>=I)throw Error(`slice index ${m.begin[w]} of dimension ${w} out of bounds.`)}else m.begin[w]=_N(m.begin[w],0,m.strides[w],I,$,A),m.end[w]=_N(m.end[w],1,m.strides[w],I,$,A);let B=m.strides[w]===1&&m.begin[w]===0&&m.end[w]===I;f=f&&B,h=h&&(w===0&&m.strides[w]===1||B)}else f=f&&m.strides[w]===1&&_,h=h&&(w===0&&m.strides[w]===1||_);let O,P=!1;if(m.beginValid&&m.endValid?(O=m.end[w]-m.begin[w],P=!0):C?(O=1,P=!0):_&&I>=0&&(m.strides[w]<0?O=-I:O=I,P=!0),P){let B;O===0||O<0!=m.strides[w]<0?B=0:B=Math.trunc(O/m.strides[w])+(O%m.strides[w]!==0?1:0),g.push(B)}else g.push(-1)}for(let w=0;w<m.finalShapeGatherIndices.length;++w){let C=m.finalShapeGatherIndices[w];C>=0?y.push(g[C]):C===gw&&y.push(1)}return{finalShapeSparse:y.filter((w,C)=>m.finalShapeGatherIndices[C]!==gw),finalShape:y,isIdentity:f,sliceDim0:h,isSimpleSlice:d,begin:m.begin,end:m.end,strides:m.strides}}function PP(r,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let e=0;t.beginValid=r.begin!=null,t.endValid=r.end!=null,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let o=0;o<r.dims;o++)if(1<<o&r.ellipsisMask){let n=Math.min(t.dims-(r.dims-o)+1+r.numAddAxisAfterEllipsis,t.dims);for(;e<n;e++)t.begin[e]=0,t.end[e]=0,t.strides[e]=1,t.beginMask|=1<<e,t.endMask|=1<<e,t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[e]=o}else if(1<<o&r.newAxisMask)t.finalShapeGatherIndices.push(gw),t.finalShapeGatherIndicesSparse.push(-1);else{if(e===t.begin.length)throw Error(`Index out of range using input dim ${e}; input has only ${t.dims} dims, ${t.begin.length}.`);r.begin!=null&&(t.begin[e]=r.begin[o]),r.end!=null&&(t.end[e]=r.end[o]),t.strides[e]=r.strides[o],r.beginMask&1<<o&&(t.beginMask|=1<<e),r.endMask&1<<o&&(t.endMask|=1<<e),r.shrinkAxisMask&1<<o?(t.finalShapeGatherIndices.push($P),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<e):(t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(o)),t.inputShapeGatherIndicesSparse[e]=o,e++}}function _N(r,t,e,o,n,s){if(n[t])return e>0?s[t]:s[t+1&1];{let i=r<0?o+r:r;return i<s[0]?s[0]:i>s[1]?s[1]:i}}var j={};qt(j,{Serializable:()=>am,SerializationMap:()=>gn,registerClass:()=>Pr});var am=class{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}},gn=class{constructor(){this.classNameMap={}}static getMap(){return gn.instance==null&&(gn.instance=new gn),gn.instance}static register(t){gn.getMap().classNameMap[t.className]=[t,t.fromConfig]}};function Pr(r){E(r.className!=null,()=>"Class being registered does not have the static className property defined."),E(typeof r.className=="string",()=>"className is required to be a string, but got type "+typeof r.className),E(r.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),gn.register(r)}var Dh="3.19.0";function MP(r,t){let e=N(r,"a","add"),o=N(t,"b","add");[e,o]=Ft(e,o);let n={a:e,b:o};return k.runKernel(Bo,n)}var U=S({add_:MP});function BP(r,t){let e=N(r,"a","floorDiv"),o=N(t,"b","floorDiv");[e,o]=Ft(e,o);let n={a:e,b:o};return k.runKernel(os,n)}var Cc=S({floorDiv_:BP});function VP(r,t){let e=N(r,"a","div"),o=N(t,"b","div");if([e,o]=Ft(e,o),e.dtype==="int32"&&o.dtype==="int32")return Cc(e,o);let n={a:e,b:o},s={};return k.runKernel(Zn,n,s)}var et=S({div_:VP});function GP(r,t){let e=N(r,"a","mul"),o=N(t,"b","mul");[e,o]=Ft(e,o);let n={a:e,b:o};return k.runKernel(fs,n)}var D=S({mul_:GP});function WP(r){let t=N(r,"x","abs");if(t.dtype==="complex64"){let e={x:t};return k.runKernel(fi,e)}else{let e={x:t};return k.runKernel(si,e)}}var se=S({abs_:WP});function UP(r){let e={x:N(r,"x","acos")};return k.runKernel(Bn,e)}var Fh=S({acos_:UP});function HP(r){let e={x:N(r,"x","acosh")};return k.runKernel(Vn,e)}var Rh=S({acosh_:HP});function qP(r){E(Array.isArray(r),()=>"The argument passed to tf.addN() must be a list of tensors"),E(r.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${r.length}`);let t=r.map((n,s)=>N(n,`tensors${s}`,"addN")),e=t[0];t.forEach(n=>{if(n.dtype!==e.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(n=>{if(!no(n.shape,e.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});let o=t;return k.runKernel(ii,o)}var WN=S({addN_:qP});function KP(r,t=null,e=!1){let n={x:N(r,"x","all","bool")},s={axis:t,keepDims:e};return k.runKernel(pu,n,s)}var vc=S({all_:KP});function jP(r,t=null,e=!1){let n={x:N(r,"x","any","bool")},s={axis:t,keepDims:e};return k.runKernel(mu,n,s)}var gl=S({any_:jP});function XP(r,t=0){let o={x:N(r,"x","argMax")},n={axis:t};return k.runKernel(ai,o,n)}var xn=S({argMax_:XP});function YP(r,t=0){let o={x:N(r,"x","argMin")},n={axis:t};return k.runKernel(li,o,n)}var _h=S({argMin_:YP});function ZP(r){let e={x:N(r,"x","asin")};return k.runKernel(Gn,e)}var Oh=S({asin_:ZP});function JP(r){let e={x:N(r,"x","asinh")};return k.runKernel(Wn,e)}var Lh=S({asinh_:JP});function QP(r){let e={x:N(r,"x","atan")};return k.runKernel(Un,e)}var Ph=S({atan_:QP});function tz(r,t){let e=N(r,"a","atan2"),o=N(t,"b","atan2");[e,o]=Ft(e,o);let n={a:e,b:o};return k.runKernel(qn,n)}var zh=S({atan2_:tz});function ez(r){let e={x:N(r,"x","atanh")};return k.runKernel(Hn,e)}var Mh=S({atanh_:ez});function rz(r,t,e,o,n="NHWC",s){let i=r[3],a=[...t,i],l=HN(n);return yl(r,a,e,s,o,null,null,l)}function bw(r,t,e,o,n,s,i="channelsLast"){let[a,l]=Bh(t),u;if(i==="channelsLast")u=[a,l,r[3],r[3]];else if(i==="channelsFirst")u=[a,l,r[1],r[1]];else throw new Error(`Unknown dataFormat ${i}`);return yl(r,u,e,o,n,s,!1,i)}function oz(r,t,e,o,n,s,i="NDHWC"){let[a,l,u]=yw(t),c,p;if(i==="NDHWC")p="channelsLast",c=[a,l,u,r[4],r[4]];else if(i==="NCDHW")p="channelsFirst",c=[a,l,u,r[1],r[1]];else throw new Error(`Unknown dataFormat ${i}`);return UN(r,c,e,o,n,!1,p,s)}function yl(r,t,e,o,n,s,i=!1,a="channelsLast"){let[l,u,c,p]=[-1,-1,-1,-1];if(a==="channelsLast")[l,u,c,p]=r;else if(a==="channelsFirst")[l,p,u,c]=r;else throw new Error(`Unknown dataFormat ${a}`);let[m,f,,h]=t,[d,g]=Bh(e),[y,b]=Bh(o),w=Nc(m,y),C=Nc(f,b),{padInfo:I,outHeight:$,outWidth:A}=iz(n,u,c,d,g,w,C,s,a),_=i?h*p:h,O;return a==="channelsFirst"?O=[l,_,$,A]:a==="channelsLast"&&(O=[l,$,A,_]),{batchSize:l,dataFormat:a,inHeight:u,inWidth:c,inChannels:p,outHeight:$,outWidth:A,outChannels:_,padInfo:I,strideHeight:d,strideWidth:g,filterHeight:m,filterWidth:f,effectiveFilterHeight:w,effectiveFilterWidth:C,dilationHeight:y,dilationWidth:b,inShape:r,outShape:O,filterShape:t}}function UN(r,t,e,o,n,s=!1,i="channelsLast",a){let[l,u,c,p,m]=[-1,-1,-1,-1,-1];if(i==="channelsLast")[l,u,c,p,m]=r;else if(i==="channelsFirst")[l,m,u,c,p]=r;else throw new Error(`Unknown dataFormat ${i}`);let[f,h,d,,g]=t,[y,b,w]=yw(e),[C,I,$]=yw(o),A=Nc(f,C),_=Nc(h,I),O=Nc(d,$),{padInfo:P,outDepth:B,outHeight:V,outWidth:G}=az(n,u,c,p,y,b,w,A,_,O,a),H=s?g*m:g,W;return i==="channelsFirst"?W=[l,H,B,V,G]:i==="channelsLast"&&(W=[l,B,V,G,H]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:p,inChannels:m,outDepth:B,outHeight:V,outWidth:G,outChannels:H,padInfo:P,strideDepth:y,strideHeight:b,strideWidth:w,filterDepth:f,filterHeight:h,filterWidth:d,effectiveFilterDepth:A,effectiveFilterHeight:_,effectiveFilterWidth:O,dilationDepth:C,dilationHeight:I,dilationWidth:$,inShape:r,outShape:W,filterShape:t}}function nz(r,t,e,o,n){o==null&&(o=ww(r,t,e));let s=r[0],i=r[1],a=xl((s-t+2*o)/e+1,n),l=xl((i-t+2*o)/e+1,n);return[a,l]}function sz(r,t,e,o,n,s){n==null&&(n=ww(r,t,o));let i=r[0],a=r[1],l=r[2],u=xl((i-t+2*n)/o+1,s),c=xl((a-t+2*n)/o+1,s),p=xl((l-t+2*n)/o+1,s);return[u,c,p,e]}function ww(r,t,e,o=1){let n=Nc(t,o);return Math.floor((r[0]*(e-1)-e+n)/2)}function Bh(r){return typeof r=="number"?[r,r,r]:r.length===2?[r[0],r[1],1]:r}function yw(r){return typeof r=="number"?[r,r,r]:r}function Nc(r,t){return t<=1?r:r+(r-1)*(t-1)}function iz(r,t,e,o,n,s,i,a,l){let u,c,p;if(typeof r=="number"){u={top:r,bottom:r,left:r,right:r,type:r===0?"VALID":"NUMBER"};let f=nz([t,e],s,o,r,a);c=f[0],p=f[1]}else if(r==="same"){c=Math.ceil(t/o),p=Math.ceil(e/n);let m=Math.max(0,(c-1)*o+s-t),f=Math.max(0,(p-1)*n+i-e),h=Math.floor(m/2),d=m-h,g=Math.floor(f/2),y=f-g;u={top:h,bottom:d,left:g,right:y,type:"SAME"}}else if(r==="valid")u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-s+1)/o),p=Math.ceil((e-i+1)/n);else if(typeof r=="object"){let m=l==="channelsLast"?r[1][0]:r[2][0],f=l==="channelsLast"?r[1][1]:r[2][1],h=l==="channelsLast"?r[2][0]:r[3][0],d=l==="channelsLast"?r[2][1]:r[3][1];u={top:m,bottom:f,left:h,right:d,type:m===0&&f===0&&h===0&&d===0?"VALID":"EXPLICIT"},c=xl((t-s+m+f)/o+1,a),p=xl((e-i+h+d)/n+1,a)}else throw Error(`Unknown padding parameter: ${r}`);return{padInfo:u,outHeight:c,outWidth:p}}function az(r,t,e,o,n,s,i,a,l,u,c){let p,m,f,h;if(typeof r=="number"){p={top:r,bottom:r,left:r,right:r,front:r,back:r,type:r===0?"VALID":"NUMBER"};let g=sz([t,e,o,1],a,1,n,r,c);m=g[0],f=g[1],h=g[2]}else if(r==="same"){m=Math.ceil(t/n),f=Math.ceil(e/s),h=Math.ceil(o/i);let d=(m-1)*n+a-t,g=(f-1)*s+l-e,y=(h-1)*i+u-o,b=Math.floor(d/2),w=d-b,C=Math.floor(g/2),I=g-C,$=Math.floor(y/2),A=y-$;p={top:C,bottom:I,left:$,right:A,front:b,back:w,type:"SAME"}}else if(r==="valid")p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},m=Math.ceil((t-a+1)/n),f=Math.ceil((e-l+1)/s),h=Math.ceil((o-u+1)/i);else throw Error(`Unknown padding parameter: ${r}`);return{padInfo:p,outDepth:m,outHeight:f,outWidth:h}}function xl(r,t){if(!t)return Math.trunc(r);switch(t){case"round":return Math.round(r);case"ceil":return Math.ceil(r);case"floor":return Math.floor(r);default:throw new Error(`Unknown roundingMode ${t}`)}}function so(r){let[t,e,o]=Bh(r);return t===1&&e===1&&o===1}function Qe(r,t){return so(r)||so(t)}function HN(r){if(r==="NHWC")return"channelsLast";if(r==="NCHW")return"channelsFirst";throw new Error(`Unknown dataFormat ${r}`)}function Qt(r,t,e){if(e!=null){if(typeof t=="string")throw Error(`Error in ${r}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);if(typeof t=="number")E(Mn(t),()=>`Error in ${r}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);else if(typeof t=="object")t.forEach(o=>{o.forEach(n=>{E(Mn(n),()=>`Error in ${r}: pad must be an integer when using dimRoundingMode ${e} but got pad ${n}.`)})});else throw Error(`Error in ${r}: Unknown padding parameter: ${t}`)}}function lz(r,t){let o={x:N(r,"x","reshape","string_or_numeric")},n={shape:t};return k.runKernel(Mi,o,n)}var F=S({reshape_:lz});function uz(r,t,e,o,n){let s=N(r,"x","avgPool","float32"),i=1;E(Qe(e,i),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`);let a=s,l=!1;s.rank===3&&(l=!0,a=F(s,[1,s.shape[0],s.shape[1],s.shape[2]])),E(a.rank===4,()=>`Error in avgPool: x must be rank 4 but got rank ${a.rank}.`),Qt("avgPool",o,n);let u={x:a},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n},p=k.runKernel(ui,u,c);return p=q(p,s.dtype),l?F(p,[p.shape[1],p.shape[2],p.shape[3]]):p}var sa=S({avgPool_:uz});function cz(r,t,e,o,n,s="NDHWC"){let i=N(r,"x","avgPool3d","float32"),a=i,l=!1;i.rank===4&&(l=!0,a=F(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),E(a.rank===5,()=>`Error in avgPool3d: x must be rank 5 but got rank ${a.rank}.`),E(s==="NDHWC",()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),Qt("avgPool3d",o,n);let u={x:a},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n,dataFormat:s},p=k.runKernel(ci,u,c);return p=q(p,a.dtype),l?F(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}var Vh=S({avgPool3d_:cz});function pz(r,t=0){E(r.length>=1,()=>"Pass at least one tensor to concat");let e=ea(r,"tensors","concat","string_or_numeric");if(e[0].dtype==="complex64"&&e.forEach(s=>{if(s.dtype!=="complex64")throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${s.dtype}. `)}),e.length===1)return Nr(e[0]);let o=e,n={axis:t};return k.runKernel(hi,o,n)}var Bt=S({concat_:pz});function mz(r){let e={x:N(r,"x","sigmoid","float32")};return k.runKernel(Ss,e)}var fr=S({sigmoid_:mz});function fz(r,t,e){let o=N(r,"x","slice","string_or_numeric");if(o.rank===0)throw new Error("Slicing scalar is not possible");let n={x:o},s={begin:t,size:e};return k.runKernel(Ui,n,s)}var Ct=S({slice_:fz});function hz(r){let e={x:N(r,"x","tanh","float32")};return k.runKernel(As,e)}var yn=S({tanh_:hz});function dz(r,t,e,o,n,s){let i=N(r,"forgetBias","basicLSTMCell"),a=N(t,"lstmKernel","basicLSTMCell"),l=N(e,"lstmBias","basicLSTMCell"),u=N(o,"data","basicLSTMCell"),c=N(n,"c","basicLSTMCell"),p=N(s,"h","basicLSTMCell"),m=Bt([u,p],1),f=kt(m,a),h=U(f,l),d=h.shape[0],g=h.shape[1]/4,y=[d,g],b=Ct(h,[0,0],y),w=Ct(h,[0,g],y),C=Ct(h,[0,g*2],y),I=Ct(h,[0,g*3],y),$=U(D(fr(b),yn(w)),D(c,fr(U(i,C)))),A=D(yn($),fr(I));return[$,A]}var qN=S({basicLSTMCell_:dz});function gz(r,t,e){let o=N(r,"x","batchToSpaceND"),n=t.reduce((a,l)=>a*l);E(o.rank>=1+t.length,()=>`input rank is ${o.rank} but should be > than blockShape.length ${t.length}`),E(e.length===t.length,()=>`crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`),E(o.shape[0]%n===0,()=>`input tensor batch is ${o.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${n}`);let s={x:o},i={blockShape:t,crops:e};return k.runKernel(mi,s,i)}var ia=S({batchToSpaceND_:gz});function KN(r){let t;return r.rank===0||r.rank===1?t=F(r,[1,1,1,r.size]):r.rank===2?t=F(r,[1,1,r.shape[0],r.shape[1]]):r.rank===3?t=F(r,[1,r.shape[0],r.shape[1],r.shape[2]]):t=r,t}function xz(r,t,e,o,n,s){s==null&&(s=.001);let i=N(r,"x","batchNorm"),a=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm"),u;n!=null&&(u=N(n,"scale","batchNorm"));let c;o!=null&&(c=N(o,"offset","batchNorm")),E(a.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),E(c==null||a.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),E(u==null||a.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let m={x:KN(i),scale:u,offset:c,mean:a,variance:l},f={varianceEpsilon:s},h=k.runKernel(vi,m,f);return F(h,i.shape)}var bn=S({batchNorm_:xz});function yz(r,t,e,o,n,s){let i=N(r,"x","batchNorm"),a=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm"),u;n!=null&&(u=N(n,"scale","batchNorm"));let c;return o!=null&&(c=N(o,"offset","batchNorm")),E(i.rank===2,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`),E(a.rank===2||a.rank===1,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${a.rank}.`),E(l.rank===2||l.rank===1,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),u!=null&&E(u.rank===2||u.rank===1,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),c!=null&&E(c.rank===2||c.rank===1,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),bn(i,a,l,c,u,s)}var Gh=S({batchNorm2d_:yz});function bz(r,t,e,o,n,s){let i=N(r,"x","batchNorm"),a=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm"),u;n!=null&&(u=N(n,"scale","batchNorm"));let c;return o!=null&&(c=N(o,"offset","batchNorm")),E(i.rank===3,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`),E(a.rank===3||a.rank===1,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${a.rank}.`),E(l.rank===3||l.rank===1,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),u!=null&&E(u.rank===3||u.rank===1,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),c!=null&&E(c.rank===3||c.rank===1,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),bn(i,a,l,c,u,s)}var Wh=S({batchNorm3d_:bz});function wz(r,t,e,o,n,s){let i=N(r,"x","batchNorm"),a=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm"),u;n!=null&&(u=N(n,"scale","batchNorm"));let c;return o!=null&&(c=N(o,"offset","batchNorm")),E(i.rank===4,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`),E(a.rank===4||a.rank===1,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${a.rank}.`),E(l.rank===4||l.rank===1,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),u!=null&&E(u.rank===4||u.rank===1,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),c!=null&&E(c.rank===4||c.rank===1,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),bn(i,a,l,c,u,s)}var Uh=S({batchNorm4d_:wz});function Cz(r,t,e){let o=N(r,"x","bincount"),n=N(t,"weights","bincount");E(o.dtype==="int32",()=>`Error in bincount: input dtype must be int32, but got ${o.dtype}`),E(e>=0,()=>`size must be non-negative, but got ${e}.`),E(n.size===o.size||n.size===0,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${o.shape}, weights shape: ${n.shape}.`);let s={x:o,weights:n},i={size:e};return k.runKernel(du,s,i)}var Hh=S({bincount_:Cz});function vz(r,t){let e=N(r,"s0","broadcastArgs","int32"),o=N(t,"s1","broadcastArgs","int32");if(e.rank!==1)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${e.rank}`);if(o.rank!==1)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${o.rank}`);let n={s0:e,s1:o};return k.runKernel(gu,n)}var jN=S({broadcastArgs_:vz});function Nz(r,t){let e=N(r,"broadcastTo","x"),o=e.shape;if(t.some(u=>!(u>0)||u%1!==0))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<e.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`);if(t.length>e.rank){let u=e.shape.slice();for(;u.length<t.length;)u.unshift(1);e=F(e,u)}let n=e.shape,s=Array.from(t);for(let u=t.length-1;u>=0;u--)if(n[u]===t[u])s[u]=1;else if(e.shape[u]!==1)throw new Error(`broadcastTo(): [${o}] cannot be broadcast to [${t}].`);if(s.map((u,c)=>u>1?c:-1).filter(u=>u>=0).length===0)return Nr(e);let a={x:e},l={reps:s};return k.runKernel(ln,a,l)}var aa=S({broadcastTo_:Nz});function Sz(r){let e={x:N(r,"x","ceil","float32")};return k.runKernel(Kn,e)}var qh=S({ceil_:Sz});function Iz(r,t,e){let o=N(r,"x","clipByValue");E(t<=e,()=>`Error in clip: min (${t}) must be less than or equal to max (${e}).`);let n={x:o},s={clipValueMin:t,clipValueMax:e};return k.runKernel(jn,n,s)}var Pe=S({clipByValue_:Iz});function Tz(r){return Bt(r,0)}var Kh=S({concat1d_:Tz});function kz(r,t){return Bt(r,t)}var jh=S({concat2d_:kz});function Ez(r,t){return Bt(r,t)}var Xh=S({concat3d_:Ez});function $z(r,t){return Bt(r,t)}var Yh=S({concat4d_:$z});function Az(r,t,e,o,n="NHWC",s=[1,1],i){let a=N(r,"x","conv2d","float32"),l=N(t,"filter","conv2d","float32"),u=a,c=!1;a.rank===3&&(c=!0,u=F(a,[1,a.shape[0],a.shape[1],a.shape[2]])),E(u.rank===4,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),E(l.rank===4,()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`),Qt("conv2d",o,i);let p=n==="NHWC"?u.shape[3]:u.shape[1];E(p===l.shape[2],()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${l.shape[2]}.`),E(Qe(e,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`);let m={x:u,filter:l},f={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i},h=k.runKernel(di,m,f);return c?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}var zr=S({conv2d_:Az});function Dz(r,t,e,o,n="NWC",s=1,i){let a=N(r,"x","conv1d"),l=N(t,"filter","conv1d"),u=a,c=!1;a.rank===2&&(c=!0,u=F(a,[1,a.shape[0],a.shape[1]])),E(u.rank===3,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),E(l.rank===3,()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`),Qt("conv1d",o,i),E(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),E(Qe(e,s),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${s}'`),E(n==="NWC",()=>`Error in conv1d: got dataFormat of ${n} but only NWC is currently supported.`);let p=F(l,[1,l.shape[0],l.shape[1],l.shape[2]]),m=F(u,[u.shape[0],1,u.shape[1],u.shape[2]]),g=zr(m,p,[1,e],o,"NHWC",[1,s],i);return c?F(g,[g.shape[2],g.shape[3]]):F(g,[g.shape[0],g.shape[2],g.shape[3]])}var Sc=S({conv1d_:Dz});function Fz(r,t,e,o,n,s="NHWC",i){E(r.length===t.rank,()=>`Length of inShape (${r.length}) and rank of dy (${t.rank}) must match`);let a=r,l=t,u=!1;t.rank===3&&(u=!0,l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]]),a=[1,r[0],r[1],r[2]]),E(a.length===4,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${a.length}.`),E(l.rank===4,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`),E(e.rank===4,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`);let c=s==="NHWC"?a[3]:a[1],p=s==="NHWC"?l.shape[3]:l.shape[1];E(c===e.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${e.shape[2]}.`),E(p===e.shape[3],()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${e.shape[3]}.`),Qt("conv2dDerInput",n,i);let m={dy:l,filter:e},f={strides:o,pad:n,dataFormat:s,dimRoundingMode:i,inputShape:a},h=k.runKernel(gi,m,f);return u?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}var Ic=S({conv2DBackpropInput_:Fz});function Rz(r,t,e,o,n,s){let i=N(r,"x","conv2dTranspose"),a=N(t,"filter","conv2dTranspose");return Ic(e,i,a,o,n,"NHWC",s)}var Tc=S({conv2dTranspose_:Rz});function _z(r,t,e,o,n="NDHWC",s=[1,1,1]){let i=N(r,"x","conv3d"),a=N(t,"filter","conv3d"),l=i,u=!1;i.rank===4&&(u=!0,l=F(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),E(l.rank===5,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),E(a.rank===5,()=>`Error in conv3d: filter must be rank 5, but got rank ${a.rank}.`),E(l.shape[4]===a.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${a.shape[3]}.`),E(Qe(e,s),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`),E(n==="NDHWC",()=>`Error in conv3d: got dataFormat of ${n} but only NDHWC is currently supported.`);let c={x:l,filter:a},p={strides:e,pad:o,dataFormat:n,dilations:s},m=k.runKernel(xi,c,p);return u?F(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}var Zh=S({conv3d_:_z});function Oz(r,t,e,o,n){E(r.length===t.rank,()=>`Length of inShape (${r.length}) and rank of dy (${t.rank}) must match`);let s=r,i=t,a=!1;t.rank===4&&(a=!0,i=F(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),s=[1,r[0],r[1],r[2],r[3]]);let l=s[4],u=i.shape[4];E(s.length===5,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`),E(i.rank===5,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`),E(e.rank===5,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`),E(l===e.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${e.shape[3]}.`),E(u===e.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${e.shape[4]}.`);let c={dy:i,filter:e},p={pad:n,strides:o,inputShape:s},m=k.runKernel(wu,c,p);return a?F(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}var Jh=S({conv3DBackpropInput_:Oz});function Lz(r,t,e,o,n){let s=N(r,"x","conv3dTranspose"),i=N(t,"filter","conv3dTranspose");return Jh(e,s,i,o,n)}var Qh=S({conv3dTranspose_:Lz});function Pz(r){let e={x:N(r,"x","cos","float32")};return k.runKernel(Xn,e)}var la=S({cos_:Pz});function zz(r){let e={x:N(r,"x","cosh","float32")};return k.runKernel(Yn,e)}var kc=S({cosh_:zz});function Mz(r,t=0,e=!1,o=!1){let s={x:N(r,"x","cumprod")},i={axis:t,exclusive:e,reverse:o};return k.runKernel(Cu,s,i)}var bl=S({cumprod_:Mz});function Bz(r,t=0,e=!1,o=!1){let s={x:N(r,"x","cumsum")},i={axis:t,exclusive:e,reverse:o};return k.runKernel(yi,s,i)}var Ec=S({cumsum_:Bz});function Vz(r,t,e,o=!1){let n=N(r,"x","denseBincount"),s=N(t,"weights","denseBincount");E(n.dtype==="int32",()=>`Error in denseBincount: input dtype must be int32, but got ${n.dtype}`),E(n.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${n.rank}.`),E(e>=0,()=>`size must be non-negative, but got ${e}.`),E(s.size===n.size||s.size===0,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${n.shape}, weights shape: ${s.shape}.`);let i={x:n,weights:s},a={size:e,binaryOutput:o};return k.runKernel(Nu,i,a)}var XN=S({denseBincount_:Vz});function Gz(r,t,e="NHWC"){let o=N(r,"x","depthToSpace","float32"),n=e==="NHWC"?o.shape[1]:o.shape[2],s=e==="NHWC"?o.shape[2]:o.shape[3],i=e==="NHWC"?o.shape[3]:o.shape[1];E(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),E(n*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${n} and ${t}  for depthToSpace with input shape
    ${o.shape}`),E(s*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${s} and ${t} for depthToSpace with input shape
        ${o.shape}`),E(i%(t*t)===0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${o.shape}`);let a={x:o},l={blockSize:t,dataFormat:e};return k.runKernel(Su,a,l)}var td=S({depthToSpace_:Gz});function Wz(r,t,e,o,n="NHWC",s=[1,1],i){let a=N(r,"x","depthwiseConv2d","float32"),l=N(t,"filter","depthwiseConv2d","float32"),u=a,c=!1;a.rank===3&&(c=!0,u=F(a,[1,a.shape[0],a.shape[1],a.shape[2]])),E(u.rank===4,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),E(l.rank===4,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);let p=n==="NHWC"?u.shape[3]:u.shape[1];E(p===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${p}) must match the inChannels dimension in filter ${l.shape[2]}.`),Qt("depthwiseConv2d",o,i);let m={x:u,filter:l},f={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i},h=k.runKernel(bi,m,f);return c?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}var wn=S({depthwiseConv2d_:Wz});function Uz(r){let e={x:N(r,"x","diag")};return k.runKernel(ku,e)}var YN=S({diag_:Uz});function Hz(r,t,e,o,n=[1,1],s="NHWC"){let i=N(r,"x","dilation2d"),a=N(t,"filter","dilation2d");E(i.rank===3||i.rank===4,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`),E(a.rank===3,()=>`Error in dilation2d: filter must be rank 3, but got rank ${a.rank}.`),E(s==="NHWC",()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`);let l=i,u=!1;i.rank===3&&(l=F(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);let c={x:l,filter:a},p={strides:e,pad:o,dilations:n},m=k.runKernel(wi,c,p);return u?F(m,[m.shape[1],m.shape[2],m.shape[3]]):m}var ed=S({dilation2d_:Hz});function qz(r,t){let e=N(r,"a","equal","string_or_numeric"),o=N(t,"b","equal","string_or_numeric");[e,o]=Ft(e,o),It(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(Ya,n)}var hr=S({equal_:qz});function Kz(r,t,e){let o=N(t,"a","where"),n=N(e,"b","where"),s=N(r,"condition","where","bool"),i=It(It(s.shape,o.shape),n.shape),a=aa(s,i),l=aa(o,i),u=aa(n,i),c={condition:a,t:l,e:u};return k.runKernel(Wi,c)}var le=S({where_:Kz});function jz(r){let e={x:N(r,"x","zerosLike")};return k.runKernel(Zi,e)}var dt=S({zerosLike_:jz});function Xz(r,t){let e=N(r,"a","div"),o=N(t,"b","div");[e,o]=Ft(e,o);let n=et(e,o),s=dt(n),i=hr(o,s);return le(i,s,n)}var rd=S({divNoNan_:Xz});function Yz(r,t){let e=N(r,"t1","dot"),o=N(t,"t2","dot");E((e.rank===1||e.rank===2)&&(o.rank===1||o.rank===2),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${o.rank}.`);let n=e.rank===1?e.size:e.shape[1],s=o.rank===1?o.size:o.shape[0];if(E(n===s,()=>`Error in dot: inner dimensions of inputs must match, but got ${n} and ${s}.`),e.rank===1&&o.rank===1){let i=F(e,[1,-1]),a=F(o,[-1,1]),l=kt(i,a);return F(l,[])}else if(e.rank===1&&o.rank===2){let i=F(e,[1,-1]),a=F(o,[o.shape[0],o.shape[1]]),l=kt(i,a);return F(l,[l.size])}else if(e.rank===2&&o.rank===1){let i=F(o,[-1,1]),a=kt(e,i);return F(a,[a.size])}else{let i=F(o,[o.shape[0],o.shape[1]]);return kt(e,i)}}var od=S({dot_:Yz});function Zz(r,...t){let e=t.map((n,s)=>N(n,`tensors${s}`,"einsum")),o={equation:r};return k.runKernel(Eu,e,o)}var ZN=S({einsum_:Zz});function Jz(r){let e={x:N(r,"x","elu","float32")};return k.runKernel(Jn,e)}var Cn=S({elu_:Jz});function Qz(r){let t=N(r,"x","erf");E(t.dtype==="int32"||t.dtype==="float32",()=>"Input dtype must be `int32` or `float32`."),t.dtype==="int32"&&(t=q(t,"float32"));let e={x:t};return k.runKernel(Qn,e)}var nd=S({erf_:Qz});function Cw(r,t){for(let e=0;e<r.length;++e)if(r[r.length-e-1]!==t-1-e)return!1;return!0}function JN(r,t,e){let o=r.length+t.length,n=[],s=0,i=0;for(let a=0;a<o;a++)e.indexOf(a)===-1?n.push(r[s++]):n.push(t[i++]);return n}function vw(r,t){let e=[],o=r.length;for(let s=0;s<o;s++)t.indexOf(s)===-1&&e.push(r[s]);let n=t.map(s=>r[s]);return[e,n]}function wo(r,t){let e=t.map(o=>1);return JN(r,e,t)}function t3(r,t,e){E(Cw(t,e),()=>`${r} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`)}function Nw(r,t){if(Cw(r,t))return null;let e=[];for(let o=0;o<t;++o)r.indexOf(o)===-1&&e.push(o);return r.forEach(o=>e.push(o)),e}function lm(r){return r.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function e3(r,t){let e=[];for(let o=t-r;o<t;++o)e.push(o);return e}function r3(r,t=null,e=!1){let n={x:N(r,"x","max")},s={reductionIndices:t,keepDims:e};return k.runKernel(Ti,n,s)}var sr=S({max_:r3});function o3(r,t=null,e=!1){let n={x:N(r,"x","min")},s={axis:t,keepDims:e};return k.runKernel(Ai,n,s)}var wl=S({min_:o3});function n3(r,t){let e=N(r,"base","pow"),o=N(t,"exp","pow");[e,o]=Ft(e,o);let n={a:e,b:o};return k.runKernel(hs,n)}var Sr=S({pow_:n3});function nt(r,t){if((Or(r)&&t!=="string"||Array.isArray(r))&&t!=="complex64")throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if(t==="string"&&Or(r)&&!(r instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return vr(r,[],[],t)}function s3(r){let e={x:N(r,"x","sqrt","float32")};return k.runKernel(Ts,e)}var te=S({sqrt_:s3});function i3(r){let t=N(r,"x","square"),e={};return k.runKernel("Square",{x:t},e)}var At=S({square_:i3});function a3(r,t=null,e=!1){let o=N(r,"x","sum");o.dtype==="bool"&&(o=q(o,"int32"));let n={x:o},s={axis:t,keepDims:e};return k.runKernel(Hi,n,s)}var st=S({sum_:a3});function l3(r,t="euclidean",e=null,o=!1){r=N(r,"x","norm");let n=QN(r,t,e),s=n.shape;if(o){let i=Le(e,r.shape);s=wo(n.shape,i)}return F(n,s)}function QN(r,t,e=null){if(r.rank===0)return se(r);if(r.rank!==1&&e===null)return QN(F(r,[-1]),t,e);if(r.rank===1||typeof e=="number"||Array.isArray(e)&&e.length===1){if(t===1)return st(se(r),e);if(t===1/0)return sr(se(r),e);if(t===-1/0)return wl(se(r),e);if(t==="euclidean"||t===2)return te(st(Sr(se(r),nt(2,"int32")),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(e)&&e.length===2){if(t===1)return sr(st(se(r),e[0]),e[1]-1);if(t===1/0)return sr(st(se(r),e[1]),e[0]);if(t===-1/0)return wl(st(se(r),e[1]),e[0]);if(t==="fro"||t==="euclidean")return te(st(At(r),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${e}`)}var Ls=S({norm_:l3});function u3(r,t=null,e=!1){return Ls(r,"euclidean",t,e)}var sd=S({euclideanNorm_:u3});function c3(r){let e={x:N(r,"x","exp")};return k.runKernel(ts,e)}var Ae=S({exp_:c3});function p3(r,t=0){let e=N(r,"x","expandDims","string_or_numeric");E(t<=e.rank,()=>"Axis must be <= rank of the tensor");let o={input:e},n={dim:t};return k.runKernel(Ci,o,n)}var ze=S({expandDims_:p3});function m3(r){let e={x:N(r,"x","expm1")};return k.runKernel(es,e)}var id=S({expm1_:m3});function f3(r,t){let e=N(r,"x","tile","string_or_numeric");E(e.rank===t.length,()=>`Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`);let o={x:e},n={reps:t};return k.runKernel(ln,o,n)}var tr=S({tile_:f3});function h3(r,t,e,o="float32"){t==null&&(t=r);let n=pt([r,t],o),s=r<=t?r:t;for(let a=0;a<s;++a)n.set(1,a,a);let i=F(n.toTensor(),[r,t]);if(e==null)return i;if(e.length===1)return tr(ze(i,0),[e[0],1,1]);if(e.length===2)return tr(ze(ze(i,0),0),[e[0],e[1],1,1]);if(e.length===3)return tr(ze(ze(ze(i,0),0),0),[e[0],e[1],e[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`)}var Cl=S({eye_:h3});function vn(r,t,e){let o={shape:r,value:t,dtype:e};return k.runKernel(Du,{},o)}function d3(r){let e={x:N(r,"x","floor","float32")};return k.runKernel(rs,e)}var Nn=S({floor_:d3});function g3(r,t,e=0,o=0){let n=N(r,"x","gather"),s=N(t,"indices","gather","int32"),i={x:n,indices:s},a={axis:e,batchDims:o};return k.runKernel(Ni,i,a)}var Sn=S({gather_:g3});function x3(r,t){let e=N(r,"a","greater","string_or_numeric"),o=N(t,"b","greater","string_or_numeric");[e,o]=Ft(e,o),It(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(Za,n)}var Se=S({greater_:x3});function y3(r,t){let e=N(r,"a","greaterEqual","string_or_numeric"),o=N(t,"b","greaterEqual","string_or_numeric");[e,o]=Ft(e,o),It(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(ns,n)}var Kr=S({greaterEqual_:y3});function b3(r){let e={x:N(r,"x","isFinite")};return k.runKernel(ss,e)}var ad=S({isFinite_:b3});function w3(r){let e={x:N(r,"x","isInf")};return k.runKernel(is,e)}var ld=S({isInf_:w3});function C3(r){let e={x:N(r,"x","isNaN")};return k.runKernel(as,e)}var ud=S({isNaN_:C3});function v3(r,t=.2){let o={x:N(r,"x","leakyRelu")},n={alpha:t};return k.runKernel(Si,o,n)}var ua=S({leakyRelu_:v3});function N3(r,t){let e=N(r,"a","less","string_or_numeric"),o=N(t,"b","less","string_or_numeric");[e,o]=Ft(e,o),It(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(Ja,n)}var $c=S({less_:N3});function S3(r,t){let e=N(r,"a","lessEqual","string_or_numeric"),o=N(t,"b","lessEqual","string_or_numeric");[e,o]=Ft(e,o),It(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(Qa,n)}var jr=S({lessEqual_:S3});function tS(r,t,e){if(e<=0)throw new Error("The number of values should be positive.");let o={start:r,stop:t,num:e};return k.runKernel(Lu,{},o)}function I3(r,t=5,e=1,o=1,n=.5){let s=N(r,"x","localResponseNormalization");E(s.rank===4||s.rank===3,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${s.rank}.`),E(Mn(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let i=s,a=!1;s.rank===3&&(a=!0,i=F(s,[1,s.shape[0],s.shape[1],s.shape[2]]));let l={x:i},u={depthRadius:t,bias:e,alpha:o,beta:n},c=k.runKernel(Ii,l,u);return a?F(c,[c.shape[1],c.shape[2],c.shape[3]]):c}var cd=S({localResponseNormalization_:I3});function T3(r){let e={x:N(r,"x","log","float32")};return k.runKernel(ls,e)}var Ke=S({log_:T3});function k3(r){let e={x:N(r,"x","log1p")};return k.runKernel(us,e)}var ca=S({log1p_:k3});function pd(r,t){E(lu(r),()=>"The f passed in variableGrads(f) must be a function"),E(t==null||Array.isArray(t)&&t.every(u=>u instanceof Fs),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");let e=t!=null;if(!e){t=[];for(let u in k.registeredVariables)t.push(k.registeredVariables[u])}let o=e?t.filter(u=>!u.trainable):null,n=t.length;t=t.filter(u=>u.trainable),E(t.length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${n} variables is trainable.`);let s=!0,{value:i,grads:a}=k.gradients(r,t,null,s);E(a.some(u=>u!=null),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),E(i.rank===0,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`);let l={};return t.forEach((u,c)=>{a[c]!=null&&(l[u.name]=a[c])}),o!=null&&o.forEach(u=>l[u.name]=null),{value:i,grads:l}}function Ir(r){return k.customGrad(r)}function E3(r){let e={x:N(r,"x","softplus")};return k.runKernel(Is,e)}var Uo=S({softplus_:E3});function $3(r){let t=N(r,"x","logSigmoid");return Ir(o=>({value:Rt(Uo(Rt(o))),gradFunc:i=>D(i,fr(Rt(o)))}))(t)}var md=S({logSigmoid_:$3});function A3(r,t){let e=N(r,"a","sub"),o=N(t,"b","sub");[e,o]=Ft(e,o);let n={a:e,b:o};return k.runKernel(Es,n)}var tt=S({sub_:A3});function D3(r,t=-1){let e=N(r,"logits","logSoftmax");if(t===-1&&(t=e.rank-1),t!==e.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`);return Ir((n,s)=>{let a=sr(n,t,!0),l=tt(n,a),u=tt(q(l,"float32"),Ke(st(Ae(l),t,!0)));return s([u]),{value:u,gradFunc:(p,m)=>{let[f]=m,h=!0,d=Ae(f);return tt(p,D(st(p,t,h),d))}}})(e)}var Ac=S({logSoftmax_:D3});function F3(r,t=null,e=!1){let o=N(r,"x","logSumExp"),n=Le(t,o.shape),s=sr(o,n,!0),i=tt(o,s),a=Ae(i),l=st(a,n),u=Ke(l),c=U(F(s,u.shape),u);if(e){let p=wo(c.shape,n);return F(c,p)}return c}var Dc=S({logSumExp_:F3});function R3(r,t){let e=N(r,"a","logicalAnd","bool"),o=N(t,"b","logicalAnd","bool");It(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(tl,n)}var ir=S({logicalAnd_:R3});function _3(r){let e={x:N(r,"x","logicalNot","bool")};return k.runKernel(el,e)}var pa=S({logicalNot_:_3});function O3(r,t){let e=N(r,"a","logicalOr","bool"),o=N(t,"b","logicalOr","bool");It(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(rl,n)}var Fc=S({logicalOr_:O3});function L3(r,t){let e=N(r,"a","logicalXor","bool"),o=N(t,"b","logicalXor","bool");return It(e.shape,o.shape),ir(Fc(r,t),pa(ir(r,t)))}var fd=S({logicalXor_:L3});var hd=2147483648;function P3(r,t,e="left"){let o=N(r,"sortedSequence","searchSorted"),n=N(t,"values","searchSorted"),s=o.shape[o.shape.length-1],i=n.shape[n.shape.length-1],a=F(o,[-1,s]),l=F(n,[-1,i]);if(a.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(a.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(Ot(l.shape)>=hd)throw new Error(`values tensor size must less than ${hd}`);if(a.shape[1]>=hd)throw new Error(`trailing dim_size must less than ${hd} for int32 output type, was ${a.shape[1]}`);let u={sortedSequence:a,values:l},c={side:e};return k.runKernel(Yu,u,c)}var um=S({searchSorted_:P3});function eS(r,t){return um(r,t,"left")}function z3(r,t,e,o,n){let s=N(r,"x","maxPool"),i=1,a=s,l=!1;s.rank===3&&(l=!0,a=F(s,[1,s.shape[0],s.shape[1],s.shape[2]])),E(a.rank===4,()=>`Error in maxPool: input must be rank 4 but got rank ${a.rank}.`),E(Qe(e,i),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`),Qt("maxPool",o,n);let u={x:a},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n},p=k.runKernel(ki,u,c);return l?F(p,[p.shape[1],p.shape[2],p.shape[3]]):p}var ma=S({maxPool_:z3});function M3(r,t=[1,1,1],e,o,n,s="NDHWC"){let i=N(r,"x","maxPool3d"),a=i,l=!1;i.rank===4&&(l=!0,a=F(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),E(a.rank===5,()=>`Error in maxPool3d: x must be rank 5 but got rank ${a.rank}.`),E(s==="NDHWC",()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),Qt("maxPool3d",o,n);let u={x:a},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n,dataFormat:s},p=k.runKernel(Ei,u,c);return l?F(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}var dd=S({maxPool3d_:M3});function B3(r,t,e,o,n=!1){let i={x:N(r,"x","maxPoolWithArgmax")},a={filterSize:t,strides:e,pad:o,includeBatchInIndex:n},l=k.runKernel(Bu,i,a);return{result:l[0],indexes:l[1]}}var rS=S({maxPoolWithArgmax_:B3});function V3(r,t){let e=N(r,"a","maximum"),o=N(t,"b","maximum");[e,o]=Ft(e,o),e.dtype==="bool"&&(e=q(e,"int32"),o=q(o,"int32")),It(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(cs,n)}var Mr=S({maximum_:V3});function G3(r,t=null,e=!1){let n={x:N(r,"x","mean")},s={axis:t,keepDims:e};return k.runKernel($i,n,s)}var ee=S({mean_:G3});function re(r,t="float32"){if(t==="complex64"){let o=re(r,"float32"),n=re(r,"float32");return Lr(o,n)}let e=cu(Ot(r),t);return k.makeTensor(e,r,t)}function Me(r,t="float32"){if(t==="complex64"){let o=Me(r,"float32"),n=re(r,"float32");return Lr(o,n)}let e=Up(Ot(r),t);return k.makeTensor(e,r,t)}function oS(r,t,{indexing:e="xy"}={}){if(e!=="xy"&&e!=="ij")throw new TypeError(`${e} is not a valid third argument to meshgrid`);if(r===void 0)return[];let o=N(r,"x","meshgrid",r instanceof Dt?r.dtype:"float32");if(t===void 0)return[o];let n=N(t,"y","meshgrid",t instanceof Dt?t.dtype:"float32"),s=Ot(o.shape),i=Ot(n.shape);return e==="xy"?(o=F(o,[1,-1]),n=F(n,[-1,1]),[kt(Me([i,1],o.dtype),o),kt(n,Me([1,s],n.dtype))]):(o=F(o,[-1,1]),n=F(n,[1,-1]),[kt(o,Me([1,i],o.dtype)),kt(Me([s,1],n.dtype),n)])}function W3(r,t){let e=N(r,"a","minimum"),o=N(t,"b","minimum");[e,o]=Ft(e,o),e.dtype==="bool"&&(e=q(e,"int32"),o=q(o,"int32")),It(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(ps,n)}var In=S({minimum_:W3});function U3(r,t,e){E(e==="reflect"||e==="symmetric",()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`);let o=N(r,"x","mirrorPad");if(o.rank===0)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");E(t.length===o.rank,()=>`Padding doesn't match input. Must be ${o.rank}. Got ${t.length}.`);let n=e==="reflect"?1:0;for(let a=0;a<o.rank;a++)E(t[a].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),E(t[a][0]>=0&&t[a][0]<=o.shape[a]-n&&t[a][1]>=0&&t[a][1]<=o.shape[a]-n,()=>`Padding in dimension ${a} cannot be greater than or equal to ${o.shape[a]-n} or less than 0 for input of shape ${o.shape}`);let s={paddings:t,mode:e},i={x:o};return k.runKernel(Di,i,s)}var gd=S({mirrorPad_:U3});function H3(r,t){let e=N(r,"a","mod"),o=N(t,"b","mod");[e,o]=Ft(e,o);let n={a:e,b:o};return k.runKernel(ms,n)}var xd=S({mod_:H3});function q3(r,t=null,e=!1){r=N(r,"x","moments");let o=Le(t,r.shape),n=ee(r,o,e),s=n.shape;e||(s=wo(n.shape,o));let i=At(tt(q(r,"float32"),F(n,s))),a=ee(i,o,e);return{mean:n,variance:a}}var vl=S({moments_:q3});function K3(r,t,e,o){let n=N(t,"data","multiRNNCell"),s=ea(e,"c","multiRNNCell"),i=ea(o,"h","multiRNNCell"),a=n,l=[];for(let p=0;p<r.length;p++){let m=r[p](a,s[p],i[p]);l.push(m[0]),l.push(m[1]),a=m[1]}let u=[],c=[];for(let p=0;p<l.length;p+=2)u.push(l[p]),c.push(l[p+1]);return[u,c]}var nS=S({multiRNNCell_:K3});function j3(r,t,e,o=!1){let n=N(r,"logits","multinomial"),s=n.size,i=n.rank;if(s<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);e=e||Math.random();let l={logits:i===1?F(n,[1,-1]):n},u={numSamples:t,seed:e,normalized:o},c=k.runKernel(Vu,l,u);return i===1?F(c,[c.size]):c}var sS=S({multinomial_:j3});function X3(r,t){let e=N(r,"a","notEqual","string_or_numeric"),o=N(t,"b","notEqual","string_or_numeric");[e,o]=Ft(e,o),It(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(ol,n)}var Ho=S({notEqual_:X3});function Y3(r){let e={x:N(r,"x","onesLike")};return k.runKernel(Ri,e)}var We=S({onesLike_:Y3});function Z3(r,t){let e=N(r,"v1","outerProduct"),o=N(t,"v2","outerProduct");E(e.rank===1&&o.rank===1,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${e.rank} and ${o.rank}.`);let n=F(e,[-1,1]),s=F(o,[1,-1]);return kt(n,s)}var iS=S({outerProduct_:Z3});function J3(r,t,e=0){let o=N(r,"x","pad");if(o.rank===0)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");let n={paddings:t,constantValue:e},s={x:o};return k.runKernel(Li,s,n)}var Tr=S({pad_:J3});function Q3(r,t,e=0){return E(t.length===2,()=>"Invalid number of paddings. Must be length of 2."),Tr(r,[t],e)}var aS=S({pad1d_:Q3});function tM(r,t,e=0){return E(t.length===2&&t[0].length===2&&t[1].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),Tr(r,t,e)}var lS=S({pad2d_:tM});function eM(r,t,e=0){return E(t.length===3&&t[0].length===2&&t[1].length===2&&t[2].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),Tr(r,t,e)}var uS=S({pad3d_:eM});function rM(r,t,e=0){return E(t.length===4&&t[0].length===2&&t[1].length===2&&t[2].length===2&&t[3].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),Tr(r,t,e)}var cS=S({pad4d_:rM});function oM(r,t,e){let o=N(r,"x","spaceToBatchND");E(o.rank>=1+t.length,()=>`input rank ${o.rank} should be > than [blockShape] ${t.length}`),E(e.length===t.length,()=>`paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`),E(o.shape.reduce((i,a,l)=>l>0&&l<=t.length?i&&(a+e[l-1][0]+e[l-1][1])%t[l-1]===0:i,!0),()=>`input spatial dimensions ${o.shape.slice(1)} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`);let n={x:o},s={blockShape:t,paddings:e};return k.runKernel(qi,n,s)}var fa=S({spaceToBatchND_:oM});function nM(r,t,e,o,n,s,i){n==null&&(n=[1,1]),s==null&&(s=1),o===0&&(o="valid");let a=N(r,"x","maxPool"),l=a,u=!1;a.rank===3&&(u=!0,l=F(a,[1,a.shape[0],a.shape[1],a.shape[2]])),E(Qe(s,n),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${n}'`);let c=bw(l.shape,t,s,n,o),p=[c.dilationHeight,c.dilationWidth],m;o==="same"?m=iM([c.filterHeight,c.filterWidth],p):m=[[0,0],[0,0]];let f=p[0]===1&&p[1]===1,[h,d]=sM([c.inHeight,c.inWidth],p,m),g=f?o:"valid",y=f?l:fa(l,p,h),w=(e==="avg"?()=>sa(y,t,s,g,i):()=>ma(y,t,s,g,i))(),C=f?w:ia(w,p,d);return u?F(C,[C.shape[1],C.shape[2],C.shape[3]]):C}function sM(r,t,e){let o=e.map(c=>c[0]),n=e.map(c=>c[1]),s=r.concat(o,n),i=t.map((c,p)=>(c-s[p]%c)%c),a=n.map((c,p)=>c+i[p]),l=t.map((c,p)=>[o[p],a[p]]),u=t.map((c,p)=>[0,i[p]]);return[l,u]}function iM(r,t){let o=r.map((i,a)=>i+(i-1)*(t[a]-1)).map(i=>i-1),n=o.map(i=>Math.floor(i/2)),s=o.map((i,a)=>i-n[a]);return o.map((i,a)=>[n[a],s[a]])}var yd=S({pool_:nM});function aM(r,t){let e=N(r,"x","prelu"),o=N(t,"alpha","prelu"),n={x:e,alpha:o};return k.runKernel(Pi,n)}var ha=S({prelu_:aM});function lM(r,t=null,e=!1){let o=N(r,"x","prod");o.dtype==="bool"&&(o=q(o,"int32"));let n={x:o},s={axis:t,keepDims:e};return k.runKernel(zi,n,s)}var bd=S({prod_:lM});function uM(r,t,e){let o=Ot(r),n=null;if(e==null||e==="float32")n=new Float32Array(o);else if(e==="int32")n=new Int32Array(o);else if(e==="bool")n=new Uint8Array(o);else throw new Error(`Unknown data type ${e}`);for(let s=0;s<o;s++)n[s]=t();return k.makeTensor(n,r,e)}var pS=S({rand_:uM});var Nd=Wp(cm());var Sl=class{constructor(t,e,o,n,s){this.mean=t,this.stdDev=e,this.dtype=o,this.nextVal=NaN,this.truncated=n,this.truncated&&(this.upper=this.mean+this.stdDev*2,this.lower=this.mean-this.stdDev*2);let i=s||Math.random();this.random=Nd.alea(i.toString())}nextValue(){if(!isNaN(this.nextVal)){let n=this.nextVal;return this.nextVal=NaN,n}let t,e,o=!1;for(;!o;){let n,s,i;do n=2*this.random()-1,s=2*this.random()-1,i=n*n+s*s;while(i>=1||i===0);let a=Math.sqrt(-2*Math.log(i)/i);t=this.mean+this.stdDev*n*a,e=this.mean+this.stdDev*s*a,(!this.truncated||this.isValidTruncated(t))&&(o=!0)}return(!this.truncated||this.isValidTruncated(e))&&(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return this.dtype==null||this.dtype==="float32"?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}},Cd=class{constructor(t,e,o,n){this.alpha=t,this.beta=1/e,this.dtype=o;let s=n||Math.random();this.randu=Nd.alea(s.toString()),this.randn=new Sl(0,1,o,!1,this.randu()),t<1?this.d=t+2/3:this.d=t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,o,n,s,i;for(;;){do n=this.randn.nextValue(),i=1+this.c*n;while(i<=0);if(i*=i*i,t=n*n,e=1-.331*t*t,o=.5*t+this.d*(1-i+Math.log(i)),s=this.randu(),s<e||Math.log(s)<o)break}return i=1/this.beta*this.d*i,this.alpha<1&&(i*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(i)}convertValue(t){return this.dtype==="float32"?t:Math.round(t)}},vd=class{constructor(t=0,e=1,o,n){if(this.canReturnFloat=()=>this.dtype==null||this.dtype==="float32",this.min=t,this.range=e-t,this.dtype=o,n==null&&(n=Math.random()),typeof n=="number"&&(n=n.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=Nd.alea(n)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}};function gM(r,t,e=1,o="float32",n){if(e==null&&(e=1),o==null&&(o="float32"),o!=="float32"&&o!=="int32")throw new Error(`Unsupported data type ${o}`);let s=new Cd(t,e,o,n),i=pt(r,o);for(let a=0;a<i.values.length;a++)i.values[a]=s.nextValue();return i.toTensor()}var ES=S({randomGamma_:gM});function xM(r,t=0,e=1,o,n){if(o!=null&&o==="bool")throw new Error(`Unsupported data type ${o}`);let s=new Sl(t,e,o,!1,n),i=pt(r,o);for(let a=0;a<i.values.length;a++)i.values[a]=s.nextValue();return i.toTensor()}var Il=S({randomNormal_:xM});function yM(r,t,e){if(t!=null&&t==="bool")throw new Error(`Unsupported data type ${t}`);return Il(r,0,1,t,e)}var $S=S({randomStandardNormal_:yM});function bM(r,t=0,e=1,o="float32",n){let s=pt(r,o),i=new vd(t,e,null,n);for(let a=0;a<s.values.length;a++)s.values[a]=i.nextValue();return s.toTensor()}var Tn=S({randomUniform_:bM});function da(r,t,e=1,o="float32"){if(e===0)throw new Error("Cannot have a step of zero");let n={start:r,stop:t,step:e,dtype:o};return k.runKernel(Hu,{},n)}function wM(r){let e={x:N(r,"x","reciprocal")};return k.runKernel(ds,e)}var Sd=S({reciprocal_:wM});function CM(r){let e={x:N(r,"x","relu")};return k.runKernel(gs,e)}var er=S({relu_:CM});function vM(r){let e={x:N(r,"x","relu6")};return k.runKernel(xs,e)}var Rc=S({relu6_:vM});function NM(r,t){let o={x:N(r,"x","reverse")},n={dims:t};return k.runKernel(Gi,o,n)}var Be=S({reverse_:NM});function SM(r){let t=N(r,"x","reverse");return E(t.rank===1,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),Be(t,0)}var AS=S({reverse1d_:SM});function IM(r,t){let e=N(r,"x","reverse");return E(e.rank===2,()=>`Error in reverse2D: x must be rank 2 but got rank ${e.rank}.`),Be(e,t)}var DS=S({reverse2d_:IM});function TM(r,t){let e=N(r,"x","reverse");return E(e.rank===3,()=>`Error in reverse3D: x must be rank 3 but got rank ${e.rank}.`),Be(e,t)}var FS=S({reverse3d_:TM});function kM(r,t){let e=N(r,"x","reverse");return E(e.rank===4,()=>`Error in reverse4D: x must be rank 4 but got rank ${e.rank}.`),Be(e,t)}var RS=S({reverse4d_:kM});function EM(r){let e={x:N(r,"x","round")};return k.runKernel(ys,e)}var _c=S({round_:EM});function $M(r){let e={x:N(r,"x","rsqrt","float32")};return k.runKernel(bs,e)}var Oc=S({rsqrt_:$M});function AM(r){let e={x:N(r,"x","selu")};return k.runKernel(ws,e)}var Lc=S({selu_:AM});function DM(r,t,e,o,n,s=[1,1],i="NHWC"){let a=N(r,"x","separableConv2d"),l=N(t,"depthwiseFilter","separableConv2d"),u=N(e,"pointwiseFilter","separableConv2d"),c=a,p=!1;if(a.rank===3&&(p=!0,c=F(a,[1,a.shape[0],a.shape[1],a.shape[2]])),i==="NCHW")throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");E(c.rank===4,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),E(l.rank===4,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),E(u.rank===4,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),E(u.shape[0]===1,()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),E(u.shape[1]===1,()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);let m=l.shape[2],f=l.shape[3];E(u.shape[2]===m*f,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${m*f}, but got ${u.shape[2]}.`);let h=wn(c,l,o,n,i,s),g=zr(h,u,1,"valid",i);return p?F(g,[g.shape[1],g.shape[2],g.shape[3]]):g}var Pc=S({separableConv2d_:DM});async function FM(r,t){let e=N(r,"x","setdiff1d"),o=N(t,"y","setdiff1d");E(e.dtype===o.dtype,()=>`x and y should have the same dtype, but got x (${e.dtype}) and y (${o.dtype}).`),E(e.rank===1,()=>`x should be 1D tensor, but got x (${e.shape}).`),E(o.rank===1,()=>`y should be 1D tensor, but got y (${o.shape}).`);let n=await e.data(),s=await o.data(),i=new Set(s),a=0;for(let c=0;c<n.length;c++)i.has(n[c])||a++;let l=new Ut([a],e.dtype),u=new Ut([a],"int32");for(let c=0,p=0;c<n.length;c++)i.has(n[c])||(l.values[p]=n[c],u.values[p]=c,p++);return[l.toTensor(),u.toTensor()]}var _S=FM;function RM(r){let e={x:N(r,"x","sign")};return k.runKernel(Ns,e)}var Id=S({sign_:RM});function _M(r){let e={x:N(r,"x","sin","float32")};return k.runKernel(Cs,e)}var zc=S({sin_:_M});function OM(r){let e={x:N(r,"x","sinh")};return k.runKernel(vs,e)}var Mc=S({sinh_:OM});function LM(r,t,e){let o=N(r,"x","slice1d");return E(o.rank===1,()=>`slice1d expects a rank-1 tensor, but got a rank-${o.rank} tensor`),Ct(o,[t],[e])}var Bc=S({slice1d_:LM});function PM(r,t,e){let o=N(r,"x","slice2d");return E(o.rank===2,()=>`slice2d expects a rank-2 tensor, but got a rank-${o.rank} tensor`),Ct(o,t,e)}var pm=S({slice2d_:PM});function zM(r,t,e){let o=N(r,"x","slice3d");return E(o.rank===3,()=>`slice3d expects a rank-3 tensor, but got a rank-${o.rank} tensor`),Ct(o,t,e)}var Vc=S({slice3d_:zM});function MM(r,t,e){let o=N(r,"x","slice4d");return E(o.rank===4,()=>`slice4d expects a rank-4 tensor, but got a rank-${o.rank} tensor`),Ct(o,t,e)}var Tl=S({slice4d_:MM});function BM(r,t=-1){let e=N(r,"logits","softmax","float32");if(t===-1&&(t=e.rank-1),t!==e.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`);let o={logits:e},n={dim:t};return k.runKernel(ji,o,n)}var ga=S({softmax_:BM});function VM(r){E(r.dtype==="complex64",()=>`The dtype for tf.spectral.fft() must be complex64 but got ${r.dtype}.`);let t={input:r};return k.runKernel(Au,t)}var xa=S({fft_:VM});function GM(r){E(r.dtype==="complex64",()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${r.dtype}.`);let t={input:r};return k.runKernel(_u,t)}var Ps=S({ifft_:GM});function WM(r){let t=r.shape[r.shape.length-1],e=r.size/t,o;if(t<=2){let n=F(r,[e,t]);o=Ps(n)}else{let n=[e,2*(t-1)],s=F(Os(r),[e,t]),i=F(na(r),[e,t]),a=Be(Ct(s,[0,1],[e,t-2]),1),l=D(Be(Ct(i,[0,1],[e,t-2]),1),nt(-1)),u=Bt([s,a],1),c=Bt([i,l],1),p=F(Lr(u,c),[n[0],n[1]]);o=Ps(p)}if(o=Os(o),r.rank===3&&r.shape[0]!==0){let n=o,s=r.shape[0];o=F(o,[s,o.shape[0]/s,o.shape[1]]),n.dispose()}return o}var Gc=S({irfft_:WM});function UM(r,t,e=0){let n={x:N(r,"x","split")},s={numOrSizeSplits:t,axis:e};return k.runKernel(Ki,n,s)}var Ve=S({split_:UM});function HM(r,t){E(r.dtype==="float32",()=>`The dtype for rfft() must be real value but got ${r.dtype}`);let e=r.shape[r.shape.length-1],o=r.size/e,n;if(t!=null&&t<e){let h=r.shape.map(g=>0),d=r.shape.map(g=>g);d[r.shape.length-1]=t,n=Ct(r,h,d),e=t}else if(t!=null&&t>e){let h=r.shape.map(d=>d);h[r.shape.length-1]=t-e,n=Bt([r,re(h)],r.shape.length-1),e=t}else n=r;let s=dt(n),i=F(Lr(n,s),[o,e]),a=xa(i),l=Math.floor(e/2)+1,u=Os(a),c=na(a),p=Ve(u,[l,e-l],u.shape.length-1),m=Ve(c,[l,e-l],c.shape.length-1),f=n.shape.slice();return f[n.shape.length-1]=l,F(Lr(p[0],m[0]),f)}var ya=S({rfft_:HM});function qM(r,t){let e=N(r,"a","squaredDifference"),o=N(t,"b","squaredDifference");[e,o]=Ft(e,o),It(e.shape,o.shape);let n={a:e,b:o},s={};return k.runKernel(ks,n,s)}var Wc=S({squaredDifference_:qM});function KM(r,t){let e=N(r,"x","squeeze","string_or_numeric");return F(e,Sb(e.shape,t).newShape)}var kr=S({squeeze_:KM});function jM(r,t=0){let e=ea(r,"tensors","stack","string_or_numeric");E(e.length>=1,()=>"Pass at least one tensor to tf.stack"),e.length>0&&E(t<=e[0].rank,()=>"Axis must be <= rank of the tensor");let o=e,n={axis:t};return k.runKernel(Oi,o,n)}var De=S({stack_:jM});function XM(r,t=0){let o={x:N(r,"x","step")},n={alpha:t};return k.runKernel(Ds,o,n)}var Co=S({step_:XM});function YM(r,t,e,o,n=0,s=0,i=0,a=0,l=0){let c={x:N(r,"x","stridedSlice","string_or_numeric")},p={begin:t,end:e,strides:o,beginMask:n,endMask:s,ellipsisMask:i,newAxisMask:a,shrinkAxisMask:l};return k.runKernel(oc,c,p)}var Td=S({stridedSlice_:YM});function ZM(r){let e={x:N(r,"x","tan","float32")};return k.runKernel($s,e)}var kd=S({tan_:ZM});function Ce(r,t){oo(r);let e=Cr(r,t);if(e.length!==1)throw new Error("tensor1d() requires values to be a flat/TypedArray");return vr(r,null,e,t)}function zs(r,t,e){if(oo(r),t!=null&&t.length!==2)throw new Error("tensor2d() requires shape to have two numbers");let o=Cr(r,e);if(o.length!==2&&o.length!==1)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return vr(r,t,o,e)}function OS(r,t,e){if(oo(r),t!=null&&t.length!==4)throw new Error("tensor4d() requires shape to have four numbers");let o=Cr(r,e);if(o.length!==4&&o.length!==1)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return vr(r,t,o,e)}function LS(r,t,e){if(oo(r),t!=null&&t.length!==5)throw new Error("tensor5d() requires shape to have five numbers");let o=Cr(r,e);if(o.length!==5&&o.length!==1)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return vr(r,t,o,e)}function PS(r,t,e){if(oo(r),t!=null&&t.length!==6)throw new Error("tensor6d() requires shape to have six numbers");let o=Cr(r,e);if(o.length!==6&&o.length!==1)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return t=t||o,vr(r,t,o,e)}function JM(r,t=1,e=!0){let o=N(r,"x","topk");if(o.rank===0)throw new Error("topk() expects the input to be of rank 1 or higher");let n=o.shape[o.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>n)throw new Error(`'k' passed to topk() must be <= the last dimension (${n}) but got ${t}`);let s={x:o},i={k:t,sorted:e},[a,l]=k.runKernel(ac,s,i);return{values:a,indices:l}}var Ed=S({topk_:JM});function QM(r,t=0,e=1,o,n){if(o!=null&&o==="bool")throw new Error("Unsupported data type $ { dtype }");let s=new Sl(t,e,o,!0,n),i=pt(r,o);for(let a=0;a<i.values.length;a++)i.values[a]=s.nextValue();return i.toTensor()}var Uc=S({truncatedNormal_:QM});function tB(r,t=0){let e=N(r,"x","unique","string_or_numeric");E(e.rank>0,()=>"The input tensor must be at least 1D");let o={x:e},n={axis:t},[s,i]=k.runKernel(uc,o,n);return{values:s,indices:i}}var $d=S({unique_:tB});function eB(r,t,e){let o=N(r,"x","unsortedSegmentSum"),n=N(t,"segmentIds","unsortedSegmentSum","int32");E(Mn(e),()=>"numSegments must be of dtype int");let s={x:o,segmentIds:n},i={numSegments:e};return k.runKernel(Yi,s,i)}var Hc=S({unsortedSegmentSum_:eB});function rB(r,t=0){let e=N(r,"x","unstack","string_or_numeric");E(t>=-e.shape.length&&t<e.shape.length,()=>`Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`);let o={value:e},n={axis:t};return k.runKernel(Xi,o,n)}var je=S({unstack_:rB});function zS(r,t){return um(r,t,"right")}function Ad(r,t=!0,e,o){return k.makeVariable(r,t,e,o)}function Dd(r,t){let e=[];for(let s=0;s<t.length;s++)t[s]&&e.push(s);let o=pt(r,"int32"),n=pt([e.length,r.length],"int32");for(let s=0;s<e.length;s++){let i=o.indexToLoc(e[s]),a=s*r.length;n.values.set(i,a)}return n.toTensor()}async function oB(r){let t=N(r,"condition","whereAsync","bool"),e=await t.data(),o=Dd(t.shape,e);return r!==t&&t.dispose(),o}var Fd=oB;async function nB(r,t,e){let o=N(r,"tensor","boolMask"),n=N(t,"mask","boolMask","bool"),s=e==null?0:e,i=n.rank,a=o.shape;E(i>0,()=>"mask cannot be scalar"),Ne(a.slice(s,s+i),n.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let d=s;d<s+i;d++)l*=a[d];let u=a.slice(0,s).concat([l],a.slice(s+i)),c=F(o,u),p=F(n,[-1]),m=await Fd(p),f=kr(m,[1]),h=Sn(c,f,s);return r!==o&&o.dispose(),t!==n&&n.dispose(),f.dispose(),c.dispose(),p.dispose(),m.dispose(),h}var sB=nB;function iB(r,t,e,o,n=!0){let s=N(r,"v","movingAverage"),i=N(t,"x","movingAverage"),a=N(e,"decay","movingAverage");Kb(s,i),E(no(s.shape,i.shape),()=>"Shape mismatch in v and x");let l=nt(1),u=tt(l,a),c=D(tt(i,s),u);if(n){E(o!=null,()=>"When using zeroDebias: true, step is required.");let p=N(o,"step","movingAverage");c=et(c,tt(l,Sr(a,p)))}return U(s,c)}var aB=S({movingAverage_:iB});function lB(r,t,e){let o=N(r,"indices","scatterND","int32"),n=N(t,"updates","scatterND");dw(n,o,e);let s={indices:o,updates:n},i={shape:e};return k.runKernel(Xu,s,i)}var uB=S({scatterND_:lB});function MS(r,t,e,o){if(r.dtype!=="int32")throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${r.dtype}.`);if(r.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${r.shape}.`);let n=r.rank>0?r.shape[0]:1,s=r.rank>1?r.shape[1]:1;if(e.length!==s)throw new Error(`outputShape has incorrect number of elements:, ${e.length}, should be: ${s}.`);let i=t.size;if(!(t.rank===0||t.rank===1&&i===n))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${n}]`);if(t.dtype!==o.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}function pB(r,t,e,o=0){let n=N(r,"sparseIndices","sparseToDense","int32"),s=N(t,"sparseValues","sparseToDense","string_or_numeric"),i=N(o,"defaultValue","sparseToDense",s.dtype);MS(n,s,e,i);let a={sparseIndices:n,sparseValues:s,defaultValue:i},l={outputShape:e};return k.runKernel(ec,a,l)}var mB=S({sparseToDense_:pB});function fB(r,t){let e=N(t,"indices","gatherND","int32"),n={params:N(r,"x","gatherND","string_or_numeric"),indices:e};return k.runKernel(Ru,n)}var hB=S({gatherND_:fB});function BS(r,t){if(t==null)return r.shape.slice();if(no(r.shape,t))return t;if(r.shape.length===t.length){let e=[];for(let o=0;o<r.shape.length;o++)t[o]==null&&r.shape[o]!=null?e.push(r.shape[o]):e.push(t[o]);return e}return t}function dB(r,t,e,o){let n=N(r,"x","dropout");if(E(n.dtype==="float32",()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${n.dtype} tensor instead.`),E(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),t===0)return r instanceof Dt?n.clone():n;let s=BS(n,e),i=1-t,a=et(Nn(U(Tn(s,0,1,"float32",o),i)),i);return D(n,a)}var Dw=S({dropout_:dB});function Fw(r){return Math.floor(Math.pow(2,Math.ceil(Math.log(r)/Math.log(2))))}function mm(r,t,e){let o=1-r%2,n=new Float32Array(r);for(let s=0;s<r;++s){let i=2*Math.PI*s/(r+o-1);n[s]=t-e*Math.cos(i)}return Ce(n,"float32")}async function gB(r,t,e=1){let o=N(r,"predictions","inTopK"),n=N(t,"targets","inTopK");E(o.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${o.rank}`),E(o.rank-1===n.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${o.rank} and targets rank ${n.rank}`),Ne(o.shape.slice(0,o.shape.length-1),n.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");let s=o.shape[o.shape.length-1];E(e>0&&e<=s,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${e}`);let i=await o.data(),a=await n.data(),[l,u]=[i.length/s,s],c=Ib("bool",l);for(let p=0;p<l;p++){let m=p*u,f=i.subarray(m,m+u),h=[];for(let d=0;d<f.length;d++)h.push({value:f[d],index:d});h.sort((d,g)=>g.value-d.value),c[p]=0;for(let d=0;d<e;d++)if(h[d].index===a[p]){c[p]=1;break}}return r!==o&&o.dispose(),t!==n&&n.dispose(),Ze(c,n.shape,"bool")}var xB=gB;var ba={};qt(ba,{conv2d:()=>VS,depthwiseConv2d:()=>GS,matMul:()=>WS});function yB(r,t,e,o,n,s="NHWC",i){let a=r;r.rank===3&&(a=F(r,[1,r.shape[0],r.shape[1],r.shape[2]]));let l=t;l.rank===3&&(l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]])),E(a.rank===4,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${a.shape}.`),E(l.rank===4,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`),E(e.length===4,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`);let u=s==="NHWC"?a.shape[3]:a.shape[1],c=s==="NHWC"?l.shape[3]:l.shape[1];E(u===e[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${e[2]}.`),E(c===e[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${e[3]}).`),Qt("conv2dDerFilter",n,i);let p={x:a,dy:l},m={strides:o,pad:n,dataFormat:s,dimRoundingMode:i,filterShape:e};return k.runKernel(yu,p,m)}var qc=S({conv2DBackpropFilter_:yB});function kl(r,t,e){if(e==null||e==="linear")return r;if(e==="relu")return D(r,Co(t));throw new Error(`Cannot compute gradient for fused activation ${e}.`)}function El(r,t){let e=t,o=jt(r.shape,t.shape);return o.length>0&&(e=st(e,o)),F(e,r.shape)}function $l(r,t,e,o){if(t==="linear")return r;if(t==="relu")return er(r);if(t==="elu")return Cn(r);if(t==="relu6")return Rc(r);if(t==="prelu")return ha(r,e);if(t==="leakyrelu")return ua(r,o);if(t==="sigmoid")return fr(r);throw new Error(`Unknown fused activation ${t}.`)}var Al=(r,t)=>!(r>0)||t==="linear";function bB({x:r,filter:t,strides:e,pad:o,dataFormat:n="NHWC",dilations:s=[1,1],dimRoundingMode:i,bias:a,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",Al(k.state.gradientDepth,l)===!1){E(n==="NHWC",()=>`Error in fused conv2d: got dataFormat of ${n} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let $=zr(r,t,e,o,n,s,i);return a!=null&&($=U($,a)),$l($,l,u,c)}let p=N(r,"x","conv2d","float32"),m=N(t,"filter","conv2d","float32"),f=p,h=!1;p.rank===3&&(h=!0,f=F(p,[1,p.shape[0],p.shape[1],p.shape[2]])),E(f.rank===4,()=>`Error in fused conv2d: input must be rank 4, but got rank ${f.rank}.`),E(m.rank===4,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${m.rank}.`),Qt("fused conv2d",o,i);let d=n==="NHWC"?f.shape[3]:f.shape[1];E(m.shape[2]===d,()=>`Error in conv2d: depth of input (${d}) must match input depth for filter ${m.shape[2]}.`),E(Qe(e,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`);let g=yl(f.shape,m.shape,e,s,o,i),y;a!=null&&(y=N(a,"bias","fused conv2d"),[y]=Ft(y,p),n==="NHWC"?It(g.outShape,y.shape):(E(y.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`),E(y.shape.length===0||y.shape[0]===g.outChannels||y.shape[0]===1,()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`)));let b;if(u!=null){let $=u.shape;if(E($.length<=1||$.length===3,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${$.length}.`),$.length===1)E($[0]===1||$[0]===g.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${$}) is not compatible with the number of output channels (${g.outChannels}).`);else if($.length===3)try{It($,g.outShape)}catch(A){let _=`Error in fused conv2d: PReLU activation weights (${$}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(_)}b=N(u,"prelu weights","fused conv2d")}let w=($,A)=>{E(n==="NHWC",()=>`Error in gradient of fused conv2D: got dataFormat of ${n} but only NHWC is currently supported.`);let[_,O,P,B]=A,V=kl($,P,l);E(so(s),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);let G=Ic(O.shape,V,_,e,o),H=qc(O,V,_.shape,e,o),W=[G,H];if(B!=null){let X=El(B,V);W.push(X)}return W},C={x:f,filter:m,bias:y,preluActivationWeights:b},I={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return a==null?Ir((A,_,O)=>{let P=k.runKernel(sl,C,I);return O([_,A,P]),h&&(P=F(P,[P.shape[1],P.shape[2],P.shape[3]])),{value:P,gradFunc:w}})(f,m):Ir((A,_,O,P)=>{let B=k.runKernel(sl,C,I);return P([_,A,B,O]),h&&(B=F(B,[B.shape[1],B.shape[2],B.shape[3]])),{value:B,gradFunc:w}})(f,m,y)}var VS=S({fusedConv2d_:bB});function wB(r,t,e,o,n,s=[1,1],i){let a=r;r.rank===3&&(a=F(r,[1,r.shape[0],r.shape[1],r.shape[2]]));let l=t;l.rank===3&&(l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={x:a,dy:l},c={strides:o,pad:n,dimRoundingMode:i,dilations:s,filterShape:e};return k.runKernel(Iu,u,c)}var Rd=S({depthwiseConv2dNativeBackpropFilter_:wB});function CB(r,t,e,o,n,s=[1,1],i){let a=t,l=!1;t.rank===3&&(l=!0,a=F(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={dy:a,filter:e},c={strides:o,pad:n,dimRoundingMode:i,dilations:s,inputShape:r},p=k.runKernel(Tu,u,c);return l?F(p,[p.shape[1],p.shape[2],p.shape[3]]):p}var _d=S({depthwiseConv2dNativeBackpropInput_:CB});function vB({x:r,filter:t,strides:e,pad:o,dataFormat:n="NHWC",dilations:s=[1,1],dimRoundingMode:i,bias:a,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(Al(k.state.gradientDepth,l)===!1){let I=wn(r,t,e,o,n,s,i);return a!=null&&(I=U(I,a)),$l(I,l,u,c)}let p=N(r,"x","depthwiseConv2d","float32"),m=N(t,"filter","depthwiseConv2d","float32"),f=p,h=!1;p.rank===3&&(h=!0,f=F(p,[1,p.shape[0],p.shape[1],p.shape[2]])),E(f.rank===4,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${f.rank}.`),E(m.rank===4,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${m.rank}.`),E(f.shape[3]===m.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${f.shape[3]}) must match the inChannels dimension in filter ${m.shape[2]}.`),s==null&&(s=[1,1]),E(Qe(e,s),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`),Qt("fused depthwiseConv2d",o,i);let d=yl(f.shape,m.shape,e,s,o,i,!0),g;a!=null&&(g=N(a,"bias","fused conv2d"),[g]=Ft(g,p),It(d.outShape,g.shape));let y;u!=null&&(y=N(u,"prelu weights","fused depthwiseConv2d"));let b=(I,$)=>{E(so(s),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`);let[A,_,O,P]=$,B=kl(I,O,l),V=_d(_.shape,B,A,e,o,s,i),G=Rd(_,B,A.shape,e,o,s,i);if(P!=null){let H=El(g,B);return[V,G,H]}return[V,G]},w={x:f,filter:m,bias:g,preluActivationWeights:y},C={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return a==null?Ir(($,A,_)=>{let O=k.runKernel(il,w,C);return _([A,$,O]),h&&(O=F(O,[O.shape[1],O.shape[2],O.shape[3]])),{value:O,gradFunc:b}})(f,m):Ir(($,A,_,O)=>{let P=k.runKernel(il,w,C);return O([A,$,P,_]),h&&(P=F(P,[P.shape[1],P.shape[2],P.shape[3]])),{value:P,gradFunc:b}})(f,m,g)}var GS=S({fusedDepthwiseConv2d_:vB});function NB({a:r,b:t,transposeA:e=!1,transposeB:o=!1,bias:n,activation:s="linear",preluActivationWeights:i,leakyreluAlpha:a=.2}){if(Al(k.state.gradientDepth,s)===!1){let B=kt(r,t,e,o);return n!=null&&(B=U(B,n)),$l(B,s,i,a)}let l=N(r,"a","fused matMul"),u=N(t,"b","fused matMul");[l,u]=Ft(l,u);let c=e?l.shape[l.rank-2]:l.shape[l.rank-1],p=o?u.shape[u.rank-1]:u.shape[u.rank-2],m=e?l.shape[l.rank-1]:l.shape[l.rank-2],f=o?u.shape[u.rank-2]:u.shape[u.rank-1],h=l.shape.slice(0,-2),d=u.shape.slice(0,-2),g=Ot(h),y=Ot(d);E(c===p,()=>`Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${e} and transposeB=${o} must match.`);let w=It(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([m,f]),C=e?F(l,[g,c,m]):F(l,[g,m,c]),I=o?F(u,[y,f,p]):F(u,[y,p,f]),$;n!=null&&($=N(n,"bias","fused matMul"),[$]=Ft($,l),It(w,$.shape));let A;i!=null&&(A=N(i,"prelu weights","fused matMul"));let _=(B,V)=>{let[G,H,W,X]=V,Z=kl(F(B,W.shape),W,s),K,J;if(!e&&!o?(K=kt(Z,H,!1,!0),J=kt(G,Z,!0,!1)):!e&&o?(K=kt(Z,H,!1,!1),J=kt(Z,G,!0,!1)):e&&!o?(K=kt(H,Z,!1,!0),J=kt(G,Z,!1,!1)):(K=kt(H,Z,!0,!0),J=kt(Z,G,!0,!0)),n!=null){let rt=El(X,Z);return[K,J,rt]}else return[K,J]},O={a:C,b:I,bias:$,preluActivationWeights:A},P={transposeA:e,transposeB:o,activation:s,leakyreluAlpha:a};return n==null?Ir((V,G,H)=>{let W=k.runKernel(nl,O,P);return H([V,G,W]),{value:F(W,w),gradFunc:_}})(C,I):Ir((V,G,H,W)=>{let X=k.runKernel(nl,O,P);return W([V,G,X,H]),{value:F(X,w),gradFunc:_}})(C,I,$)}var WS=S({fusedMatMul_:NB});function SB(r){return mm(r,.54,.46)}var US=S({hammingWindow_:SB});function IB(r){return mm(r,.5,.5)}var Od=S({hannWindow_:IB});function TB(r,t,e,o=!1,n=0){let s=0,i=[];for(;s+t<=r.size;)i.push(Ct(r,s,t)),s+=e;if(o)for(;s<r.size;){let a=s+t-r.size,l=Bt([Ct(r,s,t-a),vn([a],n)]);i.push(l),s+=e}return i.length===0?zs([],[0,t]):F(Bt(i),[i.length,t])}var Ld=S({frame_:TB});function kB(r,t,e,o,n=Od){o==null&&(o=Fw(t));let s=Ld(r,t,e),i=D(s,n(t));return ya(i,o)}var HS=S({stft_:kB});function EB(r,t,e,o,n="bilinear",s=0){let i=N(r,"image","cropAndResize"),a=N(t,"boxes","cropAndResize","float32"),l=N(e,"boxInd","cropAndResize","int32"),u=a.shape[0];E(i.rank===4,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),E(a.rank===2&&a.shape[1]===4,()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${a.shape}.`),E(l.rank===1&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${a.shape}.`),E(o.length===2,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${o.length}.`),E(o[0]>=1&&o[1]>=1,()=>`cropSize must be atleast [1,1], but was ${o}`),E(n==="bilinear"||n==="nearest",()=>`method must be bilinear or nearest, but was ${n}`);let c={image:i,boxes:a,boxInd:l},p={method:n,extrapolationValue:s,cropSize:o};return k.runKernel(vu,c,p)}var qS=S({cropAndResize_:EB});function $B(r){let t=N(r,"image","flipLeftRight","float32");E(t.rank===4,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`);let e={image:t};return k.runKernel(Fu,e,{})}var KS=S({flipLeftRight_:$B});function AB(r){let t=N(r,"image","grayscaleToRGB"),e=t.rank-1,o=t.shape[e];E(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),E(o===1,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${o}.`);let n=new Array(t.rank);return n.fill(1,0,e),n[e]=3,tr(t,n)}var jS=S({grayscaleToRGB_:AB});function DB(r,t,e=0,o=.5){let n=N(r,"image","rotateWithOffset","float32");E(n.rank===4,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${n.rank}.`);let s={image:n},i={radians:t,fillValue:e,center:o};return k.runKernel(cc,s,i)}var XS=S({rotateWithOffset_:DB});function vo(r,t,e,o,n,s){o==null&&(o=.5),n==null&&(n=Number.NEGATIVE_INFINITY),s==null&&(s=0);let i=r.shape[0];return e=Math.min(e,i),E(0<=o&&o<=1,()=>`iouThreshold must be in [0, 1], but was '${o}'`),E(r.rank===2,()=>`boxes must be a 2D tensor, but was of rank '${r.rank}'`),E(r.shape[1]===4,()=>`boxes must have 4 columns, but 2nd dimension was ${r.shape[1]}`),E(t.rank===1,()=>"scores must be a 1D tensor"),E(t.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`),E(0<=s&&s<=1,()=>`softNmsSigma must be in [0, 1], but was '${s}'`),{maxOutputSize:e,iouThreshold:o,scoreThreshold:n,softNmsSigma:s}}function FB(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY){let s=N(r,"boxes","nonMaxSuppression","float32"),i=N(t,"scores","nonMaxSuppression","float32"),a=vo(s,i,e,o,n);e=a.maxOutputSize,o=a.iouThreshold,n=a.scoreThreshold;let l={maxOutputSize:e,iouThreshold:o,scoreThreshold:n};return k.runKernel(Gu,{boxes:s,scores:i},l)}var YS=S({nonMaxSuppression_:FB});function ZS(r,t,e){let o=RB(r,t,e),n=o<0?-(o+1):o;r.splice(n,0,t)}function RB(r,t,e){return OB(r,t,e||_B)}function _B(r,t){return r>t?1:r<t?-1:0}function OB(r,t,e){let o=0,n=r.length,s=0,i=!1;for(;o<n;){s=o+(n-o>>>1);let a=e(t,r[s]);a>0?o=s+1:(n=s,i=!a)}return i?o:-o-1}function Pd(r,t,e,o,n){return Rw(r,t,e,o,n,0)}function zd(r,t,e,o,n,s){return Rw(r,t,e,o,n,0,!1,s,!0)}function Md(r,t,e,o,n,s){return Rw(r,t,e,o,n,s,!0)}function Rw(r,t,e,o,n,s,i=!1,a=!1,l=!1){let u=[];for(let g=0;g<t.length;g++)t[g]>n&&u.push({score:t[g],boxIndex:g,suppressBeginIndex:0});u.sort(JS);let c=s>0?-.5/s:0,p=[],m=[];for(;p.length<e&&u.length>0;){let g=u.pop(),{score:y,boxIndex:b,suppressBeginIndex:w}=g;if(y<n)break;let C=!1;for(let I=p.length-1;I>=w;--I){let $=LB(r,b,p[I]);if($>=o){C=!0;break}if(g.score=g.score*PB(o,c,$),g.score<=n)break}g.suppressBeginIndex=p.length,C||(g.score===y?(p.push(b),m.push(g.score)):g.score>n&&ZS(u,g,JS))}let f=p.length,h=e-f;a&&h>0&&(p.push(...new Array(h).fill(0)),m.push(...new Array(h).fill(0)));let d={selectedIndices:p};return i&&(d.selectedScores=m),l&&(d.validOutputs=f),d}function LB(r,t,e){let o=r.subarray(t*4,t*4+4),n=r.subarray(e*4,e*4+4),s=Math.min(o[0],o[2]),i=Math.min(o[1],o[3]),a=Math.max(o[0],o[2]),l=Math.max(o[1],o[3]),u=Math.min(n[0],n[2]),c=Math.min(n[1],n[3]),p=Math.max(n[0],n[2]),m=Math.max(n[1],n[3]),f=(a-s)*(l-i),h=(p-u)*(m-c);if(f<=0||h<=0)return 0;let d=Math.max(s,u),g=Math.max(i,c),y=Math.min(a,p),b=Math.min(l,m),w=Math.max(y-d,0)*Math.max(b-g,0);return w/(f+h-w)}function PB(r,t,e){let o=Math.exp(t*e*e);return e<=r?o:0}function JS(r,t){return r.score-t.score||r.score===t.score&&t.boxIndex-r.boxIndex}async function zB(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY){let s=N(r,"boxes","nonMaxSuppressionAsync"),i=N(t,"scores","nonMaxSuppressionAsync"),a=vo(s,i,e,o,n);e=a.maxOutputSize,o=a.iouThreshold,n=a.scoreThreshold;let l=await Promise.all([s.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:p}=Pd(u,c,e,o,n);return s!==r&&s.dispose(),i!==t&&i.dispose(),Ce(p,"int32")}var QS=zB;function MB(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=0){let i=N(r,"boxes","nonMaxSuppression"),a=N(t,"scores","nonMaxSuppression"),l=vo(i,a,e,o,n,s);e=l.maxOutputSize,o=l.iouThreshold,n=l.scoreThreshold,s=l.softNmsSigma;let u={boxes:i,scores:a},c={maxOutputSize:e,iouThreshold:o,scoreThreshold:n,softNmsSigma:s},p=k.runKernel(Uu,u,c);return{selectedIndices:p[0],selectedScores:p[1]}}var tI=S({nonMaxSuppressionWithScore_:MB});async function BB(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=0){let i=N(r,"boxes","nonMaxSuppressionAsync"),a=N(t,"scores","nonMaxSuppressionAsync"),l=vo(i,a,e,o,n,s);e=l.maxOutputSize,o=l.iouThreshold,n=l.scoreThreshold,s=l.softNmsSigma;let u=await Promise.all([i.data(),a.data()]),c=u[0],p=u[1],{selectedIndices:m,selectedScores:f}=Md(c,p,e,o,n,s);return i!==r&&i.dispose(),a!==t&&a.dispose(),{selectedIndices:Ce(m,"int32"),selectedScores:Ce(f)}}var eI=BB;function VB(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=!1){let i=N(r,"boxes","nonMaxSuppression"),a=N(t,"scores","nonMaxSuppression"),l=vo(i,a,e,o,n,null),u=l.maxOutputSize,c=l.iouThreshold,p=l.scoreThreshold,m={boxes:i,scores:a},f={maxOutputSize:u,iouThreshold:c,scoreThreshold:p,padToMaxOutputSize:s},h=k.runKernel(Wu,m,f);return{selectedIndices:h[0],validOutputs:h[1]}}var rI=S({nonMaxSuppressionPadded_:VB});async function GB(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=!1){let i=N(r,"boxes","nonMaxSuppressionAsync"),a=N(t,"scores","nonMaxSuppressionAsync"),l=vo(i,a,e,o,n,null),u=l.maxOutputSize,c=l.iouThreshold,p=l.scoreThreshold,[m,f]=await Promise.all([i.data(),a.data()]),{selectedIndices:h,validOutputs:d}=zd(m,f,u,c,p,s);return i!==r&&i.dispose(),a!==t&&a.dispose(),{selectedIndices:Ce(h,"int32"),validOutputs:nt(d,"int32")}}var oI=GB;function WB(r,t,e=!1,o=!1){let n=N(r,"images","resizeBilinear");E(n.rank===3||n.rank===4,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${n.rank}.`),E(t.length===2,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),E(o===!1||e===!1,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let s=n,i=!1;n.rank===3&&(i=!0,s=F(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let[]=t,a={images:s},l={alignCorners:e,halfPixelCenters:o,size:t},u=k.runKernel(Vi,a,l);return i?F(u,[u.shape[1],u.shape[2],u.shape[3]]):u}var Bd=S({resizeBilinear_:WB});function UB(r,t,e=!1,o=!1){let n=N(r,"images","resizeNearestNeighbor");E(n.rank===3||n.rank===4,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${n.rank}.`),E(t.length===2,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),E(n.dtype==="float32"||n.dtype==="int32",()=>"`images` must have `int32` or `float32` as dtype"),E(o===!1||e===!1,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let s=n,i=!1;n.rank===3&&(i=!0,s=F(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let[]=t,a={images:s},l={alignCorners:e,halfPixelCenters:o,size:t},u=k.runKernel(Bi,a,l);return i?F(u,[u.shape[1],u.shape[2],u.shape[3]]):u}var Vd=S({resizeNearestNeighbor_:UB});function HB(r,t="binary",e=!1,o=.5){let n=N(r,"image","threshold"),s=.2989,i=.587,a=.114,l=n.shape[0]*n.shape[1],u=D(Ce([o]),255),c,p,m,f;if(E(n.rank===3,()=>`Error in threshold: image must be rank 3,but got rank ${n.rank}.`),E(n.shape[2]===3||n.shape[2]===1,()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${n.shape[2]}.`),E(n.dtype==="int32"||n.dtype==="float32",()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${n.dtype}.`),E(t==="otsu"||t==="binary",()=>`Method must be binary or otsu, but was ${t}`),n.shape[2]===3){[c,p,m]=Ve(n,[1,1,1],-1);let g=D(c,s),y=D(p,i),b=D(m,a);f=U(U(g,y),b)}else f=r;if(t==="otsu"){let g=Hh(q(_c(f),"int32"),Ze([]),256);u=qB(g,l)}let h=e?jr(f,u):Se(f,u);return q(D(h,255),"int32")}function qB(r,t){let e=Ce([-1]),o=Ce([0]),n=Ce([0]),s,i,a,l,u,c;for(let p=0;p<r.size-1;p++){s=Ct(r,0,p+1),i=Ct(r,p+1),u=et(st(s),t),c=et(st(i),t);let m=st(D(s,da(0,s.size)));a=et(m,st(s));let f=vn(i.shape,s.size),h=U(da(0,i.size),f),d=D(i,h);l=et(st(d),st(i));let g=tt(a,l),y=tt(a,l),b=D(u,c);n=D(D(b,g),y);let w=Se(n,o);o=le(w,n,o),e=le(w,Ce([p]),e)}return e}var nI=S({threshold_:HB});function KB(r,t,e="nearest",o="constant",n=0,s){let i=N(r,"image","transform","float32"),a=N(t,"transforms","transform","float32");E(i.rank===4,()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`),E(a.rank===2&&(a.shape[0]===i.shape[0]||a.shape[0]===1)&&a.shape[1]===8,()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),E(s==null||s.length===2,()=>`Error in transform: outputShape must be [height, width] or null, but got ${s}.`);let l={image:i,transforms:a},u={interpolation:e,fillMode:o,fillValue:n,outputShape:s};return k.runKernel(lc,l,u)}var sI=S({transform_:KB});function jB(r,t,e){E(t%1===0,()=>`bandPart(): numLower must be an integer, got ${t}.`),E(e%1===0,()=>`bandPart(): numUpper must be an integer, got ${e}.`);let o=N(r,"a","bandPart");E(o.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${o.rank}.`);let n=o.shape,[s,i]=o.shape.slice(-2);if(!(t<=s))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`);if(!(e<=i))throw new Error(`bandPart(): numUpper (${e}) must not be greater than the number of columns (${i}).`);t<0&&(t=s),e<0&&(e=i);let a=F(da(0,s,1,"int32"),[-1,1]),l=da(0,i,1,"int32"),u=tt(a,l),c=ir(jr(u,nt(+t,"int32")),Kr(u,nt(-e,"int32"))),p=re([s,i],o.dtype);return F(De(je(F(o,[-1,s,i])).map(m=>le(c,m,p))),n)}var iI=S({bandPart_:jB});function XB(r){let t;if(Array.isArray(r)){t=!1,E(r!=null&&r.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");let n=r[0].shape[0];for(let s=1;s<r.length;++s)E(r[s].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${r[s].shape[0]} vs. ${n})`)}else t=!0,r=Ve(r,r.shape[0],0).map(n=>kr(n,[0]));E(r.length<=r[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${r.length}) exceeds number of dimensions (${r[0].shape[0]}).`);let e=[],o=r;for(let n=0;n<r.length;++n)e.push(k.tidy(()=>{let s=o[n];if(n>0)for(let i=0;i<n;++i){let a=D(st(D(e[i],s)),e[i]);s=tt(s,a)}return et(s,Ls(s,"euclidean"))}));return t?De(e,0):e}var aI=S({gramSchmidt_:XB});function YB(r,t=!1){if(E(r.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${r.rank}`),r.rank===2)return lI(r,t);{let e=r.shape.slice(0,r.shape.length-2).reduce((l,u)=>l*u),o=je(F(r,[e,r.shape[r.shape.length-2],r.shape[r.shape.length-1]]),0),n=[],s=[];o.forEach(l=>{let[u,c]=lI(l,t);n.push(u),s.push(c)});let i=F(De(n,0),r.shape),a=F(De(s,0),r.shape);return[i,a]}}function lI(r,t=!1){return k.tidy(()=>{E(r.shape.length===2,()=>`qr2d() requires a 2D Tensor, but got a ${r.shape.length}D Tensor.`);let e=r.shape[0],o=r.shape[1],n=Cl(e),s=Nr(r),i=zs([[1]],[1,1]),a=Nr(i),l=e>=o?o:e;for(let u=0;u<l;++u){let c=s,p=a,m=n;[a,s,n]=k.tidy(()=>{let f=Ct(s,[u,u],[e-u,1]),h=Ls(f),d=Ct(s,[u,u],[1,1]),g=le(Se(d,0),zs([[-1]]),zs([[1]])),y=tt(d,D(g,h)),b=et(f,y);b.shape[0]===1?a=Nr(i):a=Bt([i,Ct(b,[1,0],[b.shape[0]-1,b.shape[1]])],0);let w=Rt(et(kt(g,y),h)),C=Ct(s,[u,0],[e-u,o]),I=D(w,a),$=St(a);if(u===0)s=tt(C,kt(I,kt($,C)));else{let O=tt(C,kt(I,kt($,C)));s=Bt([Ct(s,[0,0],[u,o]),O],0)}let A=St(I),_=Ct(n,[0,u],[e,n.shape[1]-u]);if(u===0)n=tt(_,kt(kt(_,a),A));else{let O=tt(_,kt(kt(_,a),A));n=Bt([Ct(n,[0,0],[e,u]),O],1)}return[a,s,n]}),yt([c,p,m])}return!t&&e>o&&(n=Ct(n,[0,0],[e,o]),s=Ct(s,[0,0],[o,o])),[n,s]})}var uI=S({qr_:YB});var Ie;(function(r){r[r.NONE=0]="NONE",r[r.MEAN=1]="MEAN",r[r.SUM=2]="SUM",r[r.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"})(Ie||(Ie={}));function ZB(r,t,e=Ie.SUM_BY_NONZERO_WEIGHTS){let o=N(r,"losses","computeWeightedLoss"),n=null;t!=null&&(n=N(t,"weights","computeWeightedLoss"));let s=n==null?o:D(o,n);if(e===Ie.NONE)return s;if(e===Ie.SUM)return st(s);if(e===Ie.MEAN){if(n==null)return ee(s);{let i=o.size/n.size,a=et(st(s),st(n));return i>1?et(a,nt(i)):a}}if(e===Ie.SUM_BY_NONZERO_WEIGHTS){if(n==null)return et(st(s),nt(o.size));{let i=D(n,Me(o.shape)),a=q(st(Ho(i,nt(0))),"float32");return et(st(s),a)}}throw Error(`Unknown reduction: ${e}`)}var ar=S({computeWeightedLoss_:ZB});function JB(r,t,e,o=Ie.SUM_BY_NONZERO_WEIGHTS){let n=N(r,"labels","absoluteDifference"),s=N(t,"predictions","absoluteDifference"),i=null;e!=null&&(i=N(e,"weights","absoluteDifference")),Ne(n.shape,s.shape,"Error in absoluteDifference: ");let a=se(tt(n,s));return ar(a,i,o)}var cI=S({absoluteDifference_:JB});function QB(r,t,e,o,n=Ie.SUM_BY_NONZERO_WEIGHTS){let s=N(r,"labels","cosineDistance"),i=N(t,"predictions","cosineDistance"),a=null;o!=null&&(a=N(o,"weights","cosineDistance")),Ne(s.shape,i.shape,"Error in cosineDistance: ");let l=nt(1),u=tt(l,st(D(s,i),e,!0));return ar(u,a,n)}var pI=S({cosineDistance_:QB});function tV(r,t,e,o=Ie.SUM_BY_NONZERO_WEIGHTS){let n=N(r,"labels","hingeLoss"),s=N(t,"predictions","hingeLoss"),i=null;e!=null&&(i=N(e,"weights","hingeLoss")),Ne(n.shape,s.shape,"Error in hingeLoss: ");let a=nt(1);n=tt(D(nt(2),n),a);let l=er(tt(a,D(n,s)));return ar(l,i,o)}var mI=S({hingeLoss_:tV});function eV(r,t,e,o=1,n=Ie.SUM_BY_NONZERO_WEIGHTS){let s=N(r,"labels","huberLoss"),i=N(t,"predictions","huberLoss"),a=null;e!=null&&(a=N(e,"weights","huberLoss")),Ne(s.shape,i.shape,"Error in huberLoss: ");let l=nt(o),u=se(tt(i,s)),c=In(u,l),p=tt(u,c),m=U(D(nt(.5),At(c)),D(l,p));return ar(m,a,n)}var fI=S({huberLoss_:eV});function rV(r,t,e,o=1e-7,n=Ie.SUM_BY_NONZERO_WEIGHTS){let s=N(r,"labels","logLoss"),i=N(t,"predictions","logLoss"),a=null;e!=null&&(a=N(e,"weights","logLoss")),Ne(s.shape,i.shape,"Error in logLoss: ");let l=nt(1),u=nt(o),c=Rt(D(s,Ke(U(i,u)))),p=D(tt(l,s),Ke(U(tt(l,i),u))),m=tt(c,p);return ar(m,a,n)}var hI=S({logLoss_:rV});function oV(r,t,e,o=Ie.SUM_BY_NONZERO_WEIGHTS){let n=N(r,"labels","meanSquaredError"),s=N(t,"predictions","meanSquaredError"),i=null;e!=null&&(i=N(e,"weights","meanSquaredError")),Ne(n.shape,s.shape,"Error in meanSquaredError: ");let a=Wc(n,s);return ar(a,i,o)}var dI=S({meanSquaredError_:oV});function nV(r,t){let e=N(r,"labels","sigmoidCrossEntropyWithLogits"),o=N(t,"logits","sigmoidCrossEntropyWithLogits");Ne(e.shape,o.shape,"Error in sigmoidCrossEntropyWithLogits: ");let n=er(o),s=D(o,e),i=ca(Ae(Rt(se(o))));return U(tt(n,s),i)}function sV(r,t,e,o=0,n=Ie.SUM_BY_NONZERO_WEIGHTS){let s=N(r,"multiClassLabels","sigmoidCrossEntropy"),i=N(t,"logits","sigmoidCrossEntropy"),a=null;if(e!=null&&(a=N(e,"weights","sigmoidCrossEntropy")),Ne(s.shape,i.shape,"Error in sigmoidCrossEntropy: "),o>0){let u=nt(o),c=nt(1),p=nt(.5);s=U(D(s,tt(c,u)),D(p,u))}let l=nV(s,i);return ar(l,a,n)}var gI=S({sigmoidCrossEntropy_:sV});function iV(r,t,e=-1){if(e===-1&&(e=t.rank-1),e!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${e}`);return Ir((n,s,i)=>{let l=Dc(s,[e],!0),u=tt(q(s,"float32"),l);i([n,u]);let c=Rt(D(u,n));return{value:st(c,[e]),gradFunc:(f,h)=>{let[d,g]=h,y=wo(f.shape,[e]);return[D(F(f,y),tt(q(d,"float32"),Ae(g))),D(F(f,y),tt(Ae(g),q(d,"float32")))]}}})(r,t)}function aV(r,t,e,o=0,n=Ie.SUM_BY_NONZERO_WEIGHTS){let s=N(r,"onehotLabels","softmaxCrossEntropy"),i=N(t,"logits","softmaxCrossEntropy"),a=null;if(e!=null&&(a=N(e,"weights","softmaxCrossEntropy")),Ne(s.shape,i.shape,"Error in softmaxCrossEntropy: "),o>0){let u=nt(o),c=nt(1),p=nt(s.shape[1]);s=U(D(s,tt(c,u)),et(u,p))}let l=iV(s,i);return ar(l,a,n)}var xI=S({softmaxCrossEntropy_:aV});function lV(r,t,e,o){let n=N(r,"indices","sparseFillEmptyRows","int32"),s=N(t,"values","sparseFillEmptyRows"),i=N(e,"denseShape","sparseFillEmptyRows","int32"),a=N(o,"defaultValue","sparseFillEmptyRows",s.dtype);if(n.rank!==2)throw new Error(`Indices should be Tensor2D but received shape
        ${n.shape}`);if(s.rank!==1)throw new Error(`Values should be Tensor1D but received shape ${s.shape}`);if(i.rank!==1)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(a.rank!==0)throw new Error(`Default value should be a scalar but received shape ${a.shape}`);let l={indices:n,values:s,denseShape:i,defaultValue:a},u=k.runKernel(Zu,l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}var yI=S({sparseFillEmptyRows_:lV});function uV(r,t,e){let o=N(r,"inputIndices","sparseReshape","int32"),n=N(t,"inputShape","sparseReshape","int32"),s=N(e,"newShape","sparseReshape","int32");if(o.rank!==2)throw new Error(`Input indices should be Tensor2D but received shape
        ${o.shape}`);if(n.rank!==1)throw new Error(`Input shape should be Tensor1D but received shape ${n.shape}`);if(s.rank!==1)throw new Error(`New shape should be Tensor1D but received shape ${s.shape}`);let i={inputIndices:o,inputShape:n,newShape:s},a=k.runKernel(Ju,i);return{outputIndices:a[0],outputShape:a[1]}}var bI=S({sparseReshape_:uV});function cV(r,t,e){let o=N(r,"data","sparseSegmentMean"),n=N(t,"indices","sparseSegmentMean","int32"),s=N(e,"segmentIds","sparseSegmentMean","int32");if(o.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.rank!==1)throw new Error(`Indices should be Tensor1D but received shape
          ${n.shape}`);if(s.rank!==1)throw new Error(`Segment ids should be Tensor1D but received shape
          ${s.shape}`);let i={data:o,indices:n,segmentIds:s};return k.runKernel(Qu,i)}var wI=S({sparseSegmentMean_:cV});function pV(r,t,e){let o=N(r,"data","sparseSegmentSum"),n=N(t,"indices","sparseSegmentSum","int32"),s=N(e,"segmentIds","sparseSegmentSum","int32");if(o.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.rank!==1)throw new Error(`Indices should be Tensor1D but received shape
         ${n.shape}`);if(s.rank!==1)throw new Error(`Segment ids should be Tensor1D but received shape
         ${s.shape}`);let i={data:o,indices:n,segmentIds:s};return k.runKernel(tc,i)}var CI=S({sparseSegmentSum_:pV});function mV(r,t,e,o,n,s,i,a){let l=N(r,"data","stringNGrams","string");if(l.dtype!=="string")throw new Error("Data must be of datatype string");if(l.shape.length!==1)throw new Error(`Data must be a vector, saw: ${l.shape}`);let u=N(t,"dataSplits","stringNGrams");if(u.dtype!=="int32")throw new Error("Data splits must be of datatype int32");let c={separator:e,nGramWidths:o,leftPad:n,rightPad:s,padWidth:i,preserveShortSequences:a},p={data:l,dataSplits:u},m=k.runKernel(nc,p,c);return{nGrams:m[0],nGramsSplits:m[1]}}var vI=S({stringNGrams_:mV});function fV(r,t,e=!0){let o=N(r,"input","stringSplit","string"),n=N(t,"delimiter","stringSplit","string");if(o.rank!==1)throw new Error(`Input should be Tensor1D but received shape ${o.shape}`);if(n.rank!==0)throw new Error(`Delimiter should be a scalar but received shape ${n.shape}`);let s={skipEmpty:e},i={input:o,delimiter:n},a=k.runKernel(sc,i,s);return{indices:a[0],values:a[1],shape:a[2]}}var NI=S({stringSplit_:fV});function hV(r,t){let e=N(r,"input","stringToHashBucketFast","string"),o={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");let n={input:e};return k.runKernel(ic,n,o)}var SI=S({stringToHashBucketFast_:hV});var dV={fft:xa,ifft:Ps,rfft:ya,irfft:Gc},gV={hammingWindow:US,hannWindow:Od,frame:Ld,stft:HS},Ms={flipLeftRight:KS,grayscaleToRGB:jS,resizeNearestNeighbor:Vd,resizeBilinear:Bd,rotateWithOffset:XS,cropAndResize:qS,nonMaxSuppression:YS,nonMaxSuppressionAsync:QS,nonMaxSuppressionWithScore:tI,nonMaxSuppressionWithScoreAsync:eI,nonMaxSuppressionPadded:rI,nonMaxSuppressionPaddedAsync:oI,threshold:nI,transform:sI},_w={bandPart:iI,gramSchmidt:aI,qr:uI},xV={absoluteDifference:cI,computeWeightedLoss:ar,cosineDistance:pI,hingeLoss:mI,huberLoss:fI,logLoss:hI,meanSquaredError:dI,sigmoidCrossEntropy:gI,softmaxCrossEntropy:xI},yV={sparseFillEmptyRows:yI,sparseReshape:bI,sparseSegmentMean:wI,sparseSegmentSum:CI},bV={stringNGrams:vI,stringSplit:NI,stringToHashBucketFast:SI};var lr=class extends am{minimize(t,e=!1,o){let{value:n,grads:s}=this.computeGradients(t,o);if(o!=null){let i=o.map(a=>({name:a.name,tensor:s[a.name]}));this.applyGradients(i)}else this.applyGradients(s);return yt(s),e?n:(n.dispose(),null)}get iterations(){return this.iterations_==null&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return pd(t,e)}dispose(){this.iterations_!=null&&yt(this.iterations_)}async saveIterations(){return this.iterations_==null&&(this.iterations_=0),{name:"iter",tensor:nt(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}};Object.defineProperty(lr,Symbol.hasInstance,{value:r=>r.minimize!=null&&r.computeGradients!=null&&r.applyGradients!=null});var wa=class extends lr{constructor(t,e,o=null){super(),this.learningRate=t,this.rho=e,this.epsilon=o,this.accumulatedGrads=[],this.accumulatedUpdates=[],o==null&&(this.epsilon=k.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=k.registeredVariables[o],i=!1;this.accumulatedGrads[n]==null&&(this.accumulatedGrads[n]={originalName:`${o}/accum_grad`,variable:z(()=>dt(s).variable(i))}),this.accumulatedUpdates[n]==null&&(this.accumulatedUpdates[n]={originalName:`${o}/accum_var`,variable:z(()=>dt(s).variable(i))});let a=Array.isArray(t)?t[n].tensor:t[o];if(a==null)return;let l=this.accumulatedGrads[n].variable,u=this.accumulatedUpdates[n].variable;z(()=>{let c=U(D(l,this.rho),D(At(a),1-this.rho)),p=D(et(te(U(u,this.epsilon)),te(U(l,this.epsilon))),a),m=U(D(u,this.rho),D(At(p),1-this.rho));l.assign(c),u.assign(m);let f=U(D(p,-this.learningRate),s);s.assign(f)})}),this.incrementIterations()}dispose(){this.accumulatedUpdates!=null&&(yt(this.accumulatedGrads.map(t=>t.variable)),yt(this.accumulatedUpdates.map(t=>t.variable)))}async getWeights(){let t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=t.length/2,o=!1;this.accumulatedGrads=t.slice(0,e).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedUpdates=t.slice(e,e*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}};wa.className="Adadelta";Pr(wa);var Ca=class extends lr{constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=k.registeredVariables[o];this.accumulatedGrads[n]==null&&(this.accumulatedGrads[n]={originalName:`${o}/accumulator`,variable:z(()=>vn(s.shape,this.initialAccumulatorValue).variable(!1))});let i=Array.isArray(t)?t[n].tensor:t[o];if(i==null)return;let a=this.accumulatedGrads[n].variable;z(()=>{let l=U(a,At(i));a.assign(l);let u=U(D(et(i,te(U(l,k.backend.epsilon()))),-this.learningRate),s);s.assign(u)})}),this.incrementIterations()}dispose(){this.accumulatedGrads!=null&&yt(this.accumulatedGrads.map(t=>t.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=!1;this.accumulatedGrads=t.map(o=>({originalName:o.name,variable:o.tensor.variable(e)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}};Ca.className="Adagrad";Pr(Ca);var va=class extends lr{constructor(t,e,o,n=null){super(),this.learningRate=t,this.beta1=e,this.beta2=o,this.epsilon=n,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],z(()=>{this.accBeta1=nt(e).variable(),this.accBeta2=nt(o).variable()}),n==null&&(this.epsilon=k.backend.epsilon())}applyGradients(t){let e=Array.isArray(t)?t.map(o=>o.name):Object.keys(t);z(()=>{let o=tt(1,this.accBeta1),n=tt(1,this.accBeta2);e.forEach((s,i)=>{let a=k.registeredVariables[s],l=!1;this.accumulatedFirstMoment[i]==null&&(this.accumulatedFirstMoment[i]={originalName:`${s}/m`,variable:z(()=>dt(a).variable(l))}),this.accumulatedSecondMoment[i]==null&&(this.accumulatedSecondMoment[i]={originalName:`${s}/v`,variable:z(()=>dt(a).variable(l))});let u=Array.isArray(t)?t[i].tensor:t[s];if(u==null)return;let c=this.accumulatedFirstMoment[i].variable,p=this.accumulatedSecondMoment[i].variable,m=U(D(c,this.beta1),D(u,1-this.beta1)),f=U(D(p,this.beta2),D(At(u),1-this.beta2)),h=et(m,o),d=et(f,n);c.assign(m),p.assign(f);let g=U(D(et(h,U(te(d),this.epsilon)),-this.learningRate),a);a.assign(g)}),this.accBeta1.assign(D(this.accBeta1,this.beta1)),this.accBeta2.assign(D(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),this.accumulatedFirstMoment!=null&&yt(this.accumulatedFirstMoment.map(t=>t.variable)),this.accumulatedSecondMoment!=null&&yt(this.accumulatedSecondMoment.map(t=>t.variable))}async getWeights(){let t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(t){t=await this.extractIterations(t),z(()=>{this.accBeta1.assign(Sr(this.beta1,this.iterations_+1)),this.accBeta2.assign(Sr(this.beta2,this.iterations_+1))});let e=t.length/2,o=!1;this.accumulatedFirstMoment=t.slice(0,e).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedSecondMoment=t.slice(e,e*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}};va.className="Adam";Pr(va);var Na=class extends lr{constructor(t,e,o,n=null,s=0){super(),this.learningRate=t,this.beta1=e,this.beta2=o,this.epsilon=n,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],z(()=>{this.iteration=nt(0).variable(),this.accBeta1=nt(e).variable()}),n==null&&(this.epsilon=k.backend.epsilon())}applyGradients(t){let e=Array.isArray(t)?t.map(o=>o.name):Object.keys(t);z(()=>{let o=tt(1,this.accBeta1),n=et(-this.learningRate,U(D(this.iteration,this.decay),1));e.forEach((s,i)=>{let a=k.registeredVariables[s],l=!1;this.accumulatedFirstMoment[i]==null&&(this.accumulatedFirstMoment[i]={originalName:`${s}/m`,variable:dt(a).variable(l)}),this.accumulatedWeightedInfNorm[i]==null&&(this.accumulatedWeightedInfNorm[i]={originalName:`${s}/v`,variable:dt(a).variable(l)});let u=Array.isArray(t)?t[i].tensor:t[s];if(u==null)return;let c=this.accumulatedFirstMoment[i].variable,p=this.accumulatedWeightedInfNorm[i].variable,m=U(D(c,this.beta1),D(u,1-this.beta1)),f=D(p,this.beta2),h=se(u),d=Mr(f,h);c.assign(m),p.assign(d);let g=U(D(et(n,o),et(m,U(d,this.epsilon))),a);a.assign(g)}),this.iteration.assign(U(this.iteration,1)),this.accBeta1.assign(D(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),this.accumulatedFirstMoment!=null&&yt(this.accumulatedFirstMoment.map(t=>t.variable)),this.accumulatedWeightedInfNorm!=null&&yt(this.accumulatedWeightedInfNorm.map(t=>t.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}};Na.className="Adamax";Pr(Na);var kn=class extends lr{constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=Array.isArray(t)?t[n].tensor:t[o];if(s==null)return;let i=k.registeredVariables[o];z(()=>{let a=U(D(this.c,s),i);i.assign(a)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,this.c!=null&&this.c.dispose(),this.c=ue(nt(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(t=await this.extractIterations(t),t.length!==0)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}};kn.className="SGD";Pr(kn);var Sa=class extends kn{constructor(t,e,o=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=o,this.accumulations=[],this.m=nt(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=k.registeredVariables[o];this.accumulations[n]==null&&(this.accumulations[n]={originalName:`${o}/momentum`,variable:z(()=>dt(s).variable(!1))});let i=this.accumulations[n].variable,a=Array.isArray(t)?t[n].tensor:t[o];a!=null&&z(()=>{let l,u=U(D(this.m,i),a);this.useNesterov?l=U(D(this.c,U(a,D(u,this.m))),s):l=U(D(this.c,u),s),i.assign(u),s.assign(l)})}),this.incrementIterations()}dispose(){this.m.dispose(),this.accumulations!=null&&yt(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=!1;this.accumulations=t.map(o=>({originalName:o.name,variable:o.tensor.variable(e)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}};Sa.className="Momentum";Pr(Sa);var Ia=class extends lr{constructor(t,e=.9,o=0,n=null,s=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=o,this.epsilon=n,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,n==null&&(this.epsilon=k.backend.epsilon()),t==null)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=k.registeredVariables[o],i=!1;this.accumulatedMeanSquares[n]==null&&(this.accumulatedMeanSquares[n]={originalName:`${o}/rms`,variable:z(()=>dt(s).variable(i))}),this.accumulatedMoments[n]==null&&(this.accumulatedMoments[n]={originalName:`${o}/momentum`,variable:z(()=>dt(s).variable(i))}),this.accumulatedMeanGrads[n]==null&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${o}/mg`,variable:z(()=>dt(s).variable(i))});let a=Array.isArray(t)?t[n].tensor:t[o];if(a==null)return;let l=this.accumulatedMeanSquares[n].variable,u=this.accumulatedMoments[n].variable;z(()=>{let c=U(D(l,this.decay),D(At(a),1-this.decay));if(this.centered){let p=this.accumulatedMeanGrads[n].variable,m=U(D(p,this.decay),D(a,1-this.decay)),f=et(D(a,this.learningRate),te(tt(c,U(At(m),this.epsilon)))),h=U(D(u,this.momentum),f);l.assign(c),p.assign(m),u.assign(h);let d=tt(s,h);s.assign(d)}else{let p=U(D(l,this.decay),D(At(a),1-this.decay)),m=U(D(u,this.momentum),et(D(a,this.learningRate),te(U(p,this.epsilon))));l.assign(p),u.assign(m);let f=tt(s,m);s.assign(f)}})}),this.incrementIterations()}dispose(){this.accumulatedMeanSquares!=null&&yt(this.accumulatedMeanSquares.map(t=>t.variable)),this.accumulatedMeanGrads!=null&&this.centered&&yt(this.accumulatedMeanGrads.map(t=>t.variable)),this.accumulatedMoments!=null&&yt(this.accumulatedMoments.map(t=>t.variable))}async getWeights(){let t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=this.centered?t.length/3:t.length/2,o=!1;this.accumulatedMeanSquares=t.slice(0,e).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedMoments=t.slice(e,e*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.centered&&(this.accumulatedMeanGrads=t.slice(e*2,e*3).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}};Ia.className="RMSProp";Pr(Ia);var qo=class{static sgd(t){return new kn(t)}static momentum(t,e,o=!1){return new Sa(t,e,o)}static rmsprop(t,e=.9,o=0,n=null,s=!1){return new Ia(t,e,o,n,s)}static adam(t=.001,e=.9,o=.999,n=null){return new va(t,e,o,n)}static adadelta(t=.001,e=.95,o=null){return new wa(t,e,o)}static adamax(t=.002,e=.9,o=.999,n=null,s=0){return new Na(t,e,o,n,s)}static adagrad(t,e=.1){return new Ca(t,e)}};var Dl={sgd:qo.sgd,momentum:qo.momentum,adadelta:qo.adadelta,adagrad:qo.adagrad,rmsprop:qo.rmsprop,adamax:qo.adamax,adam:qo.adam};var wV=(()=>typeof requestAnimationFrame!="undefined"?requestAnimationFrame:typeof setImmediate!="undefined"?setImmediate:r=>r())();function fm(){return new Promise(r=>wV(()=>r()))}var T={};qt(T,{ERF_A1:()=>DV,ERF_A2:()=>FV,ERF_A3:()=>RV,ERF_A4:()=>_V,ERF_A5:()=>OV,ERF_P:()=>AV,PARALLELIZE_THRESHOLD:()=>Gd,SELU_SCALE:()=>Lw,SELU_SCALEALPHA:()=>Ow,applyActivation:()=>$l,assertAndGetBroadcastShape:()=>It,assertAxesAreInnerMostDims:()=>t3,assertParamsConsistent:()=>CV,assignToTypedArray:()=>VV,axesAreInnerMostDims:()=>Cw,calculateShapes:()=>EP,checkEinsumDimSizes:()=>KV,checkPadOnDimRoundingMode:()=>Qt,combineLocations:()=>JN,complexWithEvenIndex:()=>zV,complexWithOddIndex:()=>MV,computeConv2DInfo:()=>yl,computeConv3DInfo:()=>UN,computeDefaultPad:()=>ww,computeDilation2DInfo:()=>rz,computeOptimalWindowSize:()=>NV,computeOutAndReduceShapes:()=>vw,computeOutShape:()=>vV,computePool2DInfo:()=>bw,computePool3DInfo:()=>oz,convertConv2DDataFormat:()=>HN,decodeEinsumEquation:()=>HV,eitherStridesOrDilationsAreOne:()=>Qe,expandShapeToKeepDim:()=>wo,exponent:()=>WV,exponents:()=>GV,fromStringArrayToUint8:()=>hG,fromUint8ToStringArray:()=>fG,getAxesPermutation:()=>Nw,getBroadcastDims:()=>AN,getComplexWithIndex:()=>BV,getEinsumComputePath:()=>jV,getEinsumPermutation:()=>qV,getFusedBiasGradient:()=>El,getFusedDyActivation:()=>kl,getImageCenter:()=>SV,getInnerMostAxes:()=>e3,getPermuted:()=>TV,getReductionAxes:()=>jt,getReshaped:()=>IV,getReshapedPermuted:()=>kV,getSliceBeginCoords:()=>EV,getSliceSize:()=>$V,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>JV,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>QV,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>tG,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>oG,getSparseReshapeInputOutputMismatchErrorMessage:()=>sG,getSparseReshapeInputOutputMultipleErrorMessage:()=>nG,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>eG,getSparseReshapeNegativeOutputDimErrorMessage:()=>rG,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>uG,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>iG,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>aG,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>lG,getUndoAxesPermutation:()=>lm,isIdentityPermutation:()=>XV,log:()=>dL,mergeRealAndImagArrays:()=>LV,prepareAndValidate:()=>TP,prepareSplitSize:()=>ZV,segment_util:()=>zw,shouldFuse:()=>Al,slice_util:()=>qe,splitRealAndImagArrays:()=>PV,tupleValuesAreOne:()=>so,upcastType:()=>Re,validateInput:()=>dw,validateUpdateShape:()=>FN,warn:()=>cn});function CV(r,t){let e=r[0].length;r.forEach((n,s)=>{E(n.length===e,()=>`Error in concat${e}D: rank of tensors[${s}] must be the same as the rank of the rest (${e})`)}),E(t>=0&&t<e,()=>`Error in concat${e}D: axis must be between 0 and ${e-1}.`);let o=r[0];r.forEach((n,s)=>{for(let i=0;i<e;i++)E(i===t||n[i]===o[i],()=>`Error in concat${e}D: Shape of tensors[${s}] (${n}) does not match the shape of the rest (${o}) along the non-concatenated axis ${s}.`)})}function vV(r,t){let e=r[0].slice();for(let o=1;o<r.length;o++)e[t]+=r[o][t];return e}var Gd=30;function NV(r){return r<=Gd?r:uu(r,Math.floor(Math.sqrt(r)))}function SV(r,t,e){let o=e*(typeof r=="number"?r:r[0]),n=t*(typeof r=="number"?r:r[1]);return[o,n]}function IV(r,t,e,o=!0){let n=[];if(o)n=n.concat(t.slice(0)),n.push(r[0]/e),n=n.concat(r.slice(1));else{n=n.concat(r[0]);let s=t.length;for(let i=0;i<s;++i)n=n.concat([r[i+1]/t[i],t[i]]);n=n.concat(r.slice(s+1))}return n}function TV(r,t,e=!0){let o=[];if(e){o.push(t);for(let n=t+1;n<r;++n)n<=2*t?(o.push(n),o.push(n-(t+1))):o.push(n)}else{let n=[],s=[];for(let i=1;i<r;++i)i>=t*2+1||i%2===1?s.push(i):n.push(i);o.push(...n),o.push(0),o.push(...s)}return o}function kV(r,t,e,o=!0){let n=[];o?n.push(r[0]/e):n.push(r[0]*e);for(let s=1;s<r.length;++s)s<=t.length?o?n.push(t[s-1]*r[s]):n.push(r[s]/t[s-1]):n.push(r[s]);return n}function EV(r,t){let e=[0];for(let o=0;o<t;++o)e.push(r[o][0]);return e}function $V(r,t,e){let o=r.slice(0,1);for(let n=0;n<e;++n)o.push(r[n+1]-t[n][0]-t[n][1]);return o}var Ow=1.7580993408473768,Lw=1.0507009873554805;var AV=.3275911,DV=.254829592,FV=-.284496736,RV=1.421413741,_V=-1.453152027,OV=1.061405429;function LV(r,t){if(r.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${r.length}, imag: ${t.length}.`);let e=new Float32Array(r.length*2);for(let o=0;o<e.length;o+=2)e[o]=r[o/2],e[o+1]=t[o/2];return e}function PV(r){let t=new Float32Array(r.length/2),e=new Float32Array(r.length/2);for(let o=0;o<r.length;o+=2)t[o/2]=r[o],e[o/2]=r[o+1];return{real:t,imag:e}}function zV(r){let t=Math.ceil(r.length/4),e=new Float32Array(t),o=new Float32Array(t);for(let n=0;n<r.length;n+=4)e[Math.floor(n/4)]=r[n],o[Math.floor(n/4)]=r[n+1];return{real:e,imag:o}}function MV(r){let t=Math.floor(r.length/4),e=new Float32Array(t),o=new Float32Array(t);for(let n=2;n<r.length;n+=4)e[Math.floor(n/4)]=r[n],o[Math.floor(n/4)]=r[n+1];return{real:e,imag:o}}function BV(r,t){let e=r[t*2],o=r[t*2+1];return{real:e,imag:o}}function VV(r,t,e,o){r[o*2]=t,r[o*2+1]=e}function GV(r,t){let e=new Float32Array(r/2),o=new Float32Array(r/2);for(let n=0;n<Math.ceil(r/2);n++){let s=(t?2:-2)*Math.PI*(n/r);e[n]=Math.cos(s),o[n]=Math.sin(s)}return{real:e,imag:o}}function WV(r,t,e){let o=(e?2:-2)*Math.PI*(r/t),n=Math.cos(o),s=Math.sin(o);return{real:n,imag:s}}var Pw="->",UV=/->/g,II=",",TI="...";function HV(r,t){r=r.replace(/\s/g,"");let e=(r.length-r.replace(UV,"").length)/Pw.length;if(e<1)throw new Error("Equations without an arrow are not supported.");if(e>1)throw new Error(`Equation must contain exactly one arrow ("${Pw}").`);let[o,n]=r.split(Pw);E(o.indexOf(TI)===-1,()=>`The ellipsis notation ("${TI}") is not supported yet.`);let s=o.split(II),i=s.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");let a=[];for(let m=0;m<n.length;++m){let f=n[m];if(!s.some(h=>h.indexOf(f)!==-1))throw new Error(`Output subscripts contain the label ${f} not present in the input subscripts.`);a.indexOf(f)===-1&&a.push(f)}for(let m=0;m<o.length;++m){let f=o[m];a.indexOf(f)===-1&&f!==II&&a.push(f)}let l=new Array(s.length);for(let m=0;m<i;++m){if(new Set(s[m].split("")).size!==s[m].length)throw new Error(`Found duplicate axes in input component ${s[m]}. Support for duplicate axes in input is not implemented yet.`);l[m]=[];for(let f=0;f<s[m].length;++f)l[m].push(a.indexOf(s[m][f]))}let u=a.length,c=n.length,p=[];for(let m=c;m<u;++m)p.push(m);return{allDims:a,summedDims:p,idDims:l}}function qV(r,t){let e=new Array(r);e.fill(-1);for(let n=0;n<t.length;++n)e[t[n]]=n;let o=[];for(let n=0;n<r;++n)e[n]===-1&&o.push(n);return e=e.filter(n=>n!==-1),{permutationIndices:e,expandDims:o}}function KV(r,t,e){let o=new Array(r);for(let n=0;n<e.length;++n){let s=e[n].shape;for(let i=0;i<t[n].length;++i)o[t[n][i]]===void 0?o[t[n][i]]=s[i]:E(o[t[n][i]]===s[i],()=>`Expected dimension ${o[t[n][i]]} at axis ${i} of input shaped ${JSON.stringify(s)}, but got dimension ${s[i]}`)}}function jV(r,t){let e=r,o=[],n=0;r.length===0&&e.push(-1),n=r.length+1;for(let i=0;i<n;++i)o.push([]);let s=[];for(let i=0;i<e.length;++i){let a=e[i],l=YV(t,a);for(let u of l)s.indexOf(u)===-1&&(o[i].push(u),s.push(u))}return{path:e,steps:o}}function XV(r){return r.every((t,e)=>t===e)}function YV(r,t){let e=[];for(let o=0;o<r.length;++o)(r[o].length===0||r[o].indexOf(t)!==-1||t===-1)&&e.push(o);return e}function ZV(r,t,e=0){let o=[];if(typeof t=="number")E(r.shape[e]%t===0,()=>"Number of splits must evenly divide the axis."),o=new Array(t).fill(r.shape[e]/t);else{let n=t.reduce((i,a)=>(a===-1&&(i+=1),i),0);E(n<=1,()=>"There should be only one negative value in split array.");let s=t.indexOf(-1);if(s!==-1){let i=t.reduce((a,l)=>l>0?a+l:a);t[s]=r.shape[e]-i}E(r.shape[e]===t.reduce((i,a)=>i+a),()=>"The sum of sizes must match the size of the axis dimension."),o=t}return o}function JV(r){return`Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${r}`}function QV(r,t){return`indices(${r}, 0) is invalid: ${t} < 0`}function tG(r,t,e){return`indices(${r}, 0) is invalid: ${t} >= ${e}`}function eG(r,t){return`only one output dimension may be -1, not both ${r} and ${t}`}function rG(r,t){return`size ${r} must be non-negative, not ${t}`}function oG(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function nG(r,t){let e=Ot(r),o=Ot(t);return`Input to reshape is a SparseTensor with ${e}
  dense values, but the requested shape requires a multiple of ${o}. inputShape=${r} outputShape= ${t}`}function sG(r,t){let e=Ot(r),o=Ot(t);return`Input to reshape is a tensor with ${e} dense values, but the requested shape has ${o}. inputShape=${r} outputShape=${t}`}function iG(){return"segment ids must be >= 0"}function aG(){return"segment ids are not increasing"}function lG(r,t){return`Segment id ${r} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function uG(r,t,e){return`Bad: indices[${r}] == ${t} out of range [0, ${e})`}var zw={};qt(zw,{collectGatherOpShapeInfo:()=>mG,computeOutShape:()=>pG,segOpComputeOptimalWindowSize:()=>cG});function cG(r,t){let e=!1,o;for(r<=Gd?(o=r,e=!0):o=uu(r,Math.floor(Math.sqrt(r)));!e;)o>t||o===r?e=!0:o=uu(r,o+1);return o}function pG(r,t,e){let o=[],n=r.length;for(let s=0;s<n;s++)s!==t?o.push(r[s]):o.push(e);return o}function mG(r,t,e,o){let n=t.shape.length,s=r.shape.length;if(o!==0&&(o<-n||o>n))throw new Error(`Expect batchDims in the range of [-${n}, ${n}], but got ${o}`);if(o<0&&(o+=n),o>s)throw new Error(`batchDims (${o}) must be less than rank(x) (
    ${s}).`);if(e<o)throw new Error(`batchDims (${o}) must be less than or equal to axis (${e}).`);for(let p=0;p<o;++p)if(r.shape[p]!==t.shape[p])throw new Error(`x.shape[${p}]: ${r.shape[p]} should be equal to indices.shape[${p}]: ${t.shape[p]}.`);let i=r.shape[e],a=[],l=1,u=1,c=1;for(let p=0;p<o;++p)a.push(r.shape[p]),l*=r.shape[p];for(let p=o;p<e;p++)a.push(r.shape[p]),u*=r.shape[p];for(let p=o;p<n;p++)a.push(t.shape[p]);for(let p=e+1;p<s;p++)a.push(r.shape[p]),c*=r.shape[p];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:a}}function fG(r){try{return r.map(t=>hc(t))}catch(t){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`)}}function hG(r){return r.map(t=>ml(t))}var ur={};qt(ur,{nonMaxSuppressionV3Impl:()=>Pd,nonMaxSuppressionV4Impl:()=>zd,nonMaxSuppressionV5Impl:()=>Md,whereImpl:()=>Dd});var Wd={kernelName:si,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>D(r,Co(q(e,"float32"),-1))}}};var kI={kernelName:Bn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>{let o=At(q(e,"float32")),n=te(tt(nt(1),o));return Rt(et(r,n))}}}};var EI={kernelName:Vn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>{let o=te(tt(At(q(e,"float32")),1));return et(r,o)}}}};var $I={kernelName:Bo,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=It(e.shape,o.shape);return{a:()=>{let a=r,l=jt(e.shape,n);return l.length>0&&(a=st(a,l)),F(a,e.shape)},b:()=>{let a=r,l=jt(o.shape,n);return l.length>0&&(a=st(a,l)),F(a,o.shape)}}}};var AI={kernelName:ii,saveAllInputs:!0,gradFunc:(r,t)=>{let e={};return t.forEach((o,n)=>{e[n]=()=>r.clone()}),e}};var DI={kernelName:ai,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>dt(e)}}};var FI={kernelName:li,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>dt(e)}}};var RI={kernelName:Gn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>et(r,te(tt(nt(1),At(q(e,"float32")))))}}};var _I={kernelName:Wn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>{let o=te(U(nt(1),At(q(e,"float32"))));return et(r,o)}}}};var OI={kernelName:qn,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=It(e.shape,o.shape);return{a:()=>{let a=U(At(e),At(o)),l=D(r,et(o,a)),u=jt(e.shape,n);return u.length>0&&(l=st(l,u)),F(l,e.shape)},b:()=>{let a=U(At(e),At(o)),l=Rt(D(r,et(e,a))),u=jt(o.shape,n);return u.length>0&&(l=st(l,u)),F(l,o.shape)}}}};var LI={kernelName:Un,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>et(r,U(At(q(e,"float32")),1))}}};var PI={kernelName:Hn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>et(r,tt(nt(1),At(q(e,"float32"))))}}};function dG(r,t,e,o,n,s){let i=N(r,"dy","avgPool3dGrad"),a=N(t,"input","avgPool3dGrad"),l=i,u=a,c=!1;a.rank===4&&(c=!0,l=F(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),u=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),E(l.rank===5,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`),E(u.rank===5,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`),Qt("avgPool3dGrad",n,s);let p={dy:l,input:u},m={filterSize:e,strides:o,pad:n,dimRoundingMode:s},f=k.runKernel(hu,p,m);return c?F(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}var zI=S({avgPool3dGrad_:dG});var MI={kernelName:ci,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{filterSize:n,strides:s,pad:i,dimRoundingMode:a}=e;return{x:()=>zI(r,o,n,s,i,a)}}};function gG(r,t,e,o,n){let s=N(r,"dy","avgPoolGrad"),i=N(t,"input","avgPoolGrad");E(i.rank===s.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${s.rank})`);let a=i,l=s,u=!1;i.rank===3&&(u=!0,a=F(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=F(s,[1,s.shape[0],s.shape[1],s.shape[2]])),E(l.rank===4,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),E(a.rank===4,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${a.rank}.`);let c={dy:l,input:a},p={filterSize:e,strides:o,pad:n},m=k.runKernel(fu,c,p);return u?F(m,[m.shape[1],m.shape[2],m.shape[3]]):m}var BI=S({avgPoolGrad_:gG});var VI={kernelName:ui,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{filterSize:n,strides:s,pad:i}=e;return{x:()=>BI(r,o,n,s,i)}}};var GI={kernelName:pi,inputsToSave:["a","b"],gradFunc:(r,t,e)=>{let[o,n]=t,{transposeA:s,transposeB:i}=e;return!s&&!i?{a:()=>kt(r,n,!1,!0),b:()=>kt(o,r,!0,!1)}:!s&&i?{a:()=>kt(r,n,!1,!1),b:()=>kt(r,o,!0,!1)}:s&&!i?{a:()=>kt(n,r,!1,!0),b:()=>kt(o,r,!1,!1)}:{a:()=>kt(n,r,!0,!0),b:()=>kt(r,o,!0,!0)}}};var WI={kernelName:mi,gradFunc:(r,t,e)=>{let{blockShape:o,crops:n}=e;return{x:()=>fa(r,o,n)}}};var UI={kernelName:Nv,gradFunc:(r,t,e)=>{let o=e,n=o.inputShape,s=o.shape,i=Array.from(s);for(let l=n.length-1;l>=0;l--)if(n[l]===s[l])i[l]=1;else if(n[l]!==1)throw new Error(`broadcastTo(): [${n}] cannot be broadcast to [${s}].`);let a=[];for(let l=0;l<i.length;l++)i[l]>1&&a.push(l);return{x:()=>st(r,a,!0)}}};var HI={kernelName:sn,gradFunc:r=>({x:()=>r.clone()})};var qI={kernelName:Kn,gradFunc:r=>({x:()=>dt(r)})};var KI={kernelName:jn,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{clipValueMin:n,clipValueMax:s}=e;return{x:()=>le(ir(Kr(o,n),jr(o,s)),r,dt(r))}}};var jI={kernelName:fi,inputsToSave:["x"],gradFunc:Wd.gradFunc};var XI={kernelName:hi,saveAllInputs:!0,gradFunc:(r,t,e)=>{let o=t.map(l=>l.shape),{axis:n}=e,s=Le(n,t[0].shape)[0],i=o.map(l=>l[s]);return Ve(r,i,s).map(l=>()=>l)}};var YI={kernelName:di,inputsToSave:["x","filter"],gradFunc:(r,t,e)=>{let[o,n]=t,{dilations:s,strides:i,pad:a,dataFormat:l}=e;return E(so(s),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`),{x:()=>Ic(o.shape,r,n,i,a,l),filter:()=>qc(o,r,n.shape,i,a,l)}}};var ZI={kernelName:gi,inputsToSave:["dy","filter"],gradFunc:(r,t,e)=>{let[o,n]=t,{strides:s,pad:i,dataFormat:a,dimRoundingMode:l}=e;return{dy:()=>zr(r,n,s,i,a,1,l),filter:()=>qc(r,o,n.shape,s,i,a,l)}}};function xG(r,t,e,o,n){let s=r;r.rank===4&&(s=F(r,[1,r.shape[0],r.shape[1],r.shape[2],r.shape[3]]));let i=t;i.rank===4&&(i=F(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),E(s.rank===5,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${s.shape}.`),E(i.rank===5,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`),E(e.length===5,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${e}.`),E(s.shape[4]===e[3],()=>`Error in conv3dDerFilter: depth of input ${s.shape[4]}) must match input depth in filter (${e[3]}.`),E(i.shape[4]===e[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${e[4]}).`);let a={x:s,dy:i},l={strides:o,pad:n,filterShape:e};return k.runKernel(bu,a,l)}var JI=S({conv3DBackpropFilter_:xG});var QI={kernelName:xi,inputsToSave:["x","filter"],gradFunc:(r,t,e)=>{let{dilations:o,strides:n,pad:s}=e;E(so(o),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`);let[i,a]=t;return{x:()=>Jh(i.shape,r,a,n,s),filter:()=>JI(i,r,a.shape,n,s)}}};var tT={kernelName:Xn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>D(Rt(zc(q(e,"float32"))),r)}}};var eT={kernelName:Yn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>D(Mc(q(e,"float32")),r)}}};var rT={kernelName:yi,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{axis:n,exclusive:s,reverse:i}=e;return{x:()=>{let a=Nw([n],o.rank),l=Ec(r,n,s,!i);return a!=null&&(l=St(l,a)),l}}}};var oT={kernelName:bi,inputsToSave:["x","filter"],gradFunc:(r,t,e)=>{let{dilations:o,strides:n,pad:s,dimRoundingMode:i}=e,a=o==null?[1,1]:o;E(so(a),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);let[l,u]=t;return E(l.rank===4,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),E(u.rank===4,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),E(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),E(Qe(n,a),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${n} and dilations '${a}'.`),Qt("depthwiseConv2d",s,i),{x:()=>_d(l.shape,r,u,n,s,a,i),filter:()=>Rd(l,r,u.shape,n,s,a,i)}}};var nT={kernelName:wi,inputsToSave:["x","filter"],gradFunc:(r,t,e)=>{let[o,n]=t,s={x:o,filter:n,dy:r},i={x:o,filter:n,dy:r};return{x:()=>k.runKernel(Xp,s,e),filter:()=>k.runKernel(Yp,i,e)}}};var sT={kernelName:Jn,outputsToSave:[!0],gradFunc:(r,t)=>{let[e]=t,o={dy:r,y:e};return{x:()=>k.runKernel($u,o)}}};var iT={kernelName:Qn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t,o=D(Ae(Rt(At(e))),2/Math.sqrt(Math.PI));return{x:()=>D(r,o)}}};var aT={kernelName:ts,outputsToSave:[!0],gradFunc:(r,t)=>{let[e]=t;return{x:()=>D(r,e)}}};var lT={kernelName:Ci,inputsToSave:["input"],gradFunc:(r,t)=>{let[e]=t;return{input:()=>F(r,e.shape)}}};var uT={kernelName:es,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>D(r,Ae(e))}}};var cT={kernelName:rs,gradFunc:r=>({x:()=>dt(r)})};var pT={kernelName:os,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=It(e.shape,o.shape);return{a:()=>{let a=et(r,q(o,"float32")),l=jt(e.shape,n);return l.length>0?F(st(a,l),e.shape):a},b:()=>{let a=D(r,q(e,"float32")),l=jt(o.shape,n);l.length>0&&(a=F(st(a,l),o.shape));let u=At(o);return Rt(et(a,q(u,"float32")))}}}};var mT={kernelName:vi,inputsToSave:["x","mean","variance","scale"],gradFunc:(r,t,e)=>{let{varianceEpsilon:o}=e,[n,s,i,a]=t,l=a==null?nt(1):a,u=jt(s.shape,n.shape),c=[];if(s.rank===1){for(let C=0;C<n.shape.length-1;++C)c.push(n.shape[C]);c.push(1)}let p=tt(n,s),m=D(r,l),f=Oc(U(i,nt(o))),h=D(D(D(f,f),f),nt(-.5));return{x:()=>s.rank===1?F(D(D(r,tr(F(f,[1,1,1,s.shape[0]]),c)),l),n.shape):F(D(D(r,f),l),n.shape),mean:()=>{let C=D(D(f,nt(-1)),m);return s.rank===1&&(C=st(C,u)),F(C,s.shape)},variance:()=>{let C=D(D(h,p),m);return s.rank===1&&(C=st(C,u)),F(C,s.shape)},scale:()=>{let C=D(p,f),I=D(r,C);return s.rank===1&&(I=st(I,u)),F(I,s.shape)},offset:()=>{let C=r;return s.rank===1&&(C=st(C,u)),F(C,s.shape)}}}};var dT={kernelName:Ni,inputsToSave:["x","indices"],gradFunc:(r,t,e)=>{let[o,n]=t,{axis:s}=e,i=Le(s,o.shape)[0];return{x:()=>{let l=o.shape,u=n.size,c=l.slice(0,i),p=c.length,m=l.slice(s,l.length).slice(1),f=m.length,h=fT(0,p),d=fT(p+1,p+1+f),g=hT([c,[u],m]),y=F(r,g),b=F(n,[u]),w=hT([[p],h,d]),C=St(y,w),I=Hc(C,b,o.shape[i]),$=lm(w);return I=St(I,$),I},indices:()=>n}}};function fT(r,t){let e=[];for(let o=r;o<t;++o)e.push(o);return e}function hT(r){let t=[];for(let e=0;e<r.length;++e)for(let o=0;o<r[e].length;++o)t.push(r[e][o]);return t}var gT={kernelName:ns,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t;return{a:()=>dt(e),b:()=>dt(o)}}};var xT={kernelName:an,gradFunc:r=>({x:()=>q(r,"float32")})};var yT={kernelName:ss,gradFunc:r=>({x:()=>dt(r)})};var bT={kernelName:is,gradFunc:r=>({x:()=>dt(r)})};var wT={kernelName:as,gradFunc:r=>({x:()=>dt(r)})};var CT={kernelName:Si,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{alpha:n}=e,s=Se(o,0);return{x:()=>le(s,r,D(r,n))}}};var vT={kernelName:us,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>et(r,U(e,1))}}};var NT={kernelName:ls,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>et(r,q(e,"float32"))}}};var ST={kernelName:Sv,inputsToSave:[],outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o]=t,{axis:n}=e;return{logits:()=>{let i=Ae(o);return tt(r,D(st(r,n,!0),i))}}}};function yG(r,t,e,o=5,n=1,s=1,i=.5){let a={x:r,y:t,dy:e},l={depthRadius:o,bias:n,alpha:s,beta:i};return k.runKernel(Pu,a,l)}var IT=S({localResponseNormalizationBackprop_:yG});var TT={kernelName:Ii,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o,n]=t,{depthRadius:s,bias:i,alpha:a,beta:l}=e;return{x:()=>IT(o,n,r,s,i,a,l)}}};function Ud(r,t,e,o){return t.rank<e.rank&&(t=F(t,wo(t.shape,o))),r.rank<e.rank&&(r=F(r,wo(r.shape,o))),{x:()=>D(r,q(hr(e,t),r.dtype))}}var Mw={kernelName:Ti,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let o=e,{reductionIndices:n}=o,s=t[0],i=t[1],a=Le(n,s.shape),l=Ud(r,i,s,a);return{x:()=>l.x()}}};var kT={kernelName:cs,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t;return{a:()=>D(r,q(Kr(e,o),"float32")),b:()=>D(r,q($c(e,o),"float32"))}}};function bG(r,t,e,o,n,s,i){let a=N(r,"dy","maxPool3dGrad"),l=N(t,"input","maxPool3dGrad"),u=N(e,"output","maxPool3dGrad"),c=a,p=l,m=u,f=!1;l.rank===4&&(f=!0,c=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]]),p=F(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),m=F(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),E(c.rank===5,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`),E(p.rank===5,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`),E(m.rank===5,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${m.rank}.`),Qt("maxPool3dGrad",s,i);let h={dy:c,input:p,output:m},d={filterSize:o,strides:n,pad:s,dimRoundingMode:i},g=k.runKernel(Mu,h,d);return f?F(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}var ET=S({maxPool3dGrad_:bG});var $T={kernelName:Ei,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o,n]=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=e;return{x:()=>ET(r,o,n,s,i,a,l)}}};function wG(r,t,e,o,n,s,i){let a=N(r,"dy","maxPoolGrad"),l=N(t,"input","maxPoolGrad"),u=N(e,"output","maxPoolGrad");E(l.rank===a.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${a.rank})`),E(a.rank===4,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${a.rank}.`),E(l.rank===4,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),Qt("maxPoolGrad",s,i);let c={dy:a,input:l,output:u},p={filterSize:o,strides:n,pad:s,dimRoundingMode:i};return k.runKernel(zu,c,p)}var AT=S({maxPoolGrad_:wG});var DT={kernelName:ki,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o,n]=t,{filterSize:s,strides:i,pad:a}=e;return{x:()=>AT(r,o,n,s,i,a)}}};var FT={kernelName:$i,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{axis:n}=e,s=Le(n,o.shape),a=vw(o.shape,s)[1],l=Ot(a);return{x:()=>{let c=o.shape.slice();s.forEach(f=>{c[f]=1});let p=F(r,c);return et(D(p,Me(o.shape,"float32")),l)}}}};var RT={kernelName:Ai,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let o=e,{axis:n}=o,[s,i]=t,a=Le(n,s.shape),l=Ud(r,i,s,a);return{x:()=>l.x()}}};var _T={kernelName:ps,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t;return{a:()=>D(r,q(jr(e,o),"float32")),b:()=>D(r,q(Se(e,o),"float32"))}}};var OT={kernelName:Di,inputsToSave:["x"],gradFunc:(r,t,e)=>{let o=t[0],{paddings:n}=e,s=n.map(i=>i[0]);return{x:()=>Ct(r,s,o.shape)}}};var LT={kernelName:ms,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=It(e.shape,o.shape);return{a:()=>{let a=jt(e.shape,n);return a.length>0?F(st(r,a),e.shape):r},b:()=>{let a=D(r,Rt(Nn(et(e,o)))),l=jt(o.shape,n);return l.length>0?F(st(a,l),o.shape):a}}}};var PT={kernelName:fs,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=It(e.shape,o.shape);return{a:()=>{let a=D(r,q(o,"float32")),l=jt(e.shape,n);return l.length>0?F(st(a,l),e.shape):a},b:()=>{let a=D(r,q(e,"float32")),l=jt(o.shape,n);return l.length>0?F(st(a,l),o.shape):a}}}};var zT={kernelName:Fi,gradFunc:r=>({x:()=>Rt(r)})};var MT={kernelName:_i,inputsToSave:["indices"],gradFunc:(r,t)=>{let e=t[0];return{indices:()=>re(e.shape,"float32")}}};var BT={kernelName:Ri,gradFunc:r=>({x:()=>dt(r)})};var VT={kernelName:Oi,saveAllInputs:!0,gradFunc:(r,t,e)=>{let{axis:o}=e;return je(r,o).map(s=>()=>s)}};var Bw={kernelName:Li,inputsToSave:["x"],gradFunc:(r,t,e)=>{let o=t[0],{paddings:n}=e,s=n.map(i=>i[0]);return{x:()=>Ct(r,s,o.shape)}}};var GT={kernelName:hs,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(r,t)=>{let[e,o,n]=t,s=e,i=o,a=It(s.shape,i.shape);return{a:()=>{let c=q(i,"float32"),p=D(r,D(c,Sr(s,tt(c,nt(1))))),m=jt(s.shape,a);return m.length>0&&(p=st(p,m)),F(p,s.shape)},b:()=>{let c=Se(s,0),p=le(c,Ke(s),dt(s)),m=D(r,D(n,p)),f=jt(i.shape,a);return f.length>0&&(m=st(m,f)),F(m,i.shape)}}}};var WT={kernelName:Pi,inputsToSave:["x","alpha"],gradFunc:(r,t)=>{let[e,o]=t,n=Se(e,0);return{x:()=>le(n,r,D(r,o)),alpha:()=>{let s=le(n,dt(r),D(r,e)),i=jt(o.shape,r.shape);return i.length>0&&(s=st(s,i)),F(s,o.shape)}}}};function CG(r,t,e){let o=r.shape.slice();o[e]=1;let n=F(t,o),s=bl(r,e,!0,!1),i=bl(r,e,!0,!0),a=D(s,i);return D(n,a)}function vG(r,t,e){let o=r.shape.length,n=o-e.length,s=T.getAxesPermutation(e,o),i=r;s!=null&&(i=St(r,s));let a=i.shape.slice(),u=a.splice(o-e.length,e.length).reduce((m,f)=>m*f,1);a.push(u);let c=i.reshape(a),p=CG(c,t,n);if(p=p.reshape(i.shape),s!=null){let m=T.getUndoAxesPermutation(s);p=St(p,m)}return p}var UT={kernelName:zi,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{axis:n}=e,s=[];return n==null?s=o.shape.map((i,a)=>a):typeof n=="number"?s=[n]:s=n,{x:()=>vG(o,r,s)}}};var HT={kernelName:Zn,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=It(e.shape,o.shape);return{a:()=>{let a=et(r,q(o,"float32")),l=jt(e.shape,n);return l.length>0?F(st(a,l),e.shape):a},b:()=>{let a=D(r,q(e,"float32")),l=jt(o.shape,n);l.length>0&&(a=F(st(a,l),o.shape));let u=At(o);return Rt(et(a,q(u,"float32")))}}}};var qT={kernelName:ds,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>et(r,Rt(At(e)))}}};var KT={kernelName:xs,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t,o=D(jr(e,6),Co(e));return{x:()=>D(r,q(o,"float32"))}}};var jT={kernelName:gs,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>D(r,q(Co(e),"float32"))}}};var XT={kernelName:Mi,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>F(r,e.shape)}}};var YT={kernelName:Vi,inputsToSave:["images"],gradFunc:(r,t,e)=>{let[o]=t,n={dy:r,images:o};return{images:()=>k.runKernel(ju,n,e)}}};var ZT={kernelName:Bi,inputsToSave:["images"],gradFunc:(r,t,e)=>{let[o]=t,n={dy:r,images:o};return{images:()=>k.runKernel(Ku,n,e)}}};var JT={kernelName:Gi,gradFunc:(r,t,e)=>{let{dims:o}=e,n=Le(o,r.shape);return{x:()=>Be(r,n)}}};var QT={kernelName:ys,gradFunc:r=>({x:()=>dt(r)})};var tk={kernelName:bs,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>Rt(et(r,D(Sr(e,1.5),2)))}}};var ek={kernelName:Wi,inputsToSave:["condition"],gradFunc:(r,t)=>{let[e]=t;return{condition:()=>q(dt(e),"float32"),t:()=>D(r,q(e,r.dtype)),e:()=>D(r,q(pa(e),r.dtype))}}};var rk={kernelName:ws,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>{let o=Se(e,nt(0)),n=nt(Ow),s=nt(Lw),i=D(r,s),a=D(D(r,n),Ae(q(e,"float32")));return le(o,i,a)}}}};var ok={kernelName:Ss,outputsToSave:[!0],gradFunc:(r,t)=>{let[e]=t;return{x:()=>D(r,D(e,tt(nt(1),e)))}}};var nk={kernelName:Ns,gradFunc:r=>({x:()=>dt(r)})};var sk={kernelName:Cs,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>D(la(q(e,"float32")),r)}}};var ik={kernelName:vs,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>D(kc(q(e,"float32")),r)}}};var ak={kernelName:Ui,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{begin:n,size:s}=e,i=o.shape,[a,l]=xw(o,n,s),u=[];for(let c=0;c<r.rank;c++)u.push([a[c],i[c]-a[c]-l[c]]);return{x:()=>Tr(r,u)}}};var lk={kernelName:ji,outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o]=t,{dim:n}=e,s=!0,i=D(r,o);return{logits:()=>tt(i,D(st(i,[n],s),o))}}};var uk={kernelName:Is,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>D(r,fr(e))}}};var Vw={kernelName:qi,gradFunc:(r,t,e)=>{let{blockShape:o,paddings:n}=e;return{x:()=>ia(r,o,n)}}};var Gw={kernelName:Ki,gradFunc:(r,t,e)=>{let{axis:o}=e;return{x:()=>Bt(r,o)}}};var ck={kernelName:Ts,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>et(r,D(te(q(e,"float32")),2))}}};var pk={kernelName:rc,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>D(r,D(q(e,"float32"),2))}}};var mk={kernelName:ks,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=nt(2);return{a:()=>D(r,D(n,tt(e,o))),b:()=>D(r,D(n,tt(o,e)))}}};var fk={kernelName:Ds,gradFunc:r=>({x:()=>dt(r)})};var hk={kernelName:Es,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=It(e.shape,o.shape);return{a:()=>{let a=r,l=jt(e.shape,n);return l.length>0&&(a=st(a,l)),F(a,e.shape)},b:()=>{let a=r,l=jt(o.shape,n);return l.length>0&&(a=st(a,l)),F(Rt(a),o.shape)}}}};var dk={kernelName:Hi,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,n=o.shape.slice(),{axis:s}=e;Le(s,o.shape).forEach(u=>{n[u]=1});let a=F(r,n),l=D(a,Me(o.shape,"float32"));return{x:()=>l}}};var gk={kernelName:$s,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>et(r,At(la(e)))}}};var xk={kernelName:As,outputsToSave:[!0],gradFunc:(r,t)=>{let[e]=t;return{x:()=>D(tt(nt(1),At(e)),r)}}};var yk={kernelName:ln,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{reps:n}=e;return{x:()=>{let i=dt(o);if(o.rank===1)for(let a=0;a<n[0];++a)i=U(i,Ct(r,[a*o.shape[0]],[o.shape[0]]));else if(o.rank===2)for(let a=0;a<n[0];++a)for(let l=0;l<n[1];++l)i=U(i,Ct(r,[a*o.shape[0],l*o.shape[1]],[o.shape[0],o.shape[1]]));else if(o.rank===3)for(let a=0;a<n[0];++a)for(let l=0;l<n[1];++l)for(let u=0;u<n[2];++u)i=U(i,Ct(r,[a*o.shape[0],l*o.shape[1],u*o.shape[2]],[o.shape[0],o.shape[1],o.shape[2]]));else if(o.rank===4)for(let a=0;a<n[0];++a)for(let l=0;l<n[1];++l)for(let u=0;u<n[2];++u)for(let c=0;c<n[3];++c)i=U(i,Ct(r,[a*o.shape[0],l*o.shape[1],u*o.shape[2],c*o.shape[3]],[o.shape[0],o.shape[1],o.shape[2],o.shape[3]]));else throw new Error(`Gradient for tile operation is not implemented for rank-${o.rank} tensors yet.`);return i}}}};var bk={kernelName:un,gradFunc:(r,t,e)=>{let o=e,{perm:n}=o,s=lm(n);return{x:()=>St(r,s)}}};var wk={kernelName:Xi,gradFunc:(r,t,e)=>{let o=e,{axis:n}=o;return{value:()=>De(r,n)}}};var Ck={kernelName:Yi,inputsToSave:["segmentIds"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>NG(r,e)}}};function NG(r,t){let e=Mr(t,dt(t)),o=Sn(r,e),n=Kr(t,nt(0,"int32")),s=o.rank-n.rank;for(let a=0;a<s;++a)n=ze(n,a+1);n=ir(n,Me(o.shape,"bool"));let i=dt(o);return le(n,o,i)}var vk={kernelName:Zi,gradFunc:r=>({x:()=>dt(r)})};var SG=[Wd,kI,EI,$I,AI,DI,FI,RI,_I,OI,LI,PI,MI,VI,GI,WI,UI,HI,qI,KI,jI,XI,ZI,YI,QI,tT,eT,rT,oT,nT,HT,sT,iT,aT,lT,uT,pT,cT,mT,dT,gT,xT,yT,bT,wT,CT,vT,NT,ST,TT,Mw,Mw,kT,$T,DT,FT,RT,_T,OT,LT,PT,zT,MT,BT,VT,Bw,Bw,GT,WT,UT,qT,KT,jT,XT,YT,ZT,JT,QT,tk,ek,rk,ok,nk,sk,ik,ak,lk,uk,Vw,Vw,Gw,Gw,ck,mk,pk,fk,hk,dk,gk,xk,yk,bk,wk,Ck,vk];for(let r of SG)Tv(r);R().prototype.abs=function(){return this.throwIfDisposed(),se(this)};R().prototype.acos=function(){return this.throwIfDisposed(),Fh(this)};R().prototype.acosh=function(){return this.throwIfDisposed(),Rh(this)};R().prototype.add=function(r){return this.throwIfDisposed(),U(this,r)};R().prototype.all=function(r,t){return this.throwIfDisposed(),vc(this,r,t)};R().prototype.any=function(r,t){return this.throwIfDisposed(),gl(this,r,t)};R().prototype.argMax=function(r){return this.throwIfDisposed(),xn(this,r)};R().prototype.argMin=function(r){return this.throwIfDisposed(),_h(this,r)};R().prototype.asScalar=function(){return this.throwIfDisposed(),E(this.size===1,()=>"The array must have only 1 element."),F(this,[])};R().prototype.asType=function(r){return this.throwIfDisposed(),q(this,r)};R().prototype.as1D=function(){return this.throwIfDisposed(),F(this,[this.size])};R().prototype.as2D=function(r,t){return this.throwIfDisposed(),F(this,[r,t])};R().prototype.as3D=function(r,t,e){return this.throwIfDisposed(),F(this,[r,t,e])};R().prototype.as4D=function(r,t,e,o){return this.throwIfDisposed(),F(this,[r,t,e,o])};R().prototype.as5D=function(r,t,e,o,n){return this.throwIfDisposed(),F(this,[r,t,e,o,n])};R().prototype.asin=function(){return this.throwIfDisposed(),Oh(this)};R().prototype.asinh=function(){return this.throwIfDisposed(),Lh(this)};R().prototype.atan=function(){return this.throwIfDisposed(),Ph(this)};R().prototype.atan2=function(r){return this.throwIfDisposed(),zh(this,r)};R().prototype.atanh=function(){return this.throwIfDisposed(),Mh(this)};R().prototype.avgPool=function(r,t,e,o){return this.throwIfDisposed(),sa(this,r,t,e,o)};R().prototype.batchToSpaceND=function(r,t){return this.throwIfDisposed(),ia(this,r,t)};R().prototype.batchNorm=function(r,t,e,o,n){return this.throwIfDisposed(),bn(this,r,t,e,o,n)};R().prototype.broadcastTo=function(r){return this.throwIfDisposed(),aa(this,r)};R().prototype.cast=function(r){return this.throwIfDisposed(),q(this,r)};R().prototype.ceil=function(){return this.throwIfDisposed(),qh(this)};R().prototype.clipByValue=function(r,t){return this.throwIfDisposed(),Pe(this,r,t)};R().prototype.concat=function(r,t){return this.throwIfDisposed(),r instanceof Dt&&(r=[r]),Bt([this,...r],t)};R().prototype.conv1d=function(r,t,e,o,n,s){return this.throwIfDisposed(),Sc(this,r,t,e,o,n,s)};R().prototype.conv2dTranspose=function(r,t,e,o,n){return this.throwIfDisposed(),Tc(this,r,t,e,o,n)};R().prototype.conv2d=function(r,t,e,o,n,s){return this.throwIfDisposed(),zr(this,r,t,e,o,n,s)};R().prototype.cos=function(){return this.throwIfDisposed(),la(this)};R().prototype.cosh=function(){return this.throwIfDisposed(),kc(this)};R().prototype.cumprod=function(r,t,e){return this.throwIfDisposed(),bl(this,r,t,e)};R().prototype.cumsum=function(r,t,e){return this.throwIfDisposed(),Ec(this,r,t,e)};R().prototype.depthToSpace=function(r,t){return this.throwIfDisposed(),td(this,r,t)};R().prototype.depthwiseConv2d=function(r,t,e,o,n,s){return this.throwIfDisposed(),wn(this,r,t,e,o,n,s)};R().prototype.dilation2d=function(r,t,e,o,n){return this.throwIfDisposed(),ed(this,r,t,e,o,n)};R().prototype.divNoNan=function(r){return this.throwIfDisposed(),rd(this,r)};R().prototype.div=function(r){return this.throwIfDisposed(),et(this,r)};R().prototype.dot=function(r){return this.throwIfDisposed(),od(this,r)};R().prototype.elu=function(){return this.throwIfDisposed(),Cn(this)};R().prototype.equal=function(r){return this.throwIfDisposed(),hr(this,r)};R().prototype.erf=function(){return this.throwIfDisposed(),nd(this)};R().prototype.euclideanNorm=function(r,t){return this.throwIfDisposed(),sd(this,r,t)};R().prototype.exp=function(){return this.throwIfDisposed(),Ae(this)};R().prototype.expandDims=function(r){return this.throwIfDisposed(),ze(this,r)};R().prototype.expm1=function(){return this.throwIfDisposed(),id(this)};R().prototype.fft=function(){return this.throwIfDisposed(),xa(this)};R().prototype.flatten=function(){return this.throwIfDisposed(),F(this,[this.size])};R().prototype.floor=function(){return this.throwIfDisposed(),Nn(this)};R().prototype.floorDiv=function(r){return this.throwIfDisposed(),Cc(this,r)};R().prototype.gather=function(r,t){return this.throwIfDisposed(),Sn(this,r,t)};R().prototype.greaterEqual=function(r){return this.throwIfDisposed(),Kr(this,r)};R().prototype.greater=function(r){return this.throwIfDisposed(),Se(this,r)};R().prototype.ifft=function(){return this.throwIfDisposed(),Ps(this)};R().prototype.irfft=function(){return this.throwIfDisposed(),Gc(this)};R().prototype.isFinite=function(){return this.throwIfDisposed(),ad(this)};R().prototype.isInf=function(){return this.throwIfDisposed(),ld(this)};R().prototype.isNaN=function(){return this.throwIfDisposed(),ud(this)};R().prototype.leakyRelu=function(r){return this.throwIfDisposed(),ua(this,r)};R().prototype.lessEqual=function(r){return this.throwIfDisposed(),jr(this,r)};R().prototype.less=function(r){return this.throwIfDisposed(),$c(this,r)};R().prototype.localResponseNormalization=function(r,t,e,o){return this.throwIfDisposed(),cd(this,r,t,e,o)};R().prototype.logSigmoid=function(){return this.throwIfDisposed(),md(this)};R().prototype.logSoftmax=function(r){return this.throwIfDisposed(),Ac(this,r)};R().prototype.logSumExp=function(r,t){return this.throwIfDisposed(),Dc(this,r,t)};R().prototype.log=function(){return this.throwIfDisposed(),Ke(this)};R().prototype.log1p=function(){return this.throwIfDisposed(),ca(this)};R().prototype.logicalAnd=function(r){return this.throwIfDisposed(),ir(this,r)};R().prototype.logicalNot=function(){return this.throwIfDisposed(),pa(this)};R().prototype.logicalOr=function(r){return this.throwIfDisposed(),Fc(this,r)};R().prototype.logicalXor=function(r){return this.throwIfDisposed(),fd(this,r)};R().prototype.matMul=function(r,t,e){return this.throwIfDisposed(),kt(this,r,t,e)};R().prototype.maxPool=function(r,t,e,o){return this.throwIfDisposed(),ma(this,r,t,e,o)};R().prototype.max=function(r,t){return this.throwIfDisposed(),sr(this,r,t)};R().prototype.maximum=function(r){return this.throwIfDisposed(),Mr(this,r)};R().prototype.mean=function(r,t){return this.throwIfDisposed(),ee(this,r,t)};R().prototype.min=function(r,t){return this.throwIfDisposed(),wl(this,r,t)};R().prototype.minimum=function(r){return this.throwIfDisposed(),In(this,r)};R().prototype.mirrorPad=function(r,t){return this.throwIfDisposed(),gd(this,r,t)};R().prototype.mod=function(r){return this.throwIfDisposed(),xd(this,r)};R().prototype.mul=function(r){return this.throwIfDisposed(),D(this,r)};R().prototype.neg=function(){return this.throwIfDisposed(),Rt(this)};R().prototype.norm=function(r,t,e){return this.throwIfDisposed(),Ls(this,r,t,e)};R().prototype.notEqual=function(r){return this.throwIfDisposed(),Ho(this,r)};R().prototype.oneHot=function(r,t=1,e=0){return this.throwIfDisposed(),hn(this,r,t,e)};R().prototype.onesLike=function(){return this.throwIfDisposed(),We(this)};R().prototype.pad=function(r,t){return this.throwIfDisposed(),Tr(this,r,t)};R().prototype.pool=function(r,t,e,o,n,s){return this.throwIfDisposed(),yd(this,r,t,e,o,n,s)};R().prototype.pow=function(r){return this.throwIfDisposed(),Sr(this,r)};R().prototype.prelu=function(r){return this.throwIfDisposed(),ha(this,r)};R().prototype.prod=function(r,t){return this.throwIfDisposed(),bd(this,r,t)};R().prototype.reciprocal=function(){return this.throwIfDisposed(),Sd(this)};R().prototype.relu=function(){return this.throwIfDisposed(),er(this)};R().prototype.relu6=function(){return this.throwIfDisposed(),Rc(this)};R().prototype.reshapeAs=function(r){return this.throwIfDisposed(),F(this,r.shape)};R().prototype.reshape=function(r){return this.throwIfDisposed(),F(this,r)};R().prototype.resizeBilinear=function(r,t,e){return this.throwIfDisposed(),Bd(this,r,t,e)};R().prototype.resizeNearestNeighbor=function(r,t,e){return this.throwIfDisposed(),Vd(this,r,t,e)};R().prototype.reverse=function(r){return this.throwIfDisposed(),Be(this,r)};R().prototype.rfft=function(){return this.throwIfDisposed(),ya(this)};R().prototype.round=function(){return this.throwIfDisposed(),_c(this)};R().prototype.rsqrt=function(){return this.throwIfDisposed(),Oc(this)};R().prototype.selu=function(){return this.throwIfDisposed(),Lc(this)};R().prototype.separableConv2d=function(r,t,e,o,n,s){return this.throwIfDisposed(),Pc(this,r,t,e,o,n,s)};R().prototype.sigmoid=function(){return this.throwIfDisposed(),fr(this)};R().prototype.sign=function(){return this.throwIfDisposed(),Id(this)};R().prototype.sin=function(){return this.throwIfDisposed(),zc(this)};R().prototype.sinh=function(){return this.throwIfDisposed(),Mc(this)};R().prototype.slice=function(r,t){return this.throwIfDisposed(),Ct(this,r,t)};R().prototype.softmax=function(r){return this.throwIfDisposed(),ga(this,r)};R().prototype.softplus=function(){return this.throwIfDisposed(),Uo(this)};R().prototype.spaceToBatchND=function(r,t){return this.throwIfDisposed(),fa(this,r,t)};R().prototype.split=function(r,t){return this.throwIfDisposed(),Ve(this,r,t)};R().prototype.sqrt=function(){return this.throwIfDisposed(),te(this)};R().prototype.square=function(){return this.throwIfDisposed(),At(this)};R().prototype.squaredDifference=function(r){return this.throwIfDisposed(),Wc(this,r)};R().prototype.squeeze=function(r){return this.throwIfDisposed(),kr(this,r)};R().prototype.stack=function(r,t){this.throwIfDisposed();let e=r instanceof Dt?[this,r]:[this,...r];return De(e,t)};R().prototype.step=function(r){return this.throwIfDisposed(),Co(this,r)};R().prototype.stridedSlice=function(r,t,e,o,n,s,i,a){return this.throwIfDisposed(),Td(this,r,t,e,o,n,s,i,a)};R().prototype.sub=function(r){return this.throwIfDisposed(),tt(this,r)};R().prototype.sum=function(r,t){return this.throwIfDisposed(),st(this,r,t)};R().prototype.tan=function(){return this.throwIfDisposed(),kd(this)};R().prototype.tanh=function(){return this.throwIfDisposed(),yn(this)};R().prototype.tile=function(r){return this.throwIfDisposed(),tr(this,r)};R().prototype.toBool=function(){return this.throwIfDisposed(),q(this,"bool")};R().prototype.toFloat=function(){return this.throwIfDisposed(),q(this,"float32")};R().prototype.toInt=function(){return this.throwIfDisposed(),q(this,"int32")};R().prototype.topk=function(r,t){return this.throwIfDisposed(),Ed(this,r,t)};R().prototype.transpose=function(r){return this.throwIfDisposed(),St(this,r)};R().prototype.unique=function(r){return this.throwIfDisposed(),$d(this,r)};R().prototype.unsortedSegmentSum=function(r,t){return this.throwIfDisposed(),Hc(this,r,t)};R().prototype.unstack=function(r){return this.throwIfDisposed(),je(this,r)};R().prototype.where=function(r,t){return this.throwIfDisposed(),le(r,this,t)};R().prototype.zerosLike=function(){return this.throwIfDisposed(),dt(this)};var Br=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Br.prototype)}},cr=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,cr.prototype)}},L=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,L.prototype)}},gt=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,gt.prototype)}},Kc=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Kc.prototype)}};var hm=class{constructor(t){this.maxEntries=t||100,this.cache=new Map}get(t){let e;return this.cache.has(t)&&(e=this.cache.get(t),this.cache.delete(t),this.cache.set(t,e)),e}put(t,e){if(this.cache.has(t))this.cache.delete(t);else if(this.cache.size>=this.maxEntries){let o=this.cache.keys().next().value;this.cache.delete(o)}this.cache.set(t,e)}getMaxEntries(){return this.maxEntries}setMaxEntries(t){if(t<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${t}.`);if(this.maxEntries>t)for(let e=0;e<this.maxEntries-t;e++){let o=this.cache.keys().next().value;this.cache.delete(o)}this.maxEntries=t}};function So(r,t){if(Array.isArray(r)){let e=[];for(let o=0;o<t;o++)e=e.concat(r);return e}else{let e=new Array(t);return e.fill(r),e}}function ao(r,t){if(!r)throw new Kc(t)}function Uw(r,t){let e=0;for(let o of r)o===t&&e++;return e}function Xe(r){return r.length===1?r[0]:r}function Xt(r){return Array.isArray(r)?r:[r]}function Io(r){let e=r.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return e[0]!=="_"?e:"private"+e}function Bs(r){return r.length<=1||r.indexOf("_")===-1?r:r.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}var No={};function jc(r){if(r==null)return null;let t={};return t.className=r.getClassName(),t.config=r.getConfig(),t}function Ww(r){if(!(r==null||typeof r!="object"))if(Array.isArray(r))r.forEach(t=>Ww(t));else{let t=Object.keys(r);for(let e of t){let o=r[e];o!=null&&typeof o=="object"&&(!Array.isArray(o)&&o.type==="ndarray"&&typeof o.value=="number"?r[e]=o.value:Ww(o))}}}function En(r,t={},e={},o="object",n=!1){if(typeof r=="string"){let s=r,i;if(s in e)i=e[s];else if(s in No)i=No[s];else if(i=t[s],i==null)throw new L(`Unknown ${o}: ${r}. This may be due to one of the following reasons:
1. The ${o} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${o} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return i}else{let s=r;if(s.className==null||s.config==null)throw new L(`${o}: Improper config format: ${JSON.stringify(s)}.
'className' and 'config' must set.`);let i=s.className,a,l;if(i in e?[a,l]=e[i]:i in No?[a,l]=No.className:i in t&&([a,l]=t[i]),a==null)throw new L(`Unknown ${o}: ${i}. This may be due to one of the following reasons:
1. The ${o} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${o} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(l!=null){let u={};for(let f of Object.keys(No))u[f]=No[f];for(let f of Object.keys(e))u[f]=e[f];let c=s.config;c.customObjects=u;let p=Object.assign({},No);for(let f of Object.keys(e))No[f]=e[f];Ww(s.config);let m=l(a,s.config,e,n);return No=Object.assign({},p),m}else{let u=Object.assign({},No);for(let p of Object.keys(e))No[p]=e[p];let c=new a(s.config);return No=Object.assign({},u),c}}}function IG(r,t){return r<t?-1:r>t?1:0}function dm(r,t){return-1*IG(r,t)}function To(r){if(r==null)return r;let t=[];for(let e of r)t.indexOf(e)===-1&&t.push(e);return t}function Nk(r){if(r==null)throw new L(`Invalid value in obj: ${JSON.stringify(r)}`);for(let t in r)if(r.hasOwnProperty(t))return!1;return!0}function $n(r,t,e){if(e!=null&&r.indexOf(e)<0)throw new L(`${e} is not a valid ${t}.  Valid values are ${r} or null/undefined.`)}function Hd(r,t,e=0,o=1/0){return ao(e>=0),ao(o>=e),Array.isArray(r)&&r.length>=e&&r.length<=o&&r.every(n=>typeof n===t)}function ke(r,t){Array.isArray(r)?(x.assert(r.length>0,()=>`${t} is unexpectedly an empty array.`),r.forEach((e,o)=>ke(e,`element ${o+1} of ${t}`))):x.assert(Number.isInteger(r)&&r>0,()=>`Expected ${t} to be a positive integer, but got ${Sk(r)}.`)}function Sk(r){return r===null?"null":Array.isArray(r)?"["+r.map(t=>Sk(t)).join(",")+"]":typeof r=="string"?`"${r}"`:`${r}`}function Ik(r,t,e){let o=e!=null?e():x.now(),n;return(...i)=>{let a=e!=null?e():x.now();return a-o<t||(o=a,n=r(...i)),n}}function qd(r){return r==="relu"?"relu":r==="linear"?"linear":r==="elu"?"elu":null}var TG=0;function jd(){return TG++}var Kd={};function Ta(r=""){return r in Kd||(Kd[r]=0),Kd[r]+=1,r+Kd[r].toString()}var Tk=["channelsFirst","channelsLast"],kk=["nearest","bilinear"],Ek=["valid","same","causal"],$k=["max","avg"],Ak=["sum","mul","concat","ave"];var Xc=new Map;function ce(r){$n(Tk,"DataFormat",r)}function Fk(r){$n(kk,"InterpolationFormat",r)}function Er(r){$n(Ek,"PaddingMode",r)}function Hw(r){$n($k,"PoolMode",r)}var gm=[],Dk="/";function jo(r,t){gm.push(r);try{let e=t();return gm.pop(),e}catch(e){throw gm.pop(),e}}function kG(){return gm.length===0?"":gm.join(Dk)+Dk}function Xd(r){if(!Rk(r))throw new Error("Not a valid tensor name: '"+r+"'");return kG()+r}function Yd(r){if(!Rk(r))throw new Error("Not a valid tensor name: '"+r+"'");Xc.has(r)||Xc.set(r,0);let t=Xc.get(r);if(Xc.set(r,Xc.get(r)+1),t>0){let e=`${r}_${t}`;return Xc.set(e,1),e}else return r}var EG=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Rk(r){return!!r.match(EG)}function _k(r){return r===parseInt(r.toString(),10)}function ko(r,t,e){t==null&&(t=0),e==null&&(e=r.length);let o=1;for(let n=t;n<e;++n)o*=r[n];return o}function Fl(r){if(r.length===0)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let e=0;e<r.length;e++){let o=r[e];o<t&&(t=o)}return t}function Xo(r){if(r.length===0)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let e=0;e<r.length;e++){let o=r[e];o>t&&(t=o)}return t}function dr(r,t){if(t<r)throw new L(`end (${t}) < begin (${r}) is forbidden.`);let e=[];for(let o=r;o<t;++o)e.push(o);return e}var qw;function _e(){return qw==null&&(qw=$N().epsilon()),qw}function $r(){return"channelsLast"}function Rl(r,t){return q(r,t)}function Gs(r,t=-1){let e=r.shape.slice();return t<0&&(t=e.length+t+1),e.splice(t,0,1),F(r,e)}function Ok(r,t){return z(()=>{if(r.shape.length!==2)throw new L(`repeat() expects a rank-2 tensor, but received a rank-${r.shape.length} tensor.`);let e=Gs(r,1);return Jd(e,[1,t,1])})}function Lk(r){let t=[ko(r.shape)];return F(r,t)}function Pk(r){if(r.rank<=1)throw new L(`batchFlatten requires a minimum rank of 2. Got rank: ${r.rank}.`);let t=[r.shape[0],ko(r.shape,1)];return F(r,t)}function Vs(r,t,e){return z(()=>{switch(r.rank){case 1:return Bc(r,t,e);case 2:return pm(r,[t,0],[e,r.shape[1]]);case 3:return Vc(r,[t,0,0],[e,r.shape[1],r.shape[2]]);case 4:return Tl(r,[t,0,0,0],[e,r.shape[1],r.shape[2],r.shape[3]]);case 5:return Ct(r,[t,0,0,0,0],[e,r.shape[1],r.shape[2],r.shape[3],r.shape[4]]);case 6:return Ct(r,[t,0,0,0,0,0],[e,r.shape[1],r.shape[2],r.shape[3],r.shape[4],r.shape[5]]);default:throw new L(`sliceAlongFirstAxis() received an unsupported tensor rank: ${r.rank}`)}})}function Kw(r,t,e){return z(()=>{switch(r.rank){case 1:return Bc(r,t,e);case 2:return pm(r,[0,t],[r.shape[0],e]);case 3:return Vc(r,[0,0,t],[r.shape[0],r.shape[1],e]);case 4:return Tl(r,[0,0,0,t],[r.shape[0],r.shape[1],r.shape[2],e]);default:throw new L(`sliceAlongLastAxis() received an unsupported tensor rank: ${r.rank}`)}})}function xm(r,t,e,o){return z(()=>{switch(r.rank){case 1:return Bc(r,t,e);case 2:switch(o){case 1:return Vs(r,t,e);case 2:return Kw(r,t,e);default:throw new L(`The axis is not within the rank of the tensor ${o}`)}case 3:switch(o){case 1:return Vs(r,t,e);case 2:return Vc(r,[0,t,0],[r.shape[0],e,r.shape[2]]);case 3:return Kw(r,t,e);default:throw new L(`The axis is not within the rank of the tensor ${o}`)}case 4:switch(o){case 1:return Vs(r,t,e);case 2:return Tl(r,[0,t,0,0],[r.shape[0],e,r.shape[2],r.shape[3]]);case 3:return Tl(r,[0,0,t,0],[r.shape[0],r.shape[1],e,r.shape[3]]);case 4:return Kw(r,t,e);default:throw new L(`The axis is not within the rank of the tensor ${o}`)}default:throw new L(`sliceAlongLastAxis() received an unsupported tensor rank: ${r.rank}`)}})}function Yc(r,t=-1){let e;return t<0&&(e=r[0].rank,e!==0?t=e:t=0),t===r[0].rank&&(t=-1),Bt(r,t)}function Xw(r,t){switch(r.rank){case 1:return Kh([r,t]);case 2:return jh([r,t],0);case 3:return Xh([r,t],0);case 4:return Yh([r,t],0);default:throw new L(`concatAlongFirstAxis() received an unsupported tensor rank: ${r.rank}`)}}function Jd(r,t){if(Array.isArray(t)||(t=[t]),r.rank!==t.length)throw new L(`The length of input n (${t.length}) does not match the number of dimensions in input x (${r.rank})`);return tr(r,t)}function Zc(r,t=0,e=1,o,n){return Il(r,t,e,o,n)}function Eo(r,t,e,o){if(r.rank<2||t.rank<2)throw new gt(`dot requires both inputs to be rank >= 2 but got x shape = ${r.shape} and y shape = ${t.shape}`);if(t.rank>=3){let n=r.shape.slice(-1)[0],s=t.shape.slice(-2)[0];if(n!==s)throw new gt(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${r.shape} and  y shape = ${t.shape}`)}if(r.rank===2&&t.rank===2)return ba.matMul({a:r,b:t,transposeA:!1,transposeB:!1,bias:o?jw(r.rank,o,$r()):null,activation:e});{let n=r.shape.slice(),s=n.pop();r=F(r,[-1,s]);let i=t.shape.slice(),a=i.pop(),l=i.pop(),u=[...i,a],c=Array.from({length:t.rank},(h,d)=>d===0?t.rank-2:d<=t.rank-2?d-1:d);t=F(St(t,c),[l,-1]);let p=[...n,...u],m=!1,f=!1;return F(ba.matMul({a:r,b:t,transposeA:m,transposeB:f,bias:o?jw(r.rank,o,$r()):null,activation:e}),p)}}function Qd(r,t,e){return z(()=>(Array.isArray(t)?t=Ce(t,"int32"):t=q(t,"int32"),Sn(r,t,e)))}function _l(r){return D(r,r)}function jw(r,t,e){let o=t.shape;if(t.rank!==1&&t.rank!==r)throw new L(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${r}`);if(r===5){if(e==="channelsFirst")return o.length===1?F(t,[1,o[0],1,1,1]):F(t,[1,o[3],o[0],o[1],o[2]]);if(e==="channelsLast")return o.length===1?F(t,[1,1,1,1,o[0]]):F(t,[1].concat(o))}else if(r===4){if(e==="channelsFirst")return o.length===1?F(t,[1,o[0],1,1]):F(t,[1,o[2],o[0],o[1]]);if(e==="channelsLast")return o.length===1?F(t,[1,1,1,o[0]]):F(t,[1].concat(o))}else if(r===3){if(e==="channelsFirst")return o.length===1?F(t,[1,o[0],1]):F(t,[1,o[1],o[0]]);if(e==="channelsLast")return o.length===1?F(t,[1,1,o[0]]):F(t,[1].concat(o))}else if(r<3)return t;throw new L(`Unsupported input rank by biasAdd: ${t.rank}`)}function Ar(r,t,e){return z(()=>(e==null&&(e=$r()),ce(e),U(r,jw(r.rank,t,e))))}function zk(r,t=1){if(t!==1)throw new gt(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return Cn(r)}function Mk(r){return z(()=>et(r,U(se(r),1)))}function tg(r,t,e,o){return z(()=>Dw(r,t,e,o))}function Bk(r){return z(()=>{let t=U(.5,D(.2,r));return Pe(t,0,1)})}function ka(r,t,e=!1){return e?r():t()}var Vk=["fanIn","fanOut","fanAvg"],Gk=["normal","uniform","truncatedNormal"];function $G(r){$n(Vk,"FanMode",r)}function AG(r){$n(Gk,"Distribution",r)}var Fr=class extends j.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}},ym=class extends Fr{apply(t,e){return re(t,e)}};ym.className="Zeros";j.registerClass(ym);var Ol=class extends Fr{apply(t,e){return Me(t,e)}};Ol.className="Ones";j.registerClass(Ol);var bm=class extends Fr{constructor(t){if(super(),typeof t!="object")throw new L(`Expected argument of type ConstantConfig but got ${t}`);if(t.value===void 0)throw new L(`config must have value set but got ${t}`);this.value=t.value}apply(t,e){return z(()=>D(nt(this.value),Me(t,e)))}getConfig(){return{value:this.value}}};bm.className="Constant";j.registerClass(bm);var wm=class extends Fr{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return Tn(t,this.minval,this.maxval,e)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}};wm.className="RandomUniform";j.registerClass(wm);var Cm=class extends Fr{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if(e=e||"float32",e!=="float32"&&e!=="int32")throw new gt(`randomNormal does not support dType ${e}.`);return Zc(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}};Cm.className="RandomNormal";j.registerClass(Cm);var vm=class extends Fr{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if(e=e||"float32",e!=="float32"&&e!=="int32")throw new gt(`truncatedNormal does not support dType ${e}.`);return Uc(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}};vm.className="TruncatedNormal";j.registerClass(vm);var Nm=class extends Fr{constructor(t){super(),this.gain=t.gain!=null?t.gain:1}apply(t,e){return z(()=>{if(t.length!==2||t[0]!==t[1])throw new L("Identity matrix initializer can only be used for 2D square matrices.");return D(this.gain,Cl(t[0]))})}getConfig(){return{gain:this.gain}}};Nm.className="Identity";j.registerClass(Nm);function DG(r,t="channelsLast"){let e,o;if(ce(t),r.length===2)e=r[0],o=r[1];else if([3,4,5].indexOf(r.length)!==-1){if(t==="channelsFirst"){let n=ko(r,2);e=r[1]*n,o=r[0]*n}else if(t==="channelsLast"){let n=ko(r,0,r.length-2);e=r[r.length-2]*n,o=r[r.length-1]*n}}else{let n=ko(r);e=Math.sqrt(n),o=Math.sqrt(n)}return[e,o]}var gr=class extends Fr{constructor(t){if(super(),t.scale<0)throw new L(`scale must be a positive float. Got: ${t.scale}`);this.scale=t.scale==null?1:t.scale,this.mode=t.mode==null?"fanIn":t.mode,$G(this.mode),this.distribution=t.distribution==null?"normal":t.distribution,AG(this.distribution),this.seed=t.seed}apply(t,e){let o=DG(t),n=o[0],s=o[1],i=this.scale;if(this.mode==="fanIn"?i/=Math.max(1,n):this.mode==="fanOut"?i/=Math.max(1,s):i/=Math.max(1,(n+s)/2),this.distribution==="normal"){let a=Math.sqrt(i);if(e=e||"float32",e!=="float32"&&e!=="int32")throw new gt(`${this.getClassName()} does not support dType ${e}.`);return Uc(t,0,a,e,this.seed)}else{let a=Math.sqrt(3*i);return Tn(t,-a,a,e)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}};gr.className="VarianceScaling";j.registerClass(gr);var Jc=class extends gr{constructor(t){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:t==null?null:t.seed})}getClassName(){return gr.className}};Jc.className="GlorotUniform";j.registerClass(Jc);var Qc=class extends gr{constructor(t){super({scale:1,mode:"fanAvg",distribution:"normal",seed:t==null?null:t.seed})}getClassName(){return gr.className}};Qc.className="GlorotNormal";j.registerClass(Qc);var tp=class extends gr{constructor(t){super({scale:2,mode:"fanIn",distribution:"normal",seed:t==null?null:t.seed})}getClassName(){return gr.className}};tp.className="HeNormal";j.registerClass(tp);var ep=class extends gr{constructor(t){super({scale:2,mode:"fanIn",distribution:"uniform",seed:t==null?null:t.seed})}getClassName(){return gr.className}};ep.className="HeUniform";j.registerClass(ep);var rp=class extends gr{constructor(t){super({scale:1,mode:"fanIn",distribution:"normal",seed:t==null?null:t.seed})}getClassName(){return gr.className}};rp.className="LeCunNormal";j.registerClass(rp);var op=class extends gr{constructor(t){super({scale:1,mode:"fanIn",distribution:"uniform",seed:t==null?null:t.seed})}getClassName(){return gr.className}};op.className="LeCunNormal";j.registerClass(op);var Sm=class extends Fr{constructor(t){if(super(),this.DEFAULT_GAIN=1,this.gain=t.gain==null?this.DEFAULT_GAIN:t.gain,this.seed=t.seed,this.seed!=null)throw new gt("Random seed is not implemented for Orthogonal Initializer yet.")}apply(t,e){return z(()=>{if(t.length<2)throw new gt("Shape must be at least 2D.");t[0]*t[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0]*t[1]}) elements: Slowness may result.`);let o=t[0]>t[1]?[t[1],t[0]]:t,n=Zc(o,0,1,"float32"),s=_w.gramSchmidt(n);return t[0]>t[1]&&(s=St(s)),D(this.gain,s)})}getConfig(){return{gain:this.gain,seed:this.seed}}};Sm.className="Orthogonal";j.registerClass(Sm);var Wk={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Uk(r,t={}){return En(r,j.SerializationMap.getMap().classNameMap,t,"initializer")}function oe(r){return jc(r)}function Kt(r){if(typeof r=="string"){let t=r in Wk?Wk[r]:r;if(t==="GlorotNormal")return new Qc;if(t==="GlorotUniform")return new Jc;if(t==="HeNormal")return new tp;if(t==="HeUniform")return new ep;if(t==="LeCunNormal")return new rp;if(t==="LeCunUniform")return new op;{let e={};return e.className=t,e.config={},Uk(e)}}else return r instanceof Fr?r:Uk(r)}function eg(r){return Array.isArray(r)&&Array.isArray(r[0])}function np(r){return r.length===0?[]:Array.isArray(r[0])?r:[r]}function vt(r){let t;if(Array.isArray(r)){if(r.length!==1)throw new L(`Expected Tensor length to be 1; got ${r.length}`);t=r[0]}else t=r;return t}function Lt(r){if(Array.isArray(r)&&Array.isArray(r[0])){if(r.length===1)return r=r,r[0];throw new L(`Expected exactly 1 Shape; got ${r.length}`)}else return r}function sp(r){let t=0;for(let e of r)e.shape.length===0?t+=1:t+=e.shape.reduce((o,n)=>o*n);return t}var qk="Variable",Im=class{constructor(t,e="float32",o=qk,n=!0,s=null){this.dtype=e==null?"float32":e,this.shape=t.shape,this.id=jd(),o=o==null?qk:o,this.originalName=Xd(o),this.name=Yd(this.originalName),this.trainable_=n,this.constraint=s,this.val=Ad(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),RG(this.val,t),this.val.id!==t.id&&(this.val.assign(t),this.constraint!=null&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}};function RG(r,t){if(r.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(r.shape)+" vs. "+JSON.stringify(t.shape))}function Tm(r){return r.map(t=>t.read())}function ip(r){r.forEach(t=>{t[0].write(t[1])})}var Yt=class{constructor(t){this.dtype=t.dtype,this.shape=t.shape,t.shape!=null?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}},xr=class{constructor(t,e,o,n,s,i,a){this.dtype=t,this.shape=e,this.sourceLayer=o,this.inputs=n,this.callArgs=s,this.outputTensorIndex=a,this.id=jd(),i!=null&&(this.originalName=Xd(i),this.name=Yd(this.originalName)),this.rank=e.length}},_G=0,Ws=class{constructor(t,e){this.callArgs=e,this.id=_G++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(let o of t.inboundLayers)o!=null&&o.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){let t=[];for(let e of this.inboundLayers)e!=null?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}},OG=0,Et=class extends j.Serializable{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=OG++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){let o=this.getClassName();e=Io(o)+"_"+Ta(o)}if(this.name=e,this.trainable_=t.trainable==null?!0:t.trainable,t.inputShape!=null||t.batchInputShape!=null){let o;if(t.batchInputShape!=null)o=t.batchInputShape;else if(t.inputShape!=null){let s=null;t.batchSize!=null&&(s=t.batchSize),o=[s].concat(t.inputShape)}this.batchInputShape=o;let n=t.dtype;n==null&&(n=t.inputDType),n==null&&(n="float32"),this.dtype=n}t.weights!=null?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(this.inboundNodes.length===0)throw new cr(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new L(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return Xe(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return Xe(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Br(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(this.inboundNodes.length===0)throw new Br(`Layer ${this.name} is not connected, no input to return.`);return Xe(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(this.inboundNodes.length===0)throw new Br(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Br(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Xe(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=Xt(t),this.inputSpec==null||this.inputSpec.length===0)return;let e=Xt(this.inputSpec);if(t.length!==e.length)throw new L(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: ${t}`);for(let o=0;o<t.length;o++){let n=t[o],s=e[o];if(s==null)continue;let i=n.rank;if(s.ndim!=null&&i!==s.ndim)throw new L(`Input ${o} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${i}`);if(s.maxNDim!=null&&i>s.maxNDim)throw new L(`Input ${o} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${i}`);if(s.minNDim!=null&&i<s.minNDim)throw new L(`Input ${o} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${i}.`);if(s.dtype!=null&&n.dtype!==s.dtype)throw new L(`Input ${o} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${n.dtype}.`);if(s.axes){let a=n.shape;for(let l in s.axes){let u=Number(l),c=s.axes[l],p=u>=0?a[u]:a[a.length+u];if(c!=null&&[c,null].indexOf(p)===-1)throw new L(`Input ${o} is incompatible with layer ${this.name}: expected axis ${u} of input shape to have value ${c} but got shape ${a}.`)}}if(s.shape!=null)for(let a=0;a<s.shape.length;++a){let l=s.shape[a],u=n.shape[a];if(l!=null&&u!=null&&l!==u)throw new L(`Input ${o} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${n.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){this._callHook!=null&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();let o=Xt(t),n=!0;for(let i of o)if(!(i instanceof xr)){n=!1;break}let s=!0;for(let i of o)if(i instanceof xr){s=!1;break}if(n===s)throw new L("Arguments to apply() must be all SymbolicTensors or all Tensors");return jo(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);let i=[];for(let a of Xt(t))i.push(a.shape);this.build(Xe(i)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),this._refCount===null&&s&&(this._refCount=1)}if(this.assertInputCompatibility(t),s){let i=this.call(t,e),a=Xt(i),l=[];for(let u of a)o.indexOf(u)!==-1&&(u=u.clone()),l.push(u);if(i=Xe(l),this.activityRegularizer!=null)throw new gt("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return i}else{let i=LG(t),a=this.computeOutputShape(i),l,u=PG(t);if(this.warnOnIncompatibleInputShape(Array.isArray(t)?i[0]:i),a!=null&&a.length>0&&Array.isArray(a[0])?l=a.map((c,p)=>new xr(u,c,this,Xt(t),e,this.name,p)):l=new xr(u,a,this,Xt(t),e,this.name),this.addInboundNode(t,l,null,null,i,a,e),this._refCount++,this.activityRegularizer!=null)throw new gt("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return l}})}warnOnIncompatibleInputShape(t){if(this.batchInputShape!=null)if(t.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let e=!1;this.batchInputShape.forEach((o,n)=>{o!=null&&t[n]!=null&&t[n]!==o&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(this.inboundNodes==null||this.inboundNodes.length===0)throw new Br(`The layer ${this.name} has never been called and thus has no defined output shape.`);let t=[];for(let e of this.inboundNodes){let o=JSON.stringify(e.outputShapes);t.indexOf(o)===-1&&t.push(o)}if(t.length===1){let e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&e.length===1?e[0]:e}else throw new Br(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new cr(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return sp(this.weights)}build(t){this.built=!0}getWeights(t=!1){return Tm(t?this.trainableWeights:this.weights)}setWeights(t){z(()=>{let e=this.weights;if(e.length!==t.length)throw new L(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(e.length===0)return;let o=[],n=Tm(e);for(let s=0;s<n.length;++s){let i=n[s],a=e[s],l=t[s];if(!x.arraysEqual(i.shape,l.shape))throw new L(`Layer weight shape ${i.shape} not compatible with provided weight shape ${l.shape}`);o.push([a,l])}ip(o)})}addWeight(t,e,o,n,s,i,a,l){if(this._addedWeightNames.indexOf(t)!==-1)throw new L(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),o==null&&(o="float32"),this.fastWeightInitDuringBuild&&(n=l!=null?l():Kt("zeros"));let u=n.apply(e,o),c=new Im(u,o,t,i,a);return u.dispose(),s!=null&&this.addLoss(()=>s.apply(c.read())),i==null&&(i=!0),i?this._trainableWeights.push(c):this._nonTrainableWeights.push(c),c}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){t==null||Array.isArray(t)&&t.length===0||(t=Xt(t),this._losses!==void 0&&this._losses!==null&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(e!=null)if(Array.isArray(e))e.forEach(o=>{if(o!=null)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)});else throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);return null}return e}addInboundNode(t,e,o,n,s,i,a=null){let l=Xt(t);e=Xt(e),o=Xt(o),n=Xt(n),s=np(s),i=np(i);let u=[],c=[],p=[];for(let m of l)u.push(m.sourceLayer),c.push(m.nodeIndex),p.push(m.tensorIndex);new Ws({outboundLayer:this,inboundLayers:u,nodeIndices:c,tensorIndices:p,inputTensors:l,outputTensors:e,inputMasks:o,outputMasks:n,inputShapes:s,outputShapes:i},a);for(let m=0;m<e.length;m++)e[m].sourceLayer=this,e[m].nodeIndex=this.inboundNodes.length-1,e[m].tensorIndex=m}getConfig(){let t={name:this.name,trainable:this.trainable};return this.batchInputShape!=null&&(t.batchInputShape=this.batchInputShape),this.dtype!=null&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(this._refCount===0)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(this._refCount===null)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return--this._refCount===0&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}};function LG(r){r=Xt(r);let t=[];for(let e of r)t.push(e.shape);return Xe(t)}function PG(r){return"float32"}function Yw(r,t,e){if((t==null||e!=null&&e>0)&&(t=r.sourceLayer,e=r.nodeIndex),t.inboundNodes.length===0)return[r];{let o=t.inboundNodes[e];if(o.inboundLayers.length===0)return o.inputTensors;{let n=[];for(let s=0;s<o.inboundLayers.length;s++){let i=o.inputTensors[s],a=o.inboundLayers[s],l=o.nodeIndices[s],u=Yw(i,a,l);for(let c of u)n.indexOf(c)===-1&&n.push(c)}return n}}}var An=class extends Et{constructor(t){if(super({dtype:t.dtype,name:t.name!=null?t.name:Ta("input").toString()}),t.batchSize==null&&(t.batchSize=null),t.sparse==null&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,t.inputShape!=null&&t.batchInputShape!=null)throw new L("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let e=t.batchInputShape;if(e==null){if(t.inputShape==null)throw new L("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");e=[t.batchSize].concat(t.inputShape)}else if(t.batchSize!=null)throw new L("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");let o=t.dtype||"float32";this.batchInputShape=e,this.dtype=o,this.inputSpec=[{shape:e}];let n=new xr(this.dtype,this.batchInputShape,this,[],{},this.name);n.nodeIndex=0,n.tensorIndex=0,new Ws({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[n],outputTensors:[n],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new L(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}};An.className="InputLayer";j.registerClass(An);function Zw(r){if(r.batchShape==null&&r.shape==null)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(r.batchShape!=null&&r.shape!=null)throw new L("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=r.batchShape;r.shape!=null&&t==null&&(t=[null].concat(r.shape));let e=r.dtype;return e==null&&(e="float32"),new An({batchInputShape:t,name:r.name,dtype:e,sparse:r.sparse}).inboundNodes[0].outputTensors[0]}function zG(r,t){if(r.dtype==null||r.dtype===t.dtype)return t;try{return q(t,r.dtype)}catch(e){throw new L(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${r.name}' (${r.dtype}).`)}}var $o=class{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof $o)for(let e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(t==null)return;for(let e of t)this.add(e.key,e.value)}}add(t,e,o){if(this.id2Value[t.id]==null)this.id2Value[t.id]=zG(t,e),this.name2Id[t.name]=t.id,o!=null&&(this.id2Mask[t.id]=o);else throw new L(`Duplicate key: name=${t.name}, id=${t.id}`);return this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return this.id2Value[t.id]!=null}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof xr){if(this.id2Value[t.id]==null)throw new L(`Nonexistent key: ${t.name}`);return this.id2Value[t.id]}else{let e=this.name2Id[t];if(e==null)throw new L(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Value[e]}}getMask(t){if(t instanceof xr){if(this.id2Value[t.id]==null)throw new L(`Nonexistent key: ${t.name}`);return this.id2Mask[t.id]}else{let e=this.name2Id[t];if(e==null)throw new L(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Mask[e]}}disposeMasks(){this.id2Mask!=null&&yt(this.id2Mask)}},rg=new hm,og=new hm;function jk(r){rg!=null&&rg.setMaxEntries(r),og!=null&&og.setMaxEntries(r)}function Ll(r,t,e,o){let n=e==null?!1:e.training,s=Array.isArray(r),i=s?r:[r],a=i.map(h=>h.name),l=[],u=t.names();for(let h of a)u.indexOf(h)!==-1?l.push(t.getValue(h)):l.push(null);o!=null&&(o.maxNumTensors=-1/0,o.minNumTensors=1/0);let c=a.join(",")+"|"+t.names().sort().join(","),p=rg.get(c),m;if(p==null){let h=MG(i,t);p=h.sorted,m=h.recipientCounts,rg.put(c,p),og.put(c,m)}m={},n||Object.assign(m,og.get(c));let f=new $o(t);for(let h=0;h<p.length;++h){if(o!=null){let O=oa().numTensors;O>o.maxNumTensors&&(o.maxNumTensors=O),O<o.minNumTensors&&(o.minNumTensors=O)}let d=p[h],g=d.sourceLayer;if(g instanceof An)continue;let y=[],b=[],w=[],C=!1;for(let O of d.inputs){let P=f.getValue(O),B=f.getMask(O);y.push(P),b.push(B),B!=null&&(C=!0),n||(m[O.name]--,m[O.name]===0&&!t.hasKey(O)&&a.indexOf(O.name)===-1&&!P.isDisposed&&O.sourceLayer.stateful!==!0&&w.push(P))}C&&(e=e||{},e.mask=b[0]);let I=Xt(g.apply(y,e)),$=null;g.supportsMasking&&($=g.computeMask(y,b));let A=VG(d),_=Array.isArray(A)?A:[A];for(let O=0;O<_.length;++O){f.hasKey(_[O])||f.add(_[O],I[O],Array.isArray($)?$[0]:$);let P=a.indexOf(_[O].name);P!==-1&&(l[P]=I[O])}n||yt(w)}return f.disposeMasks(),s?l:l[0]}function MG(r,t){x.assert(r!=null&&r.length>0,()=>"Expected at least one fetch, got none");let e=[],o={};if(r.length===1){let n=Kk(r[0],t);e=n.sorted,o=n.recipientMap}else{let n=new Set;for(let s of r){let{sorted:i,recipientMap:a}=Kk(s,t);for(let l of i)n.has(l.name)||(e.push(l),n.add(l.name));for(let l in a)o[l]==null&&(o[l]=new Set),a[l].forEach(u=>o[l].add(u))}}return{sorted:e,recipientCounts:BG(o)}}function BG(r){let t={};for(let e in r)t[e]=r[e].size;return t}function Kk(r,t){let e=new Set,o=[],n={};for(let a of t.names())e.add(a);let s=[],i=[];for(s.push(r);s.length>0;){let a=s[s.length-1];if(e.has(a.name)){s.pop();continue}let l=i[i.length-1]===s.length-1;if(a.inputs.length===0||l)s.pop(),o.push(a),e.add(a.name),l&&i.pop();else{i.push(s.length-1);for(let u of a.inputs)n[u.name]==null&&(n[u.name]=new Set),n[u.name].add(a.name),!e.has(u.name)&&s.push(u)}}return{sorted:o,recipientMap:n}}function VG(r){let t;if(r.sourceLayer.inboundNodes.length===1)t=r.sourceLayer.output;else{let e=null;for(let o=0;o<r.sourceLayer.inboundNodes.length;++o)for(let n of r.sourceLayer.inboundNodes[o].outputTensors)if(n.id===r.id){e=o;break}t=r.sourceLayer.getOutputAt(e)}return t}var GG=M();GG.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,jk);function Jw(r,t){return z(()=>te(st(D(r,r),t,!0)))}var Pl=class extends j.Serializable{getConfig(){return{}}},km=class extends Pl{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=t.maxValue!=null?t.maxValue:this.defaultMaxValue,this.axis=t.axis!=null?t.axis:this.defaultAxis}apply(t){return z(()=>{let e=Jw(t,this.axis),o=Pe(e,0,this.maxValue);return D(t,et(o,U(_e(),e)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}};km.className="MaxNorm";j.registerClass(km);var Em=class extends Pl{constructor(t){super(),this.defaultAxis=0,this.axis=t.axis!=null?t.axis:this.defaultAxis}apply(t){return z(()=>et(t,U(_e(),Jw(t,this.axis))))}getConfig(){return{axis:this.axis}}};Em.className="UnitNorm";j.registerClass(Em);var $m=class extends Pl{apply(t){return er(t)}};$m.className="NonNeg";j.registerClass($m);var Am=class extends Pl{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=t.minValue!=null?t.minValue:this.defaultMinValue,this.maxValue=t.maxValue!=null?t.maxValue:this.defaultMaxValue,this.rate=t.rate!=null?t.rate:this.defaultRate,this.axis=t.axis!=null?t.axis:this.defaultAxis}apply(t){return z(()=>{let e=Jw(t,this.axis),o=U(D(this.rate,Pe(e,this.minValue,this.maxValue)),D(1-this.rate,e));return D(t,et(o,U(_e(),e)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}};Am.className="MinMaxNorm";j.registerClass(Am);var Xk={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function he(r){return jc(r)}function Yk(r,t={}){return En(r,j.SerializationMap.getMap().classNameMap,t,"constraint")}function de(r){if(r==null)return null;if(typeof r=="string"){let e={className:r in Xk?Xk[r]:r,config:{}};return Yk(e)}else return r instanceof Pl?r:Yk(r)}async function Us(r){if(r==null)return;let t=[],e=[],o=[];for(let n in r){let s=r[n];if(typeof s!="number"){let i=s;t.push(i.data()),e.push(n),o.push(i)}}if(t.length>0){let n=await Promise.all(t);for(let s=0;s<n.length;++s)r[e[s]]=n[s][0];yt(o)}}function ng(r){if(r!=null)for(let t in r){let e=r[t];typeof e!="number"&&e.dispose()}}var Zk;(function(r){r[r.SILENT=0]="SILENT",r[r.VERBOSE=1]="VERBOSE"})(Zk||(Zk={}));var HG=125,Ea=class{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}},sg=class{constructor(t,e=10){t==null&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(let e of this.callbacks)e.setParams(t)}setModel(t){for(let e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){e==null&&(e={});for(let o of this.callbacks)await o.onEpochBegin(t,e)}async onEpochEnd(t,e){e==null&&(e={});for(let o of this.callbacks)await o.onEpochEnd(t,e)}async onBatchBegin(t,e){e==null&&(e={});for(let o of this.callbacks)await o.onBatchBegin(t,e)}async onBatchEnd(t,e){e==null&&(e={});for(let o of this.callbacks)await o.onBatchEnd(t,e)}async onTrainBegin(t){t==null&&(t={});for(let e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){t==null&&(t={});for(let e of this.callbacks)await e.onTrainEnd(t)}},Qw=class extends Ea{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){e==null&&(e={});let o=e.size==null?0:e.size;this.seen+=o;for(let n in e){let s=e[n];if(typeof s=="number")this.totals.hasOwnProperty(n)||(this.totals[n]=0),this.totals[n]=this.totals[n]+s*o;else{let i;n in this.totals?i=this.totals[n]:this.totals[n]=0;let a=z(()=>U(this.totals[n],D(s,o)));this.totals[n]=a,i!=null&&i.dispose()}}}async onEpochEnd(t,e){if(e!=null)for(let o of this.params.metrics)this.totals[o]!=null&&(typeof this.totals[o]=="number"?e[o]=this.totals[o]/this.seen:z(()=>{let n=D(et(1,this.seen),this.totals[o]);e[o]=n,this.totals[o].dispose(),ue(e[o])}))}},ig=class extends Ea{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){e==null&&(e={}),this.epoch.push(t);for(let o in e)this.history[o]==null&&(this.history[o]=[]),this.history[o].push(e[o])}async syncData(){let t=[],e=[],o=[];for(let s in this.history){let i=this.history[s];for(let a=0;a<i.length;++a)if(typeof i[a]!="number"){let l=i[a];t.push(l.data()),e.push(s),o.push(a)}}let n=await Promise.all(t);for(let s=0;s<n.length;++s)this.history[e[s]][o[s]].dispose(),this.history[e[s]][o[s]]=n[s][0]}},ag=class extends Ea{constructor(t,e){if(super(),this.currentEpoch=0,this.nowFunc=t.nowFunc,this.nextFrameFunc=t.nextFrameFunc||fm,this.yieldEvery=e||"auto",this.yieldEvery==="auto"&&(this.yieldEvery=HG),this.yieldEvery==="never"&&t.onYield!=null)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");x.isNumber(this.yieldEvery)&&(this.maybeWait=Ik(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,o){let n=[];this.yield!=null&&(await Us(o),n.push(this.yield(t,e,o))),n.push(this.nextFrameFunc()),await Promise.all(n)}async onEpochBegin(t,e){this.currentEpoch=t,this.epochBegin!=null&&(await Us(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){let o=[];this.epochEnd!=null&&(await Us(e),o.push(this.epochEnd(t,e))),this.yieldEvery==="epoch"&&o.push(this.nextFrameFunc()),await Promise.all(o)}async onBatchBegin(t,e){this.batchBegin!=null&&(await Us(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){let o=[];this.batchEnd!=null&&(await Us(e),o.push(this.batchEnd(t,e))),this.yieldEvery==="batch"?o.push(this.nextFrameFunc()):x.isNumber(this.yieldEvery)&&o.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(o)}async onTrainBegin(t){this.trainBegin!=null&&(await Us(t),await this.trainBegin(t))}async onTrainEnd(t){this.trainEnd!=null&&(await Us(t),await this.trainEnd(t))}};function lg(r,t){return r==null&&(r={}),r instanceof Ea?[r]:Array.isArray(r)&&r[0]instanceof Ea?r:Xt(r).map(o=>new ag(o,t))}var Vr=class{constructor(){}static registerCallbackConstructor(t,e){x.assert(t>=0&&Number.isInteger(t),()=>`Verbosity level is expected to be an integer >= 0, but got ${t}`),Vr.checkForDuplicate(e),Vr.constructors[t]==null&&(Vr.constructors[t]=[]),Vr.constructors[t].push(e)}static checkForDuplicate(t){for(let e in Vr.constructors)Vr.constructors[+e].forEach(n=>{if(n===t)throw new L("Duplicate callback constructor.")})}static clear(){Vr.constructors={}}static createCallbacks(t){let e=[];for(let o in Vr.constructors){let n=+o;t>=n&&e.push(...Vr.constructors[n])}return e.map(o=>new o)}};Vr.constructors={};function ug(r,t,e,o,n,s,i,a,l){let u=new ig,c=[new Qw,...Vr.createCallbacks(t)];r!=null&&c.push(...r),c.push(u);let p=new sg(c);return p.setParams({epochs:e,initialEpoch:o,samples:n,steps:s,batchSize:i,verbose:t,doValidation:a,metrics:l}),{callbackList:p,history:u}}function Xr(r,t={},e=!1){return En(r,j.SerializationMap.getMap().classNameMap,t,"layer",e)}function Dm(r,t){return z(()=>{r.dtype!=="float32"&&(r=q(r,"float32"));let e=st(_l(r),t,!0),o=vn(e.shape,_e()),n=te(Mr(e,o));return et(r,n)})}function zl(r,t){return z(()=>ee(_l(tt(t,r)),-1))}function Rm(r,t){return z(()=>ee(se(tt(t,r)),-1))}function _m(r,t){return z(()=>{let e=tt(r,t),o=Pe(se(r),_e(),Number.MAX_VALUE),n=se(et(e,o));return D(100,ee(n,-1))})}function qG(r,t){return z(()=>{let e=Pe(t,_e(),Number.MAX_VALUE),o=Ke(U(1,e)),n=Pe(r,_e(),Number.MAX_VALUE),s=Ke(U(1,n));return ee(_l(tt(o,s)),-1)})}function KG(r,t){return z(()=>{let e=Mr(0,tt(1,D(r,t)));return ee(_l(e),-1)})}function jG(r,t){return z(()=>{let e=Mr(0,tt(1,D(r,t)));return ee(e,-1)})}function XG(r,t){return z(()=>{let e=st(D(r,t),-1),o=sr(D(tt(1,r),t),-1);return Mr(0,U(1,tt(o,e)))})}function YG(r,t){return z(()=>{let e=Math.log(2),o=tt(t,r),n=tt(U(o,Uo(D(-2,o))),e);return ee(n,-1)})}function Ml(r,t,e=!1){return z(()=>{if(e)t=ga(t);else{let o=st(t,t.shape.length-1,!0);t=et(t,o)}return t=Pe(t,_e(),1-_e()),Rt(st(D(q(r,"float32"),Ke(t)),t.shape.length-1))})}function ap(r,t,e=!1){return z(()=>{let o=q(Nn(Lk(r)),"int32");t=Pe(t,_e(),1-_e());let n=t.shape,s=F(hn(o,n[n.length-1]),n);return Ml(s,t,e)})}function ZG(r,t){if(!x.arraysEqual(r.shape,t.shape))throw new L(`logits and labels must have the same shape, but got shapes ${JSON.stringify(r.shape)} and ${JSON.stringify(t.shape)}`);return z(()=>{let e=er(t),o=Rt(se(t));return U(tt(e,D(t,r)),ca(Ae(o)))})}function lp(r,t){return z(()=>{let e;return e=Pe(t,_e(),1-_e()),e=Ke(et(e,tt(1,e))),ee(ZG(r,e),-1)})}function JG(r,t){return z(()=>{let e=Pe(r,_e(),1),o=Pe(t,_e(),1);return st(D(r,Ke(et(e,o))),-1)})}function QG(r,t){return z(()=>{let e=Ke(U(_e(),t));return ee(tt(t,D(r,e)),-1)})}function cg(r,t){return z(()=>{let e=Dm(r,-1),o=Dm(t,-1),n=D(e,o);return Rt(st(n,-1))})}var Fm={meanSquaredError:zl,meanAbsoluteError:Rm,meanAbsolutePercentageError:_m,meanSquaredLogarithmicError:qG,squaredHinge:KG,hinge:jG,categoricalHinge:XG,logcosh:YG,categoricalCrossentropy:Ml,sparseCategoricalCrossentropy:ap,binaryCrossentropy:lp,kullbackLeiblerDivergence:JG,poisson:QG,cosineProximity:cg};function pg(r){if(typeof r=="string"){if(r in Fm)return Fm[r];let t=`Unknown loss ${r}`;throw r.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${r}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new L(t)}else return r}function fg(r,t){return z(()=>{let e=D(.5,We(t)),o=Rl(Se(t,e),r.dtype);return ee(hr(r,o),-1)})}function hg(r,t){return z(()=>Rl(hr(xn(r,-1),xn(t,-1)),"float32"))}function tW(r,t){return z(()=>q(st(ir(hr(r,1),hr(t,1))),"float32"))}function eW(r,t){return z(()=>q(st(ir(hr(r,0),hr(t,1))),"float32"))}function Qk(r,t){return z(()=>{let e=tW(r,t),o=eW(r,t),n=U(e,o);return q(le(Se(n,0),et(e,n),0),"float32")})}function t0(r,t){return lp(r,t)}function e0(r,t){return r.rank===t.rank&&(r=kr(r,[r.rank-1])),t=xn(t,-1),t.dtype!==r.dtype&&(t=q(t,r.dtype)),q(hr(r,t),"float32")}var rW=zl,oW=zl,nW=Rm,sW=Rm,iW=_m,aW=_m,dg=Ml,lW=cg,r0=ap,mg={binaryAccuracy:fg,categoricalAccuracy:hg,precision:Qk,categoricalCrossentropy:dg,sparseCategoricalCrossentropy:r0,mse:rW,MSE:oW,mae:nW,MAE:sW,mape:iW,MAPE:aW,cosine:lW};function t1(r){if(typeof r=="string"&&r in mg)return mg[r];if(typeof r!="string"&&r!=null)return r;throw new L(`Unknown metric ${r}`)}function Om(r){if(ao(r!==null,`Unknown LossOrMetricFn ${r}`),typeof r=="string")return r;{let t;for(let e of Object.keys(Fm))if(Fm[e]===r){t=e;break}if(t!==void 0)return t;for(let e of Object.keys(mg))if(mg[e]===r){t=e;break}return t!==void 0?t:r.name}}function r1(r){let t={Adagrad:()=>Dl.adagrad(.01),Adadelta:()=>Dl.adadelta(1,.95,_e()),Adam:()=>Dl.adam(.001,.9,.999,_e()),Adamax:()=>Dl.adamax(.002,.9,.999,_e(),0),RMSProp:()=>Dl.rmsprop(.001,.9,0,_e()),SGD:()=>Dl.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,r in t)return t[r]();throw new L(`Unknown Optimizer ${r}`)}function n0(r,t,e=!1){if(r==null||typeof r!="object"||Object.getPrototypeOf(r)!==Object.prototype||!o0(r))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(e){let o=JSON.stringify(r);o.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${o.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${1048576}.`)}}function o0(r){if(r===null)return!0;if(typeof r=="object")if(Object.getPrototypeOf(r)===Object.prototype){let t=Object.keys(r);for(let e of t)if(typeof e!="string"||!o0(r[e]))return!1;return!0}else if(Array.isArray(r)){for(let t of r)if(!o0(t))return!1;return!0}else return!1;else{let t=typeof r;return t==="string"||t==="number"||t==="boolean"}}function o1(r,t,e,o=console.log){let n=pW(r),s=["Layer (type)","Input Shape","Output shape","Param #"];n?(t=t||90,e=e||[.32,.61,.89,1]):(t=t||115,e=e||[.24,.48,.7,.8,1]),e[e.length-1]<=1&&(e=e.map(c=>Math.floor(t*c)));let i;if(!n){s.push("Receives inputs"),i=[];for(let c in r.nodesByDepth)i.push(...r.nodesByDepth[c])}o("_".repeat(t)),gg(s,e,o),o("=".repeat(t));let a=r.layers;for(let c=0;c<a.length;++c)n?mW(a[c],e,o):fW(a[c],e,i,o),o((c===a.length-1?"=":"_").repeat(t));r.checkTrainableWeightsConsistency();let l=cW(r),u=sp(r.nonTrainableWeights);o(`Total params: ${l+u}`),o(`Trainable params: ${l}`),o(`Non-trainable params: ${u}`),o("_".repeat(t))}function cW(r){let t;return r.collectedTrainableWeights!=null?t=sp(r.collectedTrainableWeights):t=sp(r.trainableWeights),t}function pW(r){let t=!0,e=[],o=[];for(let n in r.nodesByDepth)e.push(r.nodesByDepth[n]);for(let n of e){if(n.length>1||n.length===1&&n[0].inboundLayers.length>1){t=!1;break}o.push(...n)}if(t)for(let n of r.layers){let s=!1;for(let i of n.inboundNodes)if(o.indexOf(i)!==-1)if(s){t=!1;break}else s=!0;if(!t)break}return t}function gg(r,t,e=console.log){let o="";for(let n=0;n<r.length;++n)n>0&&(o=o.slice(0,o.length-1)+" "),o+=r[n],o=o.slice(0,t[n]),o+=" ".repeat(t[n]-o.length);e(o)}function mW(r,t,e){let o,n;try{n=r.inboundNodes.map(l=>JSON.stringify(l.inputShapes)).join(",")}catch(l){n="multiple"}try{o=JSON.stringify(r.outputShape)}catch(l){o="multiple"}let s=r.name,i=r.getClassName(),a=[`${s} (${i})`,n,o,r.countParams().toString()];gg(a,t,e)}function fW(r,t,e,o){let n,s;try{s=r.inboundNodes.map(p=>JSON.stringify(p.inputShapes)).join(",")}catch(p){s="multiple"}try{n=JSON.stringify(r.outputShape)}catch(p){n="multiple"}let i=[];for(let p of r.inboundNodes)if(!(e!=null&&e.length>0&&e.indexOf(p)===-1))for(let m=0;m<p.inboundLayers.length;++m){let f=p.inboundLayers[m].name,h=p.nodeIndices[m],d=p.tensorIndices[m];i.push(`${f}[${h}][${d}]`)}let a=r.name,l=r.getClassName(),u=i.length===0?"":i[0],c=[`${a} (${l})`,s,n,r.countParams().toString(),u];gg(c,t,o);for(let p=1;p<i.length;++p)gg(["","","","",i[p]],t,o)}function n1(r,t,e){return(r==="inboundNodes"||r==="outputLayers"||r==="inputLayers")&&t===0&&typeof e=="string"}function Lm(r,t){if(r===null)return null;if(typeof r=="string")return Bs(r);if(typeof r=="number"||typeof r=="boolean")return r;if(r instanceof Array){let e=[],o=r.length;for(let n=0;n<o;++n){let s=r[n];n1(t,n,s)?e.push(s):e.push(Lm(s,t))}return e}else{let e={};for(let o of Object.keys(r)){let n=r[o];if(o==="name"&&typeof n=="string")e[o]=n;else{let s=Bs(o);e[s]=Lm(n,s)}}return e}}function xg(r,t){if(r==null)return null;if(typeof r=="string")return Io(r);if(typeof r=="number"||typeof r=="boolean")return r;if(r instanceof Array){let e=[],o=r.length;for(let n=0;n<o;++n){let s=r[n];n1(t,n,s)?e.push(s):e.push(xg(s,t))}return e}else{let e={};for(let o of Object.keys(r)){let n=r[o],s=Io(o);(o==="name"||o==="className")&&typeof n=="string"?e[s]=n:e[s]=xg(n,o)}return e}}var up="3.19.0";var Yr=class extends Et{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,this.name==null){let b=this.getClassName().toLowerCase();this.name=Ta(b)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(t.inputs)?this.inputs=t.inputs.slice():this.inputs=[t.inputs],Array.isArray(t.outputs)?this.outputs=t.outputs.slice():this.outputs=[t.outputs],To(this.inputs).length!==this.inputs.length)throw new L(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(b=>b.name)}`);To(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(b=>b.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(let b of this.outputs){let w=b.sourceLayer,C=b.nodeIndex,I=b.tensorIndex;this.outputLayers.push(w),this.outputLayersNodeIndices.push(C),this.outputLayersTensorIndices.push(I)}for(let b of this.inputs){let w=b.sourceLayer,C=b.nodeIndex,I=b.tensorIndex;ao(C===0,"input layer has >1 nodes"),ao(I===0,"input layer has >1 tensors"),this.inputLayers.push(w),this.inputLayersNodeIndices.push(C),this.inputLayersTensorIndices.push(I)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let b=0;b<this.inputLayers.length;b++){let w=this.inputLayers[b];if(!(w instanceof An))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${b} (0-based) originates from layer type ${w.getClassName()}.`);this.inputNames.push(w.name),this.feedInputShapes.push(w.batchInputShape),this.feedInputNames.push(w.name)}for(let b of this.outputLayers)this.outputNames.push(b.name);this.internalInputShapes=this.inputs.map(b=>b.shape),this.internalOutputShapes=this.outputs.map(b=>b.shape);let e={},o={},n={},s={},i={},a=[],l=(b,w,C,I,$,A)=>{(I==null||$==null||A==null)&&(I=b.sourceLayer,$=b.nodeIndex,A=b.tensorIndex);let _=I.inboundNodes[$];if(C.indexOf(_)!==-1)throw new cr(`The tensor ${b.name} at layer "${I.name}" is part of a cycle.`);if(w.indexOf(_)!==-1)return;this.containerNodes.add(Yr.nodeKey(I,$)),I.id in i||(i[I.id]=Object.keys(i).length),C.indexOf(_)===-1&&C.push(_);let O=_.inboundLayers.length;for(let P=0;P<O;P++){let B=_.inputTensors[P],V=_.inboundLayers[P],G=_.nodeIndices[P],H=_.tensorIndices[P];l(B,w,C,V,G,H)}for(w.push(_);C.indexOf(_)>=0;)C.splice(C.indexOf(_),1);a.push(_)},u=[],c=[];for(let b of this.outputs)l(b,u,c);let p=a.slice().reverse();for(let b of p){o[b.id]=b,b.id in e||(e[b.id]=0);let w=e[b.id],C=n[b.outboundLayer.id]==null?0:n[b.outboundLayer.id];w=Math.max(w,C),n[b.outboundLayer.id]=w,s[b.outboundLayer.id]=b.outboundLayer,e[b.id]=w;for(let I=0;I<b.inboundLayers.length;I++){let $=b.inboundLayers[I],A=b.nodeIndices[I],_=$.inboundNodes[A],O=e[_.id]==null?0:e[_.id];e[_.id]=Math.max(w+1,O),o[_.id]=_}}let m={};for(let b in e){let w=e[b];w in m||(m[w]=[]),m[w].push(o[b])}let f={};for(let b in n){let w=n[b];w in f||(f[w]=[]),f[w].push(s[b])}let h=Object.keys(f).map(b=>parseInt(b,10)).sort(dm);this.layers=[];for(let b of h){let w=f[b];w.sort((C,I)=>{let $=i[C.id],A=i[I.id];return $<A?-1:$>A?1:0});for(let C of w)C instanceof Yr&&this.internalContainerRefs.push(C),this.layers.push(C)}this.layersByDepth=f,h=Object.keys(m).map(b=>parseInt(b,10)).sort(dm);let d=this.inputs.slice(),g=[];for(let b of h)for(let w of m[b]){let C=w.outboundLayer;if(C!=null){for(let I of w.inputTensors)if(d.indexOf(I)===-1)throw new cr(`Graph disconnected: cannot obtain value for tensor ${I} at layer "${C.name}". The following previous layers were accessed without issue: ${g}`);for(let I of w.outputTensors)d.push(I);g.push(C.name)}}this.nodesByDepth=m;let y=this.layers.map(b=>b.name);for(let b of y){let w=y.filter(C=>C===b).length;if(w!==1)throw new cr(`The name "${b}" is used ${w} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(y))}this.outboundNodes=[],this.inboundNodes=[],new Ws({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(b=>null),outputMasks:this.outputs.map(b=>null),inputShapes:this.inputs.map(b=>b.shape),outputShapes:this.outputs.map(b=>b.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(this._refCount===0)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();let t={refCountAfterDispose:null,numDisposedVariables:0};if(--this._refCount===0){for(let e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(let e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(o=>o.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new L("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(let e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){let t=[];for(let e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){let e=[];for(let o of this.layers)e.push(...o.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){let o={},n=0;for(let i of this.layers)for(let a of i.weights){if(o[a.originalName]!=null)throw new L(`Duplicate weight name: ${a.originalName}`);o[a.originalName]=a,n++}let s=[];for(let i in t){let a=i;if(o[i]==null){let l=i.split("/");a=l.slice(0,-2).concat([l[l.length-1]]).join("/")}if(o[a]!=null)s.push([o[a],t[i]]);else if(e)throw new L(`Provided weight data has no target variable: ${i}`);delete o[a]}if(e){let i=[];for(let a in o)i.push(a);if(i.length>0)throw new L(`${i.length} of ${n} weights are not set: ${i}`)}ip(s)}updatedConfig(){let t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion=`tfjs-layers ${up}`,e.backend="TensorFlow.js",e}toJSON(t,e=!0){let o=xg(this.updatedConfig());return e?JSON.stringify(o):o}call(t,e){return z(()=>{t=Xt(t);let o=new $o;for(let n=0;n<this.inputs.length;++n)o.add(this.inputs[n],t[n]);return Ll(this.outputs,o,e)})}computeMask(t,e){return z(()=>{t=Xt(t);let o;return e==null?o=So(null,t.length):o=Xt(e),this.runInternalGraph(t,o)[1]})}computeOutputShape(t){let e=np(t);if(e.length!==this.inputLayers.length)throw new L(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);let o={};for(let a=0;a<e.length;a++){let l=this.inputLayers[a],u=e[a],c=l.name+"_0_0";o[c]=u}let n=Object.keys(this.nodesByDepth).map(a=>parseInt(a,10)).sort(dm);if(n.length>1)for(let a of n){let l=this.nodesByDepth[a];for(let u of l){let c=u.outboundLayer;if(this.inputLayers.map(d=>d.id).indexOf(c.id)!==-1)continue;let p=[];for(let d=0;d<u.inboundLayers.length;d++){let g=u.inboundLayers[d],y=u.nodeIndices[d],b=u.tensorIndices[d],w=`${g.name}_${y}_${b}`,C=o[w];p.push(C)}let m=c.computeOutputShape(Xe(p)),f=np(m),h=c.inboundNodes.indexOf(u);for(let d=0;d<f.length;d++){let g=`${c.name}_${h}_${d}`;o[g]=f[d]}}}let s=[],i=[];for(let a=0;a<this.outputLayers.length;a++){let l=this.outputLayers[a],u=this.outputLayersNodeIndices[a],c=this.outputLayersTensorIndices[a],p=`${l.name}_${u}_${c}`;i.push(p)}for(let a=0;a<i.length;a++){let l=i[a];ao(l in o),s.push(o[l])}return Xe(s)}runInternalGraph(t,e){e==null&&(e=So(null,t.length));let o={};for(let l=0;l<this.inputs.length;++l){let u=this.inputs[l],c=t[l],p=e[l];o[u.id]=[c,p]}let n=Object.keys(this.nodesByDepth).map(l=>parseInt(l,10)).sort(dm);for(let l of n){let u=this.nodesByDepth[l];for(let c of u){let p=c.outboundLayer,m=c.inputTensors,f=c.outputTensors,h=new Array;for(let d of m)d.id in o&&h.push(o[d.id]);if(h.length===m.length){let d={},g,y,b,w;if(c.callArgs!=null&&(d=c.callArgs),h.length===1){let[C,I]=h[0];d.mask==null&&(d.mask=I),b=Xt(p.call(C,d)),w=Xt(p.computeMask(C,I)),g=[C],y=[I]}else g=h.map(C=>C[0]),y=h.map(C=>C[1]),d.mask==null&&(d.mask=y),b=Xt(p.call(g,d)),w=Xt(p.computeMask(g,y));if(p.activityRegularizer)throw new gt("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let C=0;C<f.length;++C){let I=f[C],$=b[C],A=w[C];o[I.id]=[$,A]}}}}let s=[],i=[],a=[];for(let l of this.outputs){ao(l.id in o,`Could not compute output ${l.name} : ${l.id}`);let[u,c]=o[l.id];a.push(u.shape),s.push(u),i.push(c)}return[s,i,a]}buildNodeConversionMap(t){let e={},o;for(let n of this.layers){o=n instanceof Yr?1:0;for(let s=0;s<n.inboundNodes.length;s++){let i=Yr.nodeKey(n,s);this.containerNodes.has(i)&&(e[i]=o,o+=1)}}return e}getLayer(t,e){if(e!=null){if(this.layers.length<=e)throw new L(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}else if(t==null)throw new L("Provide either a layer name or layer index");for(let o of this.layers)if(o.name===t)return o;throw new L(`No such layer: ${t}`)}calculateLosses(){return z(()=>{let t=[];for(let e of this.layers)for(let o=0;o<e.inboundNodes.length;++o){let n=Yr.nodeKey(e,o);this.containerNodes.has(n)&&t.push(...e.calculateLosses())}return t})}getConfig(){let t={name:this.name},e=this.buildNodeConversionMap(this.layers),o=[];for(let i of this.layers){let a=i.getClassName(),l=i.getConfig(),u=[];for(let p=0;p<i.inboundNodes.length;p++){let m=i.inboundNodes[p],f=Yr.nodeKey(i,p),h={};if(this.containerNodes.has(f)){if(m.callArgs)try{JSON.stringify(m.callArgs),h=m.callArgs}catch(d){console.warn(`Layer ${i.name} was passed non-serializable keyword arguments: ${m.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),h={}}if(m.inboundLayers.length>0){let d=[];for(let g=0;g<m.inboundLayers.length;g++){let y=m.inboundLayers[g],b=m.nodeIndices[g],w=m.tensorIndices[g],C=Yr.nodeKey(y,b),I=e[C];I==null&&(I=0),d.push([y.name,I,w,h])}u.push(d)}}}let c={};c.name=i.name,c.className=a,c.config=l,c.inboundNodes=u,o.push(c)}t.layers=o;let n=[];for(let i=0;i<this.inputLayers.length;i++){let a=this.inputLayers[i],l=this.inputLayersNodeIndices[i],u=Yr.nodeKey(a,l);if(!this.containerNodes.has(u))continue;let c=e[u];c==null&&(c=0);let p=this.inputLayersTensorIndices[i];n.push([a.name,c,p])}t.inputLayers=n;let s=[];for(let i=0;i<this.outputLayers.length;i++){let a=this.outputLayers[i],l=this.outputLayersNodeIndices[i],u=Yr.nodeKey(a,l);if(!this.containerNodes.has(u))continue;let c=e[u];c==null&&(c=0);let p=this.outputLayersTensorIndices[i];s.push([a.name,c,p])}return t.outputLayers=s,t}static fromConfig(t,e,o={},n=!1){let s={},i={};function a(g,y){g.name in i?i[g.name].push(y):i[g.name]=[y]}function l(g,y){let b=[],w;for(let C of y){let I=C[0],$=C[1],A=C[2];if(w=C[3]==null?{}:C[3],!(I in s)){a(g,y);return}let _=s[I];if(_.inboundNodes.length<=$){a(g,y);return}let O=_.inboundNodes[$];b.push(O.outputTensors[A])}b.length>0&&g.apply(Xe(b),w)}function u(g){let y=g.name,b=Xr(g,e.customObjects!=null?e.customObjects:{});b.setFastWeightInitDuringBuild(n),s[y]=b,g.inboundNodes.forEach(C=>{if(!(C instanceof Array))throw new L(`Corrupted configuration, expected array for nodeData: ${C}`);a(b,C)})}let c=e.name,p=e.layers;for(let g of p)u(g);for(;!Nk(i);)for(let g of p){let y=s[g.name];if(y.name in i){let b=i[y.name];delete i[y.name];for(let w of b)l(y,w)}}let m=[],f=[],h=e.inputLayers;for(let g of h){let y=g[0],b=g[1],w=g[2];ao(y in s);let I=s[y].inboundNodes[b].outputTensors;m.push(I[w])}let d=e.outputLayers;for(let g of d){let y=g[0],b=g[1],w=g[2];ao(y in s);let I=s[y].inboundNodes[b].outputTensors;f.push(I[w])}return new t({inputs:m,outputs:f,name:c})}get stateful(){if(this._stateful)throw new L("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(let t of this.layers)if(t.stateful)return!0;return!1}resetStates(){z(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}};function hW(r,t,e){let o=t.length;if(r==null||Array.isArray(r)&&r.length===0)return t.map(n=>null);if(o===1)return Array.isArray(r)&&r.length===1?r:typeof r=="object"&&t[0]in r?[r[t[0]]]:[r];if(Array.isArray(r)){if(r.length!==o)throw new Error(`Provided ${e} is an array of ${r.length} element(s), but the model has ${o} outputs. Make sure a set of weights is provided for each model output.`);return r}else if(typeof r=="object"&&Object.keys(r).length>0&&typeof r[Object.keys(r)[0]]=="object"){let n=[];return t.forEach(s=>{s in r?n.push(r[s]):n.push(null)}),n}else throw new Error(`The model has multiple (${o}) outputs, so ${e} must be either an array with ${o} elements or an object with ${t} keys. Provided ${e} not understood: ${JSON.stringify(r)}`)}function yg(r,t){return hW(r,t,"classWeight")}async function bg(r,t,e,o){if(t!=null||o!=null)throw new Error("Support sampleWeight is not implemented yet");if(e!=null){let n=z(()=>{if(r.shape.length===1)return Nr(r);if(r.shape.length===2){if(r.shape[1]>1)return xn(r,1);if(r.shape[1]===1)return F(r,[r.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${r.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}else throw new Error(`Unexpected rank of target (y) tensor (${r.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),s=Array.from(await n.data());yt(n);let i=[];return s.forEach(a=>{if(e[a]==null)throw new Error(`classWeight must contain all classes in the training data. The class ${a} exists in the data but not in classWeight`);i.push(e[a])}),Ce(i,"float32")}else return null}function s1(r,t){return D(r,t)}var dW=32;function l1(r,t){let e,o,n=t;e=n.xs,o=n.ys,x.assert(e!=null&&o!=null,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);let s=i1("input",r.inputNames,e),i=i1("output",r.outputNames,o),a=s[0].shape[0];x.assert(s.length===r.inputs.length,()=>`LayersModel has ${r.inputs.length} inputs, but the dataset provides ${s.length} inputs.  (Expected input keys: ${JSON.stringify(r.inputNames)})`),x.assert(i.length===r.outputs.length,()=>`LayersModel has ${r.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(r.outputNames)})`);for(let l=0;l<s.length;l++)x.assert(s[l].shape[0]===a,()=>`Batch size mismatch: input ${r.inputNames[l]} has ${s[l].shape[0]}; expected  ${a} based on input ${r.inputNames[0]}.`);for(let l=0;l<i.length;l++)x.assert(i[l].shape[0]===a,()=>`Batch size mismatch: output ${r.outputNames[l]} has ${i[l].shape[0]}; expected  ${a} based on input ${r.inputNames[0]}.`);return{xs:s,ys:i}}function i1(r,t,e){if(e instanceof Dt)return[e];if(Array.isArray(e))return x.assert(e.length===t.length,()=>`Received an array of ${e.length} Tensors, but expected ${t.length} to match the ${r} keys ${t}.`),e;{let o=[];for(let n of t){if(e[n]==null)throw new L(`The feature data generated by the dataset lacks the required ${r} key '${n}'.`);o.push(e[n])}return o}}function gW(r){if(r.length===3)throw new gt("Validation with sample weights is not implemented yet.");return{xs:r[0],ys:r[1]}}async function u1(r,t,e){let o=e.batchesPerEpoch!=null;if(x.assert(r.optimizer!=null,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),x.assert(e!=null,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),x.assert(e.epochs!=null&&e.epochs>0&&Number.isInteger(e.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${e.epochs}`),x.assert(!o||e.batchesPerEpoch>0&&Number.isInteger(e.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${e.batchesPerEpoch}`),x.assert(e.validationSplit==null,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),r.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");r.isTraining=!0;try{let n=e.validationData!=null,s,i;if(n)if(a1(e.validationData))x.assert(e.validationBatches==null||e.validationBatches>0&&Number.isInteger(e.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${e.validationBatches}`);else{let g=gW(e.validationData);s=g.xs,i=g.ys}let a=r.makeTrainFunction(),l=r.getDedupedMetricsNames(),u;n?u=l.slice().concat(l.map(g=>"val_"+g)):u=l.slice();let c=lg(e.callbacks,e.yieldEvery),p=e.verbose==null?1:e.verbose,{callbackList:m,history:f}=ug(c,p,e.epochs,null,null,xW(t,e),null,n,u);m.setModel(r),r.history=f,await m.onTrainBegin(),r.stopTraining_=!1;let h=e.initialEpoch==null?0:e.initialEpoch,d=await t.iterator();for(;h<e.epochs;){let g={};await m.onEpochBegin(h);let y=0,b=0;for(o||(d=await t.iterator());!o||y<e.batchesPerEpoch;){let w=await d.next();if(o&&w.done){console.warn(`You provided \`batchesPerEpoch\` as ${e.batchesPerEpoch}, but your dataset iterator ran out of data after ${y} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${e.batchesPerEpoch*e.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(w.value!=null){let{xs:C,ys:I}=l1(r,w.value),$={};$.batch=b,$.size=C[0].shape[0],await m.onBatchBegin(b,$);let A=[];if(e.classWeight!=null){let P=yg(e.classWeight,r.outputNames);for(let B=0;B<P.length;++B)A.push(await bg(I[B],null,P[B]))}let _=C.concat(I).concat(A),O=a(_);yt(_);for(let P=0;P<l.length;++P){let B=l[P],V=O[P];$[B]=V,ue(V)}await m.onBatchEnd(b,$),ng($),b++,y++}if(o?y>=e.batchesPerEpoch:w.done){if(n){let C;a1(e.validationData)?C=Xt(await r.evaluateDataset(e.validationData,{batches:e.validationBatches})):C=Xt(r.evaluate(s,i,{batchSize:e.validationBatchSize==null?dW:e.validationBatchSize,verbose:0}));for(let I=0;I<r.metricsNames.length;++I)g[`val_${r.metricsNames[I]}`]=C[I]}break}if(r.stopTraining_)break}if(await m.onEpochEnd(h,g),h++,r.stopTraining_)break}return await m.onTrainEnd(),await r.history.syncData(),r.history}finally{r.isTraining=!1}}function xW(r,t){let e=null;return t.batchesPerEpoch!=null?e=t.batchesPerEpoch:Number.isFinite(r.size)&&(e=r.size),e}function a1(r){return typeof r.iterator=="function"}function yW(r){return typeof r.next=="function"}async function c1(r,t,e){e=e||{};let o=e.batches!=null,n=r.testFunction,s=[];if(e.verbose>0)throw new gt("Verbose mode is not implemented yet.");x.assert(!o||e.batches>0&&Number.isInteger(e.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(e.batches)}`);let i=yW(t)?t:await t.iterator(),a=0,l=0;for(;!o||l<e.batches;){let u=await i.next();if(s=z(()=>{if(u.value){let{xs:c,ys:p}=l1(r,u.value),m=c.concat(p),f=z(()=>n(m));if(yt(m),l===0)for(let d=0;d<f.length;++d)s.push(nt(0));let h=m[0].shape[0];for(let d=0;d<f.length;++d){let g=f[d],y=s[d];s[d]=z(()=>U(s[d],D(h,g))),l>0&&yt(y)}yt(f),a+=h,++l}return s}),u.done){o&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${e.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let u=0;u<s.length;++u){let c=s[u];s[u]=et(s[u],a),yt(c)}return Xe(s)}function wg(r){x.assert(r>0&&Number.isInteger(r),()=>`batchSize is required to be a positive integer, but got ${r}`)}function cp(r,t,e){return r==null?[null]:Array.isArray(r)?r.map(o=>Vs(o,t,e-t)):Vs(r,t,e-t)}function Cg(r,t){return z(()=>r==null?null:Array.isArray(r)?r.map(e=>Cg(e,t)):Qd(r,t.dtype==="int32"?t:q(t,"int32")))}function vg(r,t){let e=[],o=0,n=null;for(;o<r;)n=o+t,n>=r&&(n=r),e.push([o,n]),o=n;return e}async function bW(r,t,e,o,n,s,i,a,l,u,c,p,m,f,h){n==null&&(n=32),s==null&&(s=1),c==null&&(c=!0),m==null&&(m=0);let d=!1;if(l!=null&&u!=null&&(d=!0),h!=null&&(d=!0,f==null))throw new L("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");let g=r.checkNumSamples(e,n,f,"steps_per_epoch"),y;g!=null&&(y=dr(0,g)),i==null&&(i=1);let{callbackList:b,history:w}=ug(a,i,s,m,g,f,n,d,p);b.setModel(r),r.history=w,await b.onTrainBegin(),r.stopTraining_=!1;for(let C=m;C<s;++C){await b.onEpochBegin(C);let I={};if(f!=null)throw new gt("stepsPerEpoch mode is not implemented yet.");{if(c==="batch")throw new gt("batch shuffling is not implemneted yet");c&&x.shuffle(y);let $=Ce(y),A=vg(g,n);for(let _=0;_<A.length;++_){let O={};if(await b.onBatchBegin(_,O),z(()=>{let P=A[_][0],B=A[_][1],V=Vs($,P,B-P);O.batch=_,O.size=B-P;let G=Cg(e,V),H=t(G);for(let W=0;W<o.length;++W){let X=o[W],Z=H[W];O[X]=Z,ue(Z)}if(_===A.length-1&&d){let W=r.testLoop(l,u,n);for(let X=0;X<o.length;++X){let Z=o[X],K=W[X];ue(K),I["val_"+Z]=K}}}),await b.onBatchEnd(_,O),ng(O),r.stopTraining_)break}$.dispose()}if(await b.onEpochEnd(C,I),r.stopTraining_)break}return await b.onTrainEnd(),await r.history.syncData(),r.history}async function p1(r,t,e,o={}){if(r.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");r.isTraining=!0;let n,s,i,a,l,u,c,p,m;try{let f=o.batchSize==null?32:o.batchSize;wg(f);let h=!1,d=await r.standardizeUserData(t,e,o.sampleWeight,o.classWeight,h,f);n=d[0],s=d[1],m=d[2];let g=!1,y;if(o.validationData!=null&&o.validationData.length>0){if(g=!0,o.validationData.length===2)l=o.validationData[0],u=o.validationData[1];else throw o.validationData.length===3?new gt("validationData including sample weights is not supported yet."):new L(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${o.validationData} is invalid.`);let O=!0,P=await r.standardizeUserData(l,u,null,null,O,f);c=P[0],p=P[1],y=c.concat(p)}else if(o.validationSplit!=null&&o.validationSplit>0&&o.validationSplit<1){g=!0;let O=Math.floor(n[0].shape[0]*(1-o.validationSplit)),P=n[0].shape[0];c=cp(n,O,P),i=n,n=cp(n,0,O),p=cp(s,O,P),a=s,s=cp(s,0,O),y=c.concat(p)}else o.validationSteps!=null&&(g=!0);let b=n.concat(s).concat(m);r.checkTrainableWeightsConsistency();let w=r.makeTrainFunction(),C=r.getDedupedMetricsNames(),I,$;g?(r.makeTestFunction(),I=r.testFunction,$=C.slice().concat(C.map(O=>"val_"+O))):(I=null,y=[],$=C.slice());let A=lg(o.callbacks,o.yieldEvery);return await bW(r,w,b,C,f,o.epochs,o.verbose,A,I,y,o.shuffle,$,o.initialEpoch,null,null)}finally{r.isTraining=!1,Ao(n,t),Ao(s,e),Ao(i,t),Ao(a,e),Ao(c,l),Ao(p,u),m!=null&&yt(m)}}function s0(r){let t=[];r instanceof Dt&&(r=[r]);for(let e=0;e<r.length;++e){let o=r[e];if(o.rank===1)t.push(Gs(o,1));else{if(o.rank===0)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(o)}}return t}function Ao(r,t){if(r==null)return;let e=[];if(t instanceof Dt)e.push(t.id);else if(Array.isArray(t))t.forEach(n=>e.push(n.id));else if(t!=null)for(let n in t){let s=t[n];e.push(s.id)}let o=[];if(r instanceof Dt)e.indexOf(r.id)===-1&&o.push(r);else if(Array.isArray(r))r.forEach(n=>{e.indexOf(n.id)===-1&&o.push(n)});else if(r!=null)for(let n in r){let s=r[n];e.indexOf(s.id)===-1&&o.push(s)}o.forEach(n=>{n.isDisposed||n.dispose()})}function wW(r){return r instanceof Dt}function i0(r){return Array.isArray(r)}function m1(r){return!wW(r)&&!i0(r)}function f1(r,t,e,o=!0,n=""){if(t==null||t.length===0){if(r!=null){let i=!1;if(i0(r)&&r.length>0)i=!0;else if(m1(r)){for(let a in r)if(r.hasOwnProperty(a)){i=!0;break}}else i=!0;if(i)throw new L(`Error when checking model ${n} expected no data, but got ${r}`)}return[]}if(r==null)return t.map(i=>null);let s;if(m1(r)){r=r,s=[];for(let i of t){if(r[i]==null)throw new L(`No data provided for "${i}". Need data for each key in: ${t}`);s.push(r[i])}}else if(i0(r)){if(r=r,r.length!==t.length)throw new L(`Error when checking model ${n}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${r}`);s=r}else{if(r=r,t.length>1)throw new L(`The model ${n} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${r.shape}`);s=[r]}if(s=s0(s),e!=null)for(let i=0;i<t.length;++i){if(e[i]==null)continue;let a=s[i];if(a.shape.length!==e[i].length)throw new L(`Error when checking ${n}: expected ${t[i]} to have ${e[i].length} dimension(s). but got array with shape ${a.shape}`);for(let l=0;l<e[i].length;++l){if(l===0&&!o)continue;let u=a.shape[l],c=e[i][l];if(c!=null&&c>=0&&u!==c)throw new L(`${n} expected a batch of elements where each example has shape [${e[i].slice(1,e[i].length)}] (i.e.,tensor shape [*,${e[i].slice(1,e[i].length)}]) but the ${n} received an input with ${a.shape[0]} examples, each with shape [${a.shape.slice(1,a.shape.length)}] (tensor shape [${a.shape}])`)}}return s}function CW(r,t,e){let o=To(r.map(s=>s.shape[0]));o.sort();let n=To(t.map(s=>s.shape[0]));if(n.sort(),o.length>1)throw new L(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(r.map(s=>s.shape))}`);if(n.length>1)throw new L(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(s=>s.shape))}`);if(o.length>0&&n.length>0&&!x.arraysEqual(o,n))throw new L(`Input Tensors should have the same number of samples as target Tensors. Found ${o[0]} input sample(s) and ${n[0]} target sample(s).`)}function vW(r,t,e){let o=[zl,lp,Ml];for(let n=0;n<r.length;++n){let s=r[n],i=t[n],a=e[n];if(i!=null){if(i===Ml&&s.shape[s.shape.length-1]===1)throw new L(`You are passing a target array of shape ${s.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(o.indexOf(i)!==-1){let l=s.shape.slice(1),u=a.slice(1);for(let c=0;c<l.length;++c){let p=l[c],m=u[c];if(m!=null&&p!==m)throw new L(`A target Tensor with shape ${s.shape} was passed for an output of shape ${a}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}function h1(r,t,e,o=!0,n=""){let s;if(Array.isArray(r)){if(r.length!==t.length)throw new L(`Error when checking model ${n}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${r.length} Tensors(s).`);s=r}else{if(t.length>1)throw new L(`The model expects ${t.length} ${n} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(r.shape)}.`);s=[r]}if(e!=null)for(let i=0;i<t.length;++i){if(e[i]==null)continue;let a=s[i];if(a.shape.length!==e[i].length)throw new L(`Error when checking ${n}: expected ${t[i]} to have ${e[i].length} dimension(s), but got array with shape ${JSON.stringify(a.shape)}`);for(let l=0;l<e[i].length;++l){if(l===0&&!o)continue;let u=a.shape[l],c=e[i][l];if(c!=null&&c!==u)throw new L(`Error when checking ${n}: expected ${t[i]} to have shape ${JSON.stringify(e[i])} but got array with shape ${JSON.stringify(a.shape)}.`)}}}function NW(r,t){if(r==null||Array.isArray(r)&&r.length===0)return t.map(o=>[]);let e;if(typeof r=="string"||typeof r=="function")e=[r];else if(Array.isArray(r)||typeof r=="object")e=r;else throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${r}`);if(Array.isArray(e))return t.map(o=>e);{let o=[];for(let n of t){let s=e.hasOwnProperty(n)?e[n]:[];Array.isArray(s)||(s=[s]),o.push(s)}return o}}var SW="layers-model",Do=class extends Yr{constructor(t){super(t),this.isTraining=!1}summary(t,e,o=console.log){if(!this.built)throw new L("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");o1(this,t,e,o)}compile(t){if(t.loss==null&&(t.loss=[]),this.loss=t.loss,typeof t.optimizer=="string")this.optimizer_=r1(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof lr))throw new L("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(!Array.isArray(t.loss)&&typeof t.loss!="string"&&typeof t.loss!="function"){t.loss=t.loss;for(let i in t.loss)if(this.outputNames.indexOf(i)===-1)throw new L(`Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`);for(let i of this.outputNames)t.loss[i]==null&&console.warn(`Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`),e.push(pg(t.loss[i]))}else if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new L(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);e=t.loss.map(a=>pg(a))}else{let i=pg(t.loss);this.outputs.forEach(a=>{e.push(i)})}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let i=0;i<this.outputs.length;++i){let a=this.internalOutputShapes[i],l=this.outputNames[i];this.feedOutputNames.push(l),this.feedOutputShapes.push(a),this.feedLossFns.push(this.lossFunctions[i])}let o=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],jo("loss",()=>{for(let i=0;i<this.outputs.length;++i){if(o.indexOf(i)!==-1)continue;let a=this.lossFunctions[i];this.outputs.length>1&&(this.metricsTensors.push([a,i]),this.metricsNames.push(this.outputNames[i]+"_loss"))}});let n=NW(t.metrics,this.outputNames),s=(i,a,l)=>{this.outputNames.length>1&&(a=this.outputNames[i]+"_"+a),this.metricsNames.push(a),this.metricsTensors.push([l,i])};jo("metric",()=>{for(let i=0;i<this.outputs.length;++i){if(o.indexOf(i)!==-1)continue;let a=n[i];(u=>{let c="",p,m,f;for(let h of u){if(typeof h=="string"&&["accuracy","acc","crossentropy","ce"].indexOf(h)!==-1){let g=this.internalOutputShapes[i];g[g.length-1]===1||this.lossFunctions[i]===lp?["accuracy","acc"].indexOf(h)!==-1?m=fg:["crossentropy","ce"].indexOf(h)!==-1&&(m=t0):this.lossFunctions[i]===ap?["accuracy","acc"].indexOf(h)!==-1?m=e0:["crossentropy","ce"].indexOf(h)!==-1&&(m=r0):["accuracy","acc"].indexOf(h)!==-1?m=hg:["crossentropy","ce"].indexOf(h)!==-1&&(m=dg);let y;["accuracy","acc"].indexOf(h)!==-1?y="acc":["crossentropy","ce"].indexOf(h)!==-1&&(y="ce"),f=m,p=c+y}else f=t1(h),p=c+Om(h);let d;jo(p,()=>{d=f}),s(i,p,d)}})(a)}}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){this.collectedTrainableWeights!=null&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(t,e,o={}){let n=o.batchSize==null?32:o.batchSize;wg(n);let s=!0,i=this.standardizeUserDataXY(t,e,s,n);try{let a=i[0].concat(i[1]);this.makeTestFunction();let l=this.testFunction,u=this.testLoop(l,a,n,o.verbose,o.steps);return Xe(u)}finally{Ao(i[0],t),Ao(i[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),c1(this,t,e)}checkNumSamples(t,e,o,n="steps"){let s;if(o!=null){if(s=null,e!=null)throw new L(`If ${n} is set, batchSize must be null or undefined.Got batchSize = ${e}`)}else if(t!=null)Array.isArray(t)?s=t[0].shape[0]:s=t.shape[0];else throw new L(`Either the input data should have a defined shape, or ${n} shoud be specified.`);return s}execute(t,e){if(Array.isArray(e)&&e.length===0)throw new L("`outputs` is an empty Array, which is not allowed.");let o=Array.isArray(e),n=o?e:[e],s=this.retrieveSymbolicTensors(n),i=new $o;if(t instanceof Dt&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new L(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let l=0;l<this.inputs.length;++l)i.add(this.inputs[l],t[l])}else for(let l of this.inputs){let u=t[l.name];if(u==null)throw new L(`No value is provided for the model's input ${l.name}`);i.add(l,u)}let a=Ll(s,i);return o?a:a[0]}retrieveSymbolicTensors(t){let e=So(null,t.length),o=t.length;for(let n of this.layers){let s=Array.isArray(n.output)?n.output:[n.output],i=s.map(a=>a.name);for(let a=0;a<t.length;++a){let l=i.indexOf(t[a]);if(l!==-1&&(e[a]=s[l],o--),o===0)break}if(o===0)break}if(o>0){let n=[];throw e.forEach((s,i)=>{s==null&&n.push(t[i])}),new L(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return e}predictLoop(t,e=32,o=!1){return z(()=>{let n=this.checkNumSamples(t);if(o)throw new gt("Verbose predictLoop() is not implemented yet.");let s=vg(n,e),i=this.outputs.map(a=>[]);for(let a=0;a<s.length;++a)z(()=>{let u=s[a][0],c=s[a][1],p=cp(t,u,c),m=[];if(Array.isArray(p))for(let h=0;h<p.length;++h)m.push({key:this.inputs[h],value:p[h]});else m.push({key:this.inputs[0],value:p});let f=new $o(m);return Ll(this.outputs,f)}).forEach((u,c)=>i[c].push(u));return Xe(i.map(a=>Bt(a,0)))})}predict(t,e={}){let o=s0(t);h1(o,this.inputNames,this.feedInputShapes,!1);try{let n=e.batchSize==null?32:e.batchSize;return wg(n),this.predictLoop(o,n)}finally{Ao(o,t)}}predictOnBatch(t){h1(t,this.inputNames,this.feedInputShapes,!0);let e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e,o=!0,n){if(this.optimizer_==null)throw new cr("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");let s=[];for(let i=0;i<this.feedOutputShapes.length;++i){let a=this.feedOutputShapes[i];this.feedLossFns[i]===ap?s.push(a.slice(0,a.length-1).concat([1])):s.push(a)}if(t=f1(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=f1(e,this.feedOutputNames,s,!1,"target"),CW(t,e,null),vW(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&n!=null&&n>0&&t[0].shape[0]%n!==0)throw new L(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${n}. Found: ${t[0].shape[0]} sample(s).`);return[t,e]}async standardizeUserData(t,e,o,n,s=!0,i){let[a,l]=this.standardizeUserDataXY(t,e,s,i);if(o!=null)throw new Error("sample weight is not supported yet.");let u=null;if(n!=null){let c=yg(n,this.outputNames);u=[];for(let p=0;p<c.length;++p)u.push(await bg(l[p],null,c[p]))}return[a,l,u]}testLoop(t,e,o,n=0,s){return z(()=>{let i=this.checkNumSamples(e,o,s,"steps"),a=[];if(n>0)throw new gt("Verbose mode is not implemented yet.");if(s!=null)throw new gt("steps mode in testLoop() is not implemented yet");{let l=vg(i,o),u=Ce(dr(0,i));for(let c=0;c<l.length;++c){let p=l[c][0],m=l[c][1],f=Vs(u,p,m-p),h=Cg(e,f),d=t(h);if(c===0)for(let g=0;g<d.length;++g)a.push(nt(0));for(let g=0;g<d.length;++g){let y=d[g];a[g]=U(a[g],D(m-p,y))}}for(let c=0;c<a.length;++c)a[c]=et(a[c],i)}return a})}getDedupedMetricsNames(){let t=this.metricsNames,e=[];for(let o=0;o<t.length;++o){let n=t[o],s=n;Uw(t,n)>1&&(s+=`_${Uw(t.slice(0,o),n)}`),e.push(s)}return e}makeTrainFunction(){return t=>{let e=[],o=t.slice(0,this.inputs.length),n=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+this.outputs.length*2),i=[],a=()=>{let p=[];for(let d=0;d<this.inputs.length;++d)p.push({key:this.inputs[d],value:o[d]});let m=new $o(p),f=Ll(this.outputs,m,{training:!0}),h;for(let d=0;d<this.lossFunctions.length;++d){let g=this.lossFunctions[d],y=g(n[d],f[d]);s[d]!=null&&(y=s1(y,s[d]));let b=ee(y);e.push(b),d===0?h=y:h=U(h,y)}for(let d=0;d<this.metricsTensors.length;++d){let g;if(this.outputs.length>1&&d<this.outputs.length)g=e[d];else{let y=this.metricsTensors[d][0],b=this.metricsTensors[d][1];g=ee(y(n[b],f[b]))}ue(g),i.push(g)}return h=ee(h),this.calculateLosses().forEach(d=>{h=U(h,d)}),h},l=this.collectedTrainableWeights.map(p=>p.read()),u=!0;return[this.optimizer_.minimize(a,u,l)].concat(i)}}makeTestFunction(){this.testFunction=t=>z(()=>{let e=[],o,n=t.slice(0,this.inputs.length),s=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let u=0;u<this.inputs.length;++u)i.push({key:this.inputs[u],value:n[u]});let a=new $o(i),l=Ll(this.outputs,a);for(let u=0;u<this.lossFunctions.length;++u){let c=this.lossFunctions[u],p=ee(c(s[u],l[u]));u===0?o=p:o=U(o,p),e.push(o)}for(let u=0;u<this.metricsTensors.length;++u){let c=this.metricsTensors[u][0],p=this.metricsTensors[u][1],m=ee(c(s[p],l[p]));e.push(m)}return e})}async fit(t,e,o={}){return p1(this,t,e,o)}async fitDataset(t,e){return u1(this,t,e)}async trainOnBatch(t,e){let o=await this.standardizeUserData(t,e),n=o[0],s=o[1],a=this.makeTrainFunction()(n.concat(s)),l=[];for(let u of a){let c=await u.data();l.push(c[0])}return yt(a),Ao(o[0],t),Ao(o[1],e),Xe(l)}getNamedWeights(t){let e=[],o=t!=null&&t.trainableOnly,n=o?this.trainableWeights:this.weights,s=this.getWeights(o);for(let i=0;i<n.length;++i)o&&!n[i].trainable||e.push({name:n[i].originalName,tensor:s[i]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){let t=super.dispose();if(t.refCountAfterDispose===0&&this.optimizer!=null&&this.isOptimizerOwned){let e=oa().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-oa().numTensors}return t}getLossIdentifiers(){let t;if(typeof this.loss=="string")t=Io(this.loss);else if(Array.isArray(this.loss)){for(let e of this.loss)if(typeof e!="string")throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map(e=>Io(e))}else{let e=Object.keys(this.loss);t={};let o=this.loss;for(let n of e)if(typeof o[n]=="string")t[n]=Io(o[n]);else throw new Error("Serialization of non-string loss is not supported.")}return t}getMetricIdentifiers(){if(typeof this.metrics=="string"||typeof this.metrics=="function")return[Io(Om(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(t=>Io(Om(t)));{let t={};for(let e in this.metrics)t[e]=Io(Om(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(t.weighted_metrics!=null)throw new Error("Loading weight_metrics is not supported yet.");if(t.loss_weights!=null)throw new Error("Loading loss_weights is not supported yet.");if(t.sample_weight_mode!=null)throw new Error("Loading sample_weight_mode is not supported yet.");let e=Lm(t.optimizer_config),o=Xr(e),n;if(typeof t.loss=="string")n=Bs(t.loss);else if(Array.isArray(t.loss))n=t.loss.map(i=>Bs(i));else if(t.loss!=null){n={};for(let i in t.loss)n[i]=Bs(t.loss[i])}let s;if(Array.isArray(t.metrics))s=t.metrics.map(i=>Bs(i));else if(t.metrics!=null){s={};for(let i in t.metrics)s[i]=Bs(t.metrics[i])}this.compile({loss:n,metrics:s,optimizer:o})}async save(t,e){if(typeof t=="string"){let u=Wo.getSaveHandlers(t);if(u.length===0)throw new L(`Cannot find any save handlers for URL '${t}'`);if(u.length>1)throw new L(`Found more than one (${u.length}) save handlers for URL '${t}'`);t=u[0]}if(t.save==null)throw new L("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");let o=await Wo.encodeWeights(this.getNamedWeights(e)),n=!1,s=null,a={modelTopology:this.toJSON(s,n),format:SW,generatedBy:`TensorFlow.js tfjs-layers v${up}`,convertedBy:null};if((e==null?!1:e.includeOptimizer)&&this.optimizer!=null){a.trainingConfig=this.getTrainingConfig();let u="optimizer",{data:c,specs:p}=await Wo.encodeWeights(await this.optimizer.getWeights(),u);o.specs.push(...p),o.data=Wo.concatenateArrayBuffers([o.data,c])}return this.userDefinedMetadata!=null&&(n0(this.userDefinedMetadata,this.name,!0),a.userDefinedMetadata=this.userDefinedMetadata),a.weightData=o.data,a.weightSpecs=o.specs,t.save(a)}setUserDefinedMetadata(t){n0(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}};Do.className="Model";j.registerClass(Do);var Ng=class extends Do{};Ng.className="Functional";j.registerClass(Ng);var Hs=class extends Do{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=t.name!=null?t.name:Ta("sequential_"),t.layers!=null)for(let e of t.layers)this.add(e)}checkShape(t){if(t.inboundNodes[0].outputTensors[0].shape.some(o=>o<0))throw new L(`Negative dimension size caused by adding layer ${t.name} with input shape [${t.inboundNodes[0].inputTensors[0].shape}]`)}add(t){let e=t instanceof Hs||t instanceof Do,o;if(e){if(o=t,o.outputs.length!==1)throw new L("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(o.inputs.length!==1)throw new L("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(this.outputs.length===0){if(t.inboundNodes.length===0){if(t.batchInputShape==null)throw new L("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");let n=Zw({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(n)}if(e)this.outputs=o.outputs,this.inputs=o.inputs;else{if(t.inboundNodes.length!==1)throw new L(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);if(t.inboundNodes[0].outputTensors.length!==1)throw new L("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=Yw(this.outputs[0])}this.inboundNodes=[],new Ws({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:So(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(n=>n.shape),outputShapes:this.outputs[0].shape})}else{let n=t.apply(this.outputs[0]);if(Array.isArray(n))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[n],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(this.layers.length===0)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),this.layers.length===0)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{let t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return this.model==null&&this.build(),this.model.call(t,e)}build(t){if(Lt(t),this.inputs.length===0||this.outputs.length===0)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Do({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e,o=console.log){this.built||this.build(),super.summary(t,e,o)}setWeights(t){this.model==null&&this.build(),this.model.setWeights(t)}evaluate(t,e,o={}){if(!this.built)throw new cr("The model needs to be compiled before being used.");return this.model.evaluate(t,e,o)}async evaluateDataset(t,e){if(!this.built)throw new cr("The model needs to be compiled before being used.");return this.model.evaluateDataset(t,e)}predict(t,e={}){return this.model==null&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return this.model==null&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return this.model==null?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e,o={}){if(!this.built)throw new cr("The model needs to be compiled before being used.");return this.model.fit(t,e,o)}async fitDataset(t,e){if(!this.built)throw new cr("The model needs to be compiled before being used.");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e,o={},n=!1){let s,i={};if(e instanceof Array){if(e[0].className==null||e[0].className==="Merge")throw new L("Legacy serialization format not supported yet.");s=e}else x.assert(e.layers!=null,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),s=e.layers,delete e.layers,i=e;let a=new t(i);if(!(a instanceof Hs))throw new gt(`Sequential.fromConfig called on non-Sequential input: ${a}`);for(let l of s){let c=Xr(l,void 0,n);n&&c.setFastWeightInitDuringBuild(!0),a.add(c)}return a}set stopTraining(t){if(this.model==null)throw new L("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t}get stopTraining(){if(this.model==null)throw new L("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){let t=[];for(let e of this.layers){let o={};o.className=e.getClassName(),o.config=e.getConfig(),t.push(o)}return{name:this.name,layers:t}}};Hs.className="Sequential";j.registerClass(Hs);var yr=class extends j.Serializable{getConfig(){return{}}},Sg=class extends yr{apply(t,e=1){return zk(t,e)}};Sg.className="elu";j.registerClass(Sg);var Ig=class extends yr{apply(t){return Lc(t)}};Ig.className="selu";j.registerClass(Ig);var Tg=class extends yr{apply(t){return er(t)}};Tg.className="relu";j.registerClass(Tg);var kg=class extends yr{apply(t){return z(()=>In(6,er(t)))}};kg.className="relu6";j.registerClass(kg);var Eg=class extends yr{apply(t){return t}};Eg.className="linear";j.registerClass(Eg);var $g=class extends yr{apply(t){return fr(t)}};$g.className="sigmoid";j.registerClass($g);var Ag=class extends yr{apply(t){return Bk(t)}};Ag.className="hardSigmoid";j.registerClass(Ag);var Dg=class extends yr{apply(t){return Uo(t)}};Dg.className="softplus";j.registerClass(Dg);var Fg=class extends yr{apply(t){return Mk(t)}};Fg.className="softsign";j.registerClass(Fg);var Rg=class extends yr{apply(t){return yn(t)}};Rg.className="tanh";j.registerClass(Rg);var pp=class extends yr{apply(t,e=-1){return ga(t,e)}};pp.className="softmax";j.registerClass(pp);var _g=class extends yr{apply(t,e=-1){return Ac(t,e)}};_g.className="logSoftmax";j.registerClass(_g);var Og=class extends yr{apply(t,e=1){return z(()=>D(fr(D(t,e)),t))}};Og.className="swish";j.registerClass(Og);var Lg=class extends yr{apply(t){return z(()=>D(t,yn(Uo(t))))}};Lg.className="mish";j.registerClass(Lg);function Yo(r){return r.getClassName()}function a0(r,t={}){return En(r,j.SerializationMap.getMap().classNameMap,t,"activation")}function Zo(r){if(r==null){let t={};return t.className="linear",t.config={},a0(t)}if(typeof r=="string"){let t={};return t.className=r,t.config={},a0(t)}else return r instanceof yr?r:a0(r)}function IW(r){if(r!=null&&typeof r!="object")throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${r}`)}var Pg=class extends j.Serializable{},Pm=class extends Pg{constructor(t){super(),IW(t),this.l1=t==null||t.l1==null?.01:t.l1,this.l2=t==null||t.l2==null?.01:t.l2,this.hasL1=this.l1!==0,this.hasL2=this.l2!==0}apply(t){return z(()=>{let e=re([1]);return this.hasL1&&(e=U(e,st(D(this.l1,se(t))))),this.hasL2&&(e=U(e,st(D(this.l2,_l(t))))),F(e,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e.l1,l2:e.l2})}};Pm.className="L1L2";j.registerClass(Pm);var d1={l1l2:"L1L2"};function Ht(r){return jc(r)}function g1(r,t={}){return En(r,j.SerializationMap.getMap().classNameMap,t,"regularizer")}function Zt(r){if(r==null)return null;if(typeof r=="string"){let e={className:r in d1?d1[r]:r,config:{}};return g1(e)}else return r instanceof Pg?r:g1(r)}var zm=class extends Et{constructor(t){super(t==null?{}:t),this.supportsMasking=!0,t!=null&&(this.maxValue=t.maxValue)}call(t,e){t=vt(t);let o=er(t);return this.maxValue!=null&&(o=Pe(o,0,this.maxValue)),o}computeOutputShape(t){return t}getConfig(){let t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}};zm.className="ReLU";j.registerClass(zm);var Mm=class extends Et{constructor(t){super(t==null?{}:t),this.DEFAULT_ALPHA=.3,t==null&&(t={}),this.alpha=t.alpha==null?this.DEFAULT_ALPHA:t.alpha}call(t,e){let o=vt(t);return ua(o,this.alpha)}computeOutputShape(t){return t}getConfig(){let t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}};Mm.className="LeakyReLU";j.registerClass(Mm);var Bm=class extends Et{constructor(t){if(super(t==null?{}:t),this.DEFAULT_ALPHA_INITIALIZER="zeros",t==null&&(t={}),this.supportsMasking=!0,this.alphaInitializer=Kt(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Zt(t.alphaRegularizer),this.alphaConstraint=de(t.alphaConstraint),t.sharedAxes==null)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else if(typeof t.sharedAxes=="number")this.sharedAxes=[t.sharedAxes];else throw new L(`Expected sharedAxes to be a number or an array of numbers, but got ${t.sharedAxes}`)}build(t){t=Lt(t);let e=t.slice(1);if(this.sharedAxes!=null)for(let n of this.sharedAxes)e[n-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);let o={};if(this.sharedAxes!=null)for(let n=1;n<t.length;++n)o[n]=t[n];this.inputSpec=[new Yt({ndim:t.length,axes:o})],this.built=!0}call(t,e){return t=vt(t),ha(t,this.alpha.read())}getConfig(){let t={alphaInitializer:oe(this.alphaInitializer),alphaRegularizer:Ht(this.alphaRegularizer),alphaConstraint:he(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}};Bm.className="PReLU";j.registerClass(Bm);var Vm=class extends Et{constructor(t){if(super(t==null?{}:t),this.DEFAULT_ALPHA=1,t==null&&(t={}),t.alpha!=null&&t.alpha!==this.DEFAULT_ALPHA)throw new gt(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);this.alpha=t.alpha==null?this.DEFAULT_ALPHA:t.alpha}call(t,e){let o=vt(t);return Cn(o)}computeOutputShape(t){return t}getConfig(){let t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}};Vm.className="ELU";j.registerClass(Vm);var Gm=class extends Et{constructor(t){super(t==null?{}:t),this.DEFAULT_THETA=1,t==null&&(t={}),this.theta=t.theta==null?this.DEFAULT_THETA:t.theta}call(t,e){let o=vt(t);return D(o,q(Se(o,this.theta),"float32"))}computeOutputShape(t){return t}getConfig(){let t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}};Gm.className="ThresholdedReLU";j.registerClass(Gm);var Wm=class extends Et{constructor(t){super(t==null?{}:t),this.DEFAULT_AXIS=1,t==null&&(t={}),this.softmax=new pp().apply,this.axis=t.axis==null?this.DEFAULT_AXIS:t.axis}call(t,e){let o=vt(t);return this.softmax(o,this.axis)}computeOutputShape(t){return t}getConfig(){let t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}};Wm.className="Softmax";j.registerClass(Wm);function $a(r,t,e){if(typeof r=="number")return So(r,t);if(r.length!==t)throw new L(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${r.length} elements.`);for(let o=0;o<t;++o){let n=r[o];if(!_k(n))throw new L(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(r)} including a non-integer number ${n}`)}return r}function Gr(r,t,e,o,n=1){if(r==null)return r;let s=t+(t-1)*(n-1),i;return e==="same"?i=r:i=r-s+1,Math.floor((i+o-1)/o)}function Jo(r,t,e,o){if(r==null)return null;if(o==="valid")r=r*t+Xo([e-t,0]);else if(o==="same")r=r*t;else throw new L(`Unsupport padding mode: ${o}.`);return r}function Xm(r,t){return z(()=>(ce(t),t==="channelsFirst"?St(r,[0,2,3,1]):r))}function l0(r,t){return z(()=>(ce(t),t==="channelsFirst"?St(r,[0,2,3,4,1]):r))}function kW(r,t,e,o=1,n="valid",s,i=1){return z(()=>{if(s==null&&(s=$r()),ce(s),r.shape.length!==3)throw new L(`The input of a conv1dWithBias operation should be 3, but is ${r.shape.length} instead.`);if(t.shape.length!==3)throw new L(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(e!=null&&e.shape.length!==1)throw new L(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if(s==="channelsFirst"&&(r=St(r,[0,2,1])),n==="causal")throw new gt("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let a=Sc(r,t,o,n==="same"?"same":"valid","NWC",i);return e!=null&&(a=Ar(a,e)),a})}function x1(r,t,e,o=[1,1],n="valid",s,i,a=null){return z(()=>{if(s==null&&(s=$r()),ce(s),r.rank!==3&&r.rank!==4)throw new L(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${r.rank}.`);if(t.rank!==3&&t.rank!==4)throw new L(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${r.rank}.`);let l=Xm(r,s);if(n==="causal")throw new gt("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=ba.conv2d({x:l,filter:t,strides:o,pad:n==="same"?"same":"valid",dilations:i,dataFormat:"NHWC",bias:e,activation:a}),s==="channelsFirst"&&(l=St(l,[0,3,1,2])),l})}function EW(r,t,e,o=[1,1,1],n="valid",s,i){return z(()=>{if(s==null&&(s=$r()),ce(s),r.rank!==4&&r.rank!==5)throw new L(`conv3dWithBias expects input to be of rank 4 or 5, but received ${r.rank}.`);if(t.rank!==4&&t.rank!==5)throw new L(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${r.rank}.`);let a=l0(r,s);if(n==="causal")throw new gt("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return a=Zh(a,t,o,n==="same"?"same":"valid","NDHWC",i),e!=null&&(a=Ar(a,e)),s==="channelsFirst"&&(a=St(a,[0,4,1,2,3])),a})}var Bl=class extends Et{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Bl.verifyArgs(e),this.rank=t,ke(this.rank,"rank"),this.rank!==1&&this.rank!==2&&this.rank!==3)throw new gt(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=$a(e.kernelSize,t,"kernelSize"),this.strides=$a(e.strides==null?1:e.strides,t,"strides"),this.padding=e.padding==null?"valid":e.padding,Er(this.padding),this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,ce(this.dataFormat),this.activation=Zo(e.activation),this.useBias=e.useBias==null?!0:e.useBias,this.biasInitializer=Kt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=de(e.biasConstraint),this.biasRegularizer=Zt(e.biasRegularizer),this.activityRegularizer=Zt(e.activityRegularizer),this.dilationRate=$a(e.dilationRate==null?1:e.dilationRate,t,"dilationRate"),this.rank===1&&Array.isArray(this.dilationRate)&&this.dilationRate.length!==1)throw new L(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(this.rank===2){if(typeof this.dilationRate=="number")this.dilationRate=[this.dilationRate,this.dilationRate];else if(this.dilationRate.length!==2)throw new L(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(this.rank===3){if(typeof this.dilationRate=="number")this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(this.dilationRate.length!==3)throw new L(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}}static verifyArgs(t){if(ao("kernelSize"in t,"required key 'kernelSize' not in config"),typeof t.kernelSize!="number"&&!Hd(t.kernelSize,"number",1,3))throw new L(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){let t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Yo(this.activation),useBias:this.useBias,biasInitializer:oe(this.biasInitializer),biasRegularizer:Ht(this.biasRegularizer),activityRegularizer:Ht(this.activityRegularizer),biasConstraint:he(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}},Aa=class extends Bl{constructor(t,e){super(t,e),this.kernel=null,Aa.verifyArgs(e),this.filters=e.filters,ke(this.filters,"filters"),this.kernelInitializer=Kt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=de(e.kernelConstraint),this.kernelRegularizer=Zt(e.kernelRegularizer)}build(t){t=Lt(t);let e=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[e]==null)throw new L(`The channel dimension of the input should be defined. Found ${t[e]}`);let o=t[e],n=this.kernelSize.concat([o,this.filters]);this.kernel=this.addWeight("kernel",n,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:o}}],this.built=!0}call(t,e){return z(()=>{t=vt(t);let o,n=this.bias==null?null:this.bias.read(),s=qd(this.activation.getClassName());if(s!=null&&this.rank===2)o=x1(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(this.rank===1)o=kW(t,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(this.rank===2)o=x1(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else if(this.rank===3)o=EW(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else throw new gt("convolutions greater than 3D are not implemented yet.");this.activation!=null&&(o=this.activation.apply(o))}return o})}computeOutputShape(t){t=Lt(t);let e=[],o=this.dataFormat==="channelsLast"?t.slice(1,t.length-1):t.slice(2);for(let s=0;s<o.length;++s){let i=Gr(o[s],this.kernelSize[s],this.padding,this.strides[s],typeof this.dilationRate=="number"?this.dilationRate:this.dilationRate[s]);e.push(i)}let n=[t[0]];return this.dataFormat==="channelsLast"?(n=n.concat(e),n.push(this.filters)):(n.push(this.filters),n=n.concat(e)),n}getConfig(){let t={filters:this.filters,kernelInitializer:oe(this.kernelInitializer),kernelRegularizer:Ht(this.kernelRegularizer),kernelConstraint:he(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||typeof t.filters!="number"||t.filters<1)throw new L(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`)}},Da=class extends Aa{constructor(t){super(2,t),Da.verifyArgs(t)}getConfig(){let t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if(typeof t.kernelSize!="number"&&!Hd(t.kernelSize,"number",1,2))throw new L(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`)}};Da.className="Conv2D";j.registerClass(Da);var Fa=class extends Aa{constructor(t){super(3,t),Fa.verifyArgs(t)}getConfig(){let t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if(typeof t.kernelSize!="number"&&!(Array.isArray(t.kernelSize)&&(t.kernelSize.length===1||t.kernelSize.length===3)))throw new L(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`)}};Fa.className="Conv3D";j.registerClass(Fa);var Um=class extends Da{constructor(t){if(super(t),this.inputSpec=[new Yt({ndim:4})],this.padding!=="same"&&this.padding!=="valid")throw new L(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(t){if(t=Lt(t),t.length!==4)throw new L("Input should have rank 4; Received input shape: "+JSON.stringify(t));let e=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[e]==null)throw new L("The channel dimension of the inputs should be defined. Found `None`.");let o=t[e],n=this.kernelSize.concat([this.filters,o]);this.kernel=this.addWeight("kernel",n,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Yt({ndim:4,axes:{[e]:o}})],this.built=!0}call(t,e){return z(()=>{let o=vt(t);if(o.shape.length!==4)throw new L(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${o.shape.length}`);let n=o.shape,s=n[0],i,a;this.dataFormat==="channelsFirst"?(i=2,a=3):(i=1,a=2);let l=n[i],u=n[a],c=this.kernelSize[0],p=this.kernelSize[1],m=this.strides[0],f=this.strides[1],h=Jo(l,m,c,this.padding),d=Jo(u,f,p,this.padding),g=[s,h,d,this.filters];this.dataFormat!=="channelsLast"&&(o=St(o,[0,2,3,1]));let y=Tc(o,this.kernel.read(),g,this.strides,this.padding);return this.dataFormat!=="channelsLast"&&(y=St(y,[0,3,1,2])),this.bias!=null&&(y=Ar(y,this.bias.read(),this.dataFormat)),this.activation!=null&&(y=this.activation.apply(y)),y})}computeOutputShape(t){t=Lt(t);let e=t.slice(),o,n,s;this.dataFormat==="channelsFirst"?(o=1,n=2,s=3):(o=3,n=1,s=2);let i=this.kernelSize[0],a=this.kernelSize[1],l=this.strides[0],u=this.strides[1];return e[o]=this.filters,e[n]=Jo(e[n],l,i,this.padding),e[s]=Jo(e[s],u,a,this.padding),e}getConfig(){let t=super.getConfig();return delete t.dilationRate,t}};Um.className="Conv2DTranspose";j.registerClass(Um);var Hm=class extends Fa{constructor(t){if(super(t),this.inputSpec=[new Yt({ndim:5})],this.padding!=="same"&&this.padding!=="valid")throw new L(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(t){if(t=Lt(t),t.length!==5)throw new L("Input should have rank 5; Received input shape: "+JSON.stringify(t));let e=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[e]==null)throw new L("The channel dimension of the inputs should be defined. Found `None`.");let o=t[e],n=this.kernelSize.concat([this.filters,o]);this.kernel=this.addWeight("kernel",n,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Yt({ndim:5,axes:{[e]:o}})],this.built=!0}call(t,e){return z(()=>{let o=vt(t);if(o.shape.length!==5)throw new L(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${o.shape.length}`);let n=o.shape,s=n[0],i,a,l;this.dataFormat==="channelsFirst"?(l=2,i=3,a=4):(l=1,i=2,a=3);let u=n[l],c=n[i],p=n[a],m=this.kernelSize[0],f=this.kernelSize[1],h=this.kernelSize[2],d=this.strides[0],g=this.strides[1],y=this.strides[2],b=Jo(u,d,m,this.padding),w=Jo(c,g,f,this.padding),C=Jo(p,y,h,this.padding),I=[s,b,w,C,this.filters];this.dataFormat!=="channelsLast"&&(o=St(o,[0,2,3,4,1]));let $=Qh(o,this.kernel.read(),I,this.strides,this.padding);return this.dataFormat!=="channelsLast"&&($=St($,[0,4,1,2,3])),this.bias!==null&&($=Ar($,this.bias.read(),this.dataFormat)),this.activation!==null&&($=this.activation.apply($)),$})}computeOutputShape(t){t=Lt(t);let e=t.slice(),o,n,s,i;this.dataFormat==="channelsFirst"?(o=1,n=2,s=3,i=4):(o=4,n=1,s=2,i=3);let a=this.kernelSize[0],l=this.kernelSize[1],u=this.kernelSize[2],c=this.strides[0],p=this.strides[1],m=this.strides[2];return e[o]=this.filters,e[n]=Jo(e[n],c,a,this.padding),e[s]=Jo(e[s],p,l,this.padding),e[i]=Jo(e[i],m,u,this.padding),e}getConfig(){let t=super.getConfig();return delete t.dilationRate,t}};Hm.className="Conv3DTranspose";j.registerClass(Hm);var zg=class extends Aa{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,e.filters==null)throw new L("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(e.kernelInitializer!=null||e.kernelRegularizer!=null||e.kernelConstraint!=null)throw new L("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(e.padding!=null&&e.padding!=="same"&&e.padding!=="valid")throw new L(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(e.padding)}`);this.depthMultiplier=e.depthMultiplier==null?1:e.depthMultiplier,this.depthwiseInitializer=Kt(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Zt(e.depthwiseRegularizer),this.depthwiseConstraint=de(e.depthwiseConstraint),this.pointwiseInitializer=Kt(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Zt(e.pointwiseRegularizer),this.pointwiseConstraint=de(e.pointwiseConstraint)}build(t){if(t=Lt(t),t.length<this.rank+2)throw new L(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(t)}`);let e=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[e]==null||t[e]<0)throw new L(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(t[e])}`);let o=t[e],n=this.kernelSize.concat([o,this.depthMultiplier]),s=[];for(let a=0;a<this.rank;++a)s.push(1);s.push(o*this.depthMultiplier,this.filters);let i=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",n,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,i,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,i,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,i,this.biasConstraint):this.bias=null,this.inputSpec=[new Yt({ndim:this.rank+2,axes:{[e]:o}})],this.built=!0}call(t,e){return z(()=>{t=vt(t);let o;if(this.rank===1)throw new gt("1D separable convolution is not implemented yet.");return this.rank===2&&(this.dataFormat==="channelsFirst"&&(t=St(t,[0,2,3,1])),o=Pc(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(o=Ar(o,this.bias.read(),this.dataFormat)),this.activation!=null&&(o=this.activation.apply(o)),this.dataFormat==="channelsFirst"&&(o=St(o,[0,3,1,2])),o})}getConfig(){let t=super.getConfig();return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=oe(this.depthwiseInitializer),t.pointwiseInitializer=oe(this.pointwiseInitializer),t.depthwiseRegularizer=Ht(this.depthwiseRegularizer),t.pointwiseRegularizer=Ht(this.pointwiseRegularizer),t.depthwiseConstraint=he(this.depthwiseConstraint),t.pointwiseConstraint=he(this.pointwiseConstraint),t}};zg.className="SeparableConv";var qm=class extends zg{constructor(t){super(2,t)}};qm.className="SeparableConv2D";j.registerClass(qm);var Vl=class extends Aa{constructor(t){super(1,t),Vl.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){let t=super.getConfig();return delete t.rank,delete t.dataFormat,t}static verifyArgs(t){if(typeof t.kernelSize!="number"&&!Hd(t.kernelSize,"number",1,1))throw new L(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`)}};Vl.className="Conv1D";j.registerClass(Vl);var Km=class extends Et{constructor(t){super(t),typeof t.cropping=="number"?this.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:typeof t.cropping[0]=="number"?this.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:this.cropping=t.cropping,this.dataFormat=t.dataFormat===void 0?"channelsLast":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return this.dataFormat==="channelsFirst"?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return z(()=>{if(t=vt(t),this.dataFormat==="channelsLast"){let o=xm(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return xm(o,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}else{let o=xm(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return xm(o,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){let t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}};Km.className="Cropping2D";j.registerClass(Km);var jm=class extends Et{constructor(t){super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=t.size==null?this.DEFAULT_SIZE:t.size,this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,ce(this.dataFormat),this.interpolation=t.interpolation==null?"nearest":t.interpolation,Fk(this.interpolation)}computeOutputShape(t){if(this.dataFormat==="channelsFirst"){let e=t[2]==null?null:this.size[0]*t[2],o=t[3]==null?null:this.size[1]*t[3];return[t[0],t[1],e,o]}else{let e=t[1]==null?null:this.size[0]*t[1],o=t[2]==null?null:this.size[1]*t[2];return[t[0],e,o,t[3]]}}call(t,e){return z(()=>{let o=vt(t),n=o.shape;if(this.dataFormat==="channelsFirst"){o=St(o,[0,2,3,1]);let s=this.size[0]*n[2],i=this.size[1]*n[3],a=this.interpolation==="nearest"?Ms.resizeNearestNeighbor(o,[s,i]):Ms.resizeBilinear(o,[s,i]);return St(a,[0,3,1,2])}else{let s=this.size[0]*n[1],i=this.size[1]*n[2];return this.interpolation==="nearest"?Ms.resizeNearestNeighbor(o,[s,i]):Ms.resizeBilinear(o,[s,i])}})}getConfig(){let t={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},e=super.getConfig();return Object.assign(t,e),t}};jm.className="UpSampling2D";j.registerClass(jm);function $W(r,t,e=[1,1],o="valid",n,s){return z(()=>{n==null&&(n=$r()),ce(n);let i=Xm(r,n);if(r.rank!==4)throw new L(`Input for depthwiseConv2d is required to be 4-D, but is instead ${r.rank}-D`);if(t.rank!==4)throw new L(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=wn(i,t,e,o==="same"?"same":"valid","NHWC",s),n==="channelsFirst"&&(i=St(i,[0,3,1,2])),i})}var Ym=class extends Bl{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=t.depthMultiplier==null?1:t.depthMultiplier,this.depthwiseInitializer=Kt(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=de(t.depthwiseConstraint),this.depthwiseRegularizer=Zt(t.depthwiseRegularizer)}build(t){if(t=Lt(t),t.length<4)throw new L(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);let e=this.dataFormat==="channelsFirst"?1:3;if(t[e]==null||t[e]<0)throw new L(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);let o=t[e],n=[this.kernelSize[0],this.kernelSize[1],o,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",n,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[o*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return z(()=>{t=vt(t);let o=$W(t,this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(o=Ar(o,this.bias.read(),this.dataFormat)),this.activation!=null&&(o=this.activation.apply(o)),o})}computeOutputShape(t){t=Lt(t);let e=this.dataFormat==="channelsFirst"?t[2]:t[1],o=this.dataFormat==="channelsFirst"?t[3]:t[2],n=this.dataFormat==="channelsFirst"?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,s=Gr(e,this.kernelSize[0],this.padding,this.strides[0]),i=Gr(o,this.kernelSize[1],this.padding,this.strides[1]);return this.dataFormat==="channelsFirst"?[t[0],n,s,i]:[t[0],s,i,n]}getConfig(){let t=super.getConfig();return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=oe(this.depthwiseInitializer),t.depthwiseRegularizer=Ht(this.depthwiseRegularizer),t.depthwiseConstraint=he(this.depthwiseRegularizer),t}};Ym.className="DepthwiseConv2D";j.registerClass(Ym);function u0(r,t,e,o){if(Array.isArray(r)){if(t!=null||e!=null)throw new L("When inputs is an array, neither initialState or constants should be provided");o!=null&&(e=r.slice(r.length-o,r.length),r=r.slice(0,r.length-o)),r.length>1&&(t=r.slice(1,r.length)),r=r[0]}function n(s){return s==null||Array.isArray(s)?s:[s]}return t=n(t),e=n(e),{inputs:r,initialState:t,constants:e}}function c0(r,t,e,o=!1,n,s,i=!1,a=!1){return z(()=>{let l=t.shape.length;if(l<3)throw new L(`Input should be at least 3D, but is ${l}D.`);let u=[1,0].concat(dr(2,l));if(t=St(t,u),s!=null)throw new gt("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),n!=null&&(n=q(q(n,"bool"),"float32"),n.rank===l-1&&(n=ze(n,-1)),n=St(n,u)),o&&(t=Be(t,0),n!=null&&(n=Be(n,0)));let c=[],p,m=e,f=t.shape[0],h=je(t),d;n!=null&&(d=je(n));for(let y=0;y<f;++y){let b=h[y],w=z(()=>r(b,m));if(n==null)p=w[0],m=w[1];else{let C=z(()=>{let I=d[y],$=tt(We(I),I),A=U(D(w[0],I),D(m[0],$)),_=m.map((O,P)=>U(D(w[1][P],I),D(O,$)));return{output:A,newStates:_}});p=C.output,m=C.newStates}a&&c.push(p)}let g;return a&&(g=De(c,1)),[p,g,m]})}var lo=class extends Et{constructor(t){super(t);let e;if(t.cell==null)throw new L("cell property is missing for the constructor of RNN.");if(Array.isArray(t.cell)?e=new hp({cells:t.cell}):e=t.cell,e.stateSize==null)throw new L("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=e,this.returnSequences=t.returnSequences==null?!1:t.returnSequences,this.returnState=t.returnState==null?!1:t.returnState,this.goBackwards=t.goBackwards==null?!1:t.goBackwards,this._stateful=t.stateful==null?!1:t.stateful,this.unroll=t.unroll==null?!1:t.unroll,this.supportsMasking=!0,this.inputSpec=[new Yt({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(this.states_==null){let t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;return dr(0,t).map(e=>null)}else return this.states_}setStates(t){this.states_=t}computeOutputShape(t){eg(t)&&(t=t[0]),t=t;let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);let o=e[0],n;if(this.returnSequences?n=[t[0],t[1],o]:n=[t[0],o],this.returnState){let s=[];for(let i of e)s.push([t[0],i]);return[n].concat(s)}else return n}computeMask(t,e){return z(()=>{Array.isArray(e)&&(e=e[0]);let o=this.returnSequences?e:null;if(this.returnState){let n=this.states.map(s=>null);return[o].concat(n)}else return o})}get states(){if(this.states_==null){let t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let o=0;o<t;++o)e.push(null);return e}else return this.states_}set states(t){this.states_=t}build(t){if(this.numConstants!=null)throw new gt("Constants support is not implemented in RNN yet.");eg(t)&&(t=t[0]),t=t;let o=this.stateful?t[0]:null,n=t.slice(2);this.inputSpec[0]=new Yt({shape:[o,null,...n]});let s=[t[0]].concat(t.slice(2));this.cell.build(s);let i;if(Array.isArray(this.cell.stateSize)?i=this.cell.stateSize:i=[this.cell.stateSize],this.stateSpec!=null){if(!x.arraysEqual(this.stateSpec.map(a=>a.shape[a.shape.length-1]),i))throw new L(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=i.map(a=>new Yt({shape:[null,a]}));this.stateful&&this.resetStates()}resetStates(t,e=!1){z(()=>{if(!this.stateful)throw new Br("Cannot call resetStates() on an RNN Layer that is not stateful.");let o=this.inputSpec[0].shape[0];if(o==null)throw new L("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(this.states_==null)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(n=>re([o,n])):this.states_=[re([o,this.cell.stateSize])];else if(t==null)yt(this.states_),this.keptStates!=null&&(yt(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(n=>re([o,n])):this.states_[0]=re([o,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new L(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);e===!0?this.keptStates.push(this.states_.slice()):yt(this.states_);for(let n=0;n<this.states_.length;++n){let s=t[n],i=Array.isArray(this.cell.stateSize)?this.cell.stateSize[n]:this.cell.stateSize,a=[o,i];if(!x.arraysEqual(s.shape,a))throw new L(`State ${n} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[n]=s}}this.states_=this.states_.map(n=>ue(n.clone()))})}apply(t,e){let o=e==null?null:e.initialState,n=e==null?null:e.constants;e==null&&(e={});let s=u0(t,o,n,this.numConstants);t=s.inputs,o=s.initialState,n=s.constants;let i=[],a=[];if(o!=null){e.initialState=o,i=i.concat(o),this.stateSpec=[];for(let u of o)this.stateSpec.push(new Yt({shape:u.shape}));a=a.concat(this.stateSpec)}if(n!=null&&(e.constants=n,i=i.concat(n),this.numConstants=n.length),i[0]instanceof xr){let u=[t].concat(i),c=this.inputSpec.concat(a),p=this.inputSpec;this.inputSpec=c;let m=super.apply(u,e);return this.inputSpec=p,m}else return super.apply(t,e)}call(t,e){return z(()=>{let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;t=vt(t),s==null&&(this.stateful?s=this.states_:s=this.getInitialState(t));let i=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==i)throw new L(`RNN Layer has ${i} state(s) but was passed ${s.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");let a={training:n},u=c0((h,d)=>{let g=this.cell.call([h].concat(d),a);return[g[0],g.slice(1)]},t,s,this.goBackwards,o,null,this.unroll,this.returnSequences),c=u[0],p=u[1],m=u[2];this.stateful&&this.resetStates(m,n);let f=this.returnSequences?p:c;return this.returnState?[f].concat(m):f})}getInitialState(t){return z(()=>{let e=re(t.shape);return e=st(e,[1,2]),e=Gs(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(o=>o>1?Jd(e,[1,o]):e):this.cell.stateSize>1?[Jd(e,[1,this.cell.stateSize])]:[e]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),this.cell!=null&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){let t=super.getConfig(),e={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};this.numConstants!=null&&(e.numConstants=this.numConstants);let o=this.cell.getConfig();return this.getClassName()===lo.className&&(e.cell={className:this.cell.getClassName(),config:o}),Object.assign({},o,t,e)}static fromConfig(t,e,o={}){let n=e.cell,s=Xr(n,o);return new t(Object.assign(e,{cell:s}))}};lo.className="RNN";j.registerClass(lo);var Ra=class extends Et{},mp=class extends Ra{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,ke(this.units,"units"),this.activation=Zo(t.activation==null?this.DEFAULT_ACTIVATION:t.activation),this.useBias=t.useBias==null?!0:t.useBias,this.kernelInitializer=Kt(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Kt(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Kt(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Zt(t.kernelRegularizer),this.recurrentRegularizer=Zt(t.recurrentRegularizer),this.biasRegularizer=Zt(t.biasRegularizer),this.kernelConstraint=de(t.kernelConstraint),this.recurrentConstraint=de(t.recurrentConstraint),this.biasConstraint=de(t.biasConstraint),this.dropout=Fl([1,Xo([0,t.dropout==null?0:t.dropout])]),this.recurrentDropout=Fl([1,Xo([0,t.recurrentDropout==null?0:t.recurrentDropout])]),this.dropoutFunc=t.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=Lt(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return z(()=>{if(t=t,t.length!==2)throw new L(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let o=t[1];t=t[0];let n=e.training==null?!1:e.training;0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=qs({ones:()=>We(t),rate:this.dropout,training:n,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=qs({ones:()=>We(o),rate:this.recurrentDropout,training:n,dropoutFunc:this.dropoutFunc}));let s,i=this.dropoutMask,a=this.recurrentDropoutMask;i!=null?s=Eo(D(t,i),this.kernel.read()):s=Eo(t,this.kernel.read()),this.bias!=null&&(s=Ar(s,this.bias.read())),a!=null&&(o=D(o,a));let l=U(s,Eo(o,this.recurrentKernel.read()));return this.activation!=null&&(l=this.activation.apply(l)),[l,l]})}getConfig(){let t=super.getConfig(),e={units:this.units,activation:Yo(this.activation),useBias:this.useBias,kernelInitializer:oe(this.kernelInitializer),recurrentInitializer:oe(this.recurrentInitializer),biasInitializer:oe(this.biasInitializer),kernelRegularizer:Ht(this.kernelRegularizer),recurrentRegularizer:Ht(this.recurrentRegularizer),biasRegularizer:Ht(this.biasRegularizer),activityRegularizer:Ht(this.activityRegularizer),kernelConstraint:he(this.kernelConstraint),recurrentConstraint:he(this.recurrentConstraint),biasConstraint:he(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},t,e)}};mp.className="SimpleRNNCell";j.registerClass(mp);var Zm=class extends lo{constructor(t){t.cell=new mp(t),super(t)}call(t,e){return z(()=>{this.cell.dropoutMask!=null&&(yt(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(yt(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;return super.call(t,{mask:o,training:n,initialState:s})})}static fromConfig(t,e){return new t(e)}};Zm.className="SimpleRNN";j.registerClass(Zm);var fp=class extends Ra{constructor(t){if(super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.resetAfter)throw new L("GRUCell does not support reset_after parameter set to true.");this.units=t.units,ke(this.units,"units"),this.activation=Zo(t.activation===void 0?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Zo(t.recurrentActivation===void 0?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=t.useBias==null?!0:t.useBias,this.kernelInitializer=Kt(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Kt(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Kt(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Zt(t.kernelRegularizer),this.recurrentRegularizer=Zt(t.recurrentRegularizer),this.biasRegularizer=Zt(t.biasRegularizer),this.kernelConstraint=de(t.kernelConstraint),this.recurrentConstraint=de(t.recurrentConstraint),this.biasConstraint=de(t.biasConstraint),this.dropout=Fl([1,Xo([0,t.dropout==null?0:t.dropout])]),this.recurrentDropout=Fl([1,Xo([0,t.recurrentDropout==null?0:t.recurrentDropout])]),this.dropoutFunc=t.dropoutFunc,this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=Lt(t);let e=t[t.length-1];this.kernel=this.addWeight("kernel",[e,this.units*3],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units*3],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units*3],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return z(()=>{if(t=t,t.length!==2)throw new L(`GRUCell expects 2 input Tensors (inputs, h, c), got ${t.length}.`);let o=e.training==null?!1:e.training,n=t[1];t=t[0],0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=qs({ones:()=>We(t),rate:this.dropout,training:o,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=qs({ones:()=>We(n),rate:this.recurrentDropout,training:o,count:3,dropoutFunc:this.dropoutFunc}));let s=this.dropoutMask,i=this.recurrentDropoutMask,a,l,u;0<this.dropout&&this.dropout<1&&(t=D(t,s[0]));let c=Eo(t,this.kernel.read());this.useBias&&(c=Ar(c,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(n=D(n,i[0]));let p=this.recurrentKernel.read(),[m,f]=Ve(p,[2*this.units,this.units],p.rank-1),h=Eo(n,m),[d,g,y]=Ve(c,3,c.rank-1),[b,w]=Ve(h,2,h.rank-1);a=this.recurrentActivation.apply(U(d,b)),l=this.recurrentActivation.apply(U(g,w));let C=Eo(D(l,n),f);u=this.activation.apply(U(y,C));let I=U(D(a,n),D(U(1,Rt(a)),u));return[I,I]})}getConfig(){let t=super.getConfig(),e={units:this.units,activation:Yo(this.activation),recurrentActivation:Yo(this.recurrentActivation),useBias:this.useBias,kernelInitializer:oe(this.kernelInitializer),recurrentInitializer:oe(this.recurrentInitializer),biasInitializer:oe(this.biasInitializer),kernelRegularizer:Ht(this.kernelRegularizer),recurrentRegularizer:Ht(this.recurrentRegularizer),biasRegularizer:Ht(this.biasRegularizer),activityRegularizer:Ht(this.activityRegularizer),kernelConstraint:he(this.kernelConstraint),recurrentConstraint:he(this.recurrentConstraint),biasConstraint:he(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},t,e)}};fp.className="GRUCell";j.registerClass(fp);var Jm=class extends lo{constructor(t){t.implementation===0&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new fp(t),super(t)}call(t,e){return z(()=>{this.cell.dropoutMask!=null&&(yt(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(yt(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;return super.call(t,{mask:o,training:n,initialState:s})})}static fromConfig(t,e){return e.implmentation===0&&(e.implementation=1),new t(e)}};Jm.className="GRU";j.registerClass(Jm);var _a=class extends Ra{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,ke(this.units,"units"),this.activation=Zo(t.activation===void 0?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Zo(t.recurrentActivation===void 0?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=t.useBias==null?!0:t.useBias,this.kernelInitializer=Kt(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Kt(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Kt(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=Zt(t.kernelRegularizer),this.recurrentRegularizer=Zt(t.recurrentRegularizer),this.biasRegularizer=Zt(t.biasRegularizer),this.kernelConstraint=de(t.kernelConstraint),this.recurrentConstraint=de(t.recurrentConstraint),this.biasConstraint=de(t.biasConstraint),this.dropout=Fl([1,Xo([0,t.dropout==null?0:t.dropout])]),this.recurrentDropout=Fl([1,Xo([0,t.recurrentDropout==null?0:t.recurrentDropout])]),this.dropoutFunc=t.dropoutFunc,this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;t=Lt(t);let o=t[t.length-1];this.kernel=this.addWeight("kernel",[o,this.units*4],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units*4],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint);let n;if(this.useBias){if(this.unitForgetBias){let s=this.biasInitializer,i=this.units;n=new(e=class extends Fr{apply(l,u){let c=s.apply([i]),p=new Ol().apply([i]),m=s.apply([i*2]);return Xw(Xw(c,p),m)}},e.className="CustomInit",e)}else n=this.biasInitializer;this.bias=this.addWeight("bias",[this.units*4],null,n,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return z(()=>{let o=e.training==null?!1:e.training;if(t=t,t.length!==3)throw new L(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);let n=t[1],s=t[2];t=t[0],0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=qs({ones:()=>We(t),rate:this.dropout,training:o,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=qs({ones:()=>We(n),rate:this.recurrentDropout,training:o,count:4,dropoutFunc:this.dropoutFunc}));let i=this.dropoutMask,a=this.recurrentDropoutMask,l,u,c,p;0<this.dropout&&this.dropout<1&&(t=D(t,i[0]));let m=Eo(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(n=D(n,a[0])),m=U(m,Eo(n,this.recurrentKernel.read())),this.useBias&&(m=Ar(m,this.bias.read()));let[f,h,d,g]=Ve(m,4,m.rank-1);l=this.recurrentActivation.apply(f),u=this.recurrentActivation.apply(h),c=U(D(u,s),D(l,this.activation.apply(d))),p=this.recurrentActivation.apply(g);let y=D(p,this.activation.apply(c));return[y,y,c]})}getConfig(){let t=super.getConfig(),e={units:this.units,activation:Yo(this.activation),recurrentActivation:Yo(this.recurrentActivation),useBias:this.useBias,kernelInitializer:oe(this.kernelInitializer),recurrentInitializer:oe(this.recurrentInitializer),biasInitializer:oe(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Ht(this.kernelRegularizer),recurrentRegularizer:Ht(this.recurrentRegularizer),biasRegularizer:Ht(this.biasRegularizer),activityRegularizer:Ht(this.activityRegularizer),kernelConstraint:he(this.kernelConstraint),recurrentConstraint:he(this.recurrentConstraint),biasConstraint:he(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},t,e)}};_a.className="LSTMCell";j.registerClass(_a);var Qm=class extends lo{constructor(t){t.implementation===0&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new _a(t),super(t)}call(t,e){return z(()=>{this.cell.dropoutMask!=null&&(yt(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(yt(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;return super.call(t,{mask:o,training:n,initialState:s})})}static fromConfig(t,e){return e.implmentation===0&&(e.implementation=1),new t(e)}};Qm.className="LSTM";j.registerClass(Qm);var hp=class extends Ra{constructor(t){super(t),this.cells=t.cells}get stateSize(){let t=[];for(let e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return z(()=>{t=t;let o=t.slice(1),n=[];for(let a of this.cells.slice().reverse())Array.isArray(a.stateSize)?n.push(o.splice(0,a.stateSize.length)):n.push(o.splice(0,1));n.reverse();let s=[],i;for(let a=0;a<this.cells.length;++a){let l=this.cells[a];o=n[a],a===0?i=[t[0]].concat(o):i=[i[0]].concat(o),i=l.call(i,e),s.push(i.slice(1))}o=[];for(let a of s.slice().reverse())o.push(...a);return[i[0]].concat(o)})}build(t){eg(t)&&(t=t[0]),t=t;let e;this.cells.forEach((o,n)=>{jo(`RNNCell_${n}`,()=>{o.build(t),Array.isArray(o.stateSize)?e=o.stateSize[0]:e=o.stateSize,t=[t[0],e]})}),this.built=!0}getConfig(){let t=super.getConfig(),e=s=>({className:s.getClassName(),config:s.getConfig()}),n={cells:this.cells.map(e)};return Object.assign({},t,n)}static fromConfig(t,e,o={}){let n=[];for(let s of e.cells)n.push(Xr(s,o));return new t({cells:n})}get trainableWeights(){if(!this.trainable)return[];let t=[];for(let e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){let t=[];for(let e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){let e=[];for(let o of this.cells)e.push(...o.trainableWeights);return e.concat(t)}return t}getWeights(){let t=[];for(let e of this.cells)t.push(...e.weights);return Tm(t)}setWeights(t){let e=[];for(let o of this.cells){let n=o.weights.length,s=t.splice(n);for(let i=0;i<o.weights.length;++i)e.push([o.weights[i],s[i]])}ip(e)}};hp.className="StackedRNNCells";j.registerClass(hp);function qs(r){let{ones:t,rate:e,training:o=!1,count:n=1,dropoutFunc:s}=r,i=()=>s!=null?s(t(),e):tg(t(),e),a=()=>ka(i,t,o);return!n||n<=1?ue(a().clone()):Array(n).fill(void 0).map(a).map(u=>ue(u.clone()))}var AW=function(r,t){var e={};for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&t.indexOf(o)<0&&(e[o]=r[o]);if(r!=null&&typeof Object.getOwnPropertySymbols=="function")for(var n=0,o=Object.getOwnPropertySymbols(r);n<o.length;n++)t.indexOf(o[n])<0&&Object.prototype.propertyIsEnumerable.call(r,o[n])&&(e[o[n]]=r[o[n]]);return e};var Mg=class extends lo{constructor(t){if(t.unroll)throw new gt("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(t.cell))throw new gt("It is not possible at the moment to stack convolutional cells.");super(t),this.inputSpec=[new Yt({ndim:5})]}call(t,e){return z(()=>{if(this.cell.dropoutMask!=null&&(yt(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(yt(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),e&&e.constants)throw new L("ConvRNN2D cell does not support constants");let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;return super.call(t,{mask:o,training:n,initialState:s})})}computeOutputShape(t){let e=this.computeSingleOutputShape(t);return this.returnSequences||(e=[e[0],...e.slice(2)]),this.returnState&&(e=[e,...Array(2).fill([t[0],...e.slice(-3)])]),e}getInitialState(t){return z(()=>{let{stateSize:e}=this.cell,o=t.shape,n=this.computeSingleOutputShape(o),s=[n[0],...n.slice(2)],i=re(s);return Array.isArray(e)?Array(e.length).fill(i):[i]})}resetStates(t,e=!1){z(()=>{if(!this.stateful)throw new Br("Cannot call resetStates() on an RNN Layer that is not stateful.");let o=this.inputSpec[0].shape,n=this.computeSingleOutputShape(o),s=[n[0],...n.slice(2)];if(o[0]==null)throw new L("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(this.getStates()==null)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>re(s)):this.states_=[re(s)];else if(t==null)yt(this.states_),this.keptStates!=null&&(yt(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>re(s)):this.states_[0]=re(s);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new L(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);e?this.keptStates.push(this.states_.slice()):yt(this.states_);for(let a=0;a<this.states_.length;++a){let l=t[a],u=s;if(!x.arraysEqual(l.shape,u))throw new L(`State ${a} is incompatible with layer ${this.name}: expected shape=${u}, received shape=${l.shape}`);this.states_[a]=l}}this.states_=this.states_.map(a=>ue(a.clone()))})}computeSingleOutputShape(t){let{dataFormat:e,filters:o,kernelSize:n,padding:s,strides:i,dilationRate:a}=this.cell,l=e==="channelsFirst",u=t[l?3:2],c=t[l?4:3],p=Gr(u,n[0],s,i[0],a[0]),m=Gr(c,n[1],s,i[1],a[1]);return[...t.slice(0,2),...l?[o,p,m]:[p,m,o]]}};Mg.className="ConvRNN2D";var dp=class extends _a{constructor(t){let{filters:e,kernelSize:o,strides:n,padding:s,dataFormat:i,dilationRate:a}=t;super(Object.assign({},t,{units:e})),this.filters=e,ke(this.filters,"filters"),this.kernelSize=$a(o,2,"kernelSize"),this.kernelSize.forEach(l=>ke(l,"kernelSize")),this.strides=$a(n||1,2,"strides"),this.strides.forEach(l=>ke(l,"strides")),this.padding=s||"valid",Er(this.padding),this.dataFormat=i||"channelsLast",ce(this.dataFormat),this.dilationRate=$a(a||1,2,"dilationRate"),this.dilationRate.forEach(l=>ke(l,"dilationRate"))}build(t){var e;t=Lt(t);let o=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[o]==null)throw new L(`The channel dimension of the input should be defined. Found ${t[o]}`);let n=t[o],s=4,i=this.kernelSize.concat([n,this.filters*s]);this.kernel=this.addWeight("kernel",i,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);let a=this.kernelSize.concat([this.filters,this.filters*s]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let l;if(this.unitForgetBias){let u=this.biasInitializer,c=this.filters;l=new(e=class extends Fr{apply(m,f){let h=u.apply([c]),d=Me([c]),g=u.apply([c*2]);return Yc([h,d,g])}},e.className="CustomInit",e)}else l=this.biasInitializer;this.bias=this.addWeight("bias",[this.filters*s],null,l,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(t,e){return z(()=>{if(t.length!==3)throw new L(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);let o=e.training||!1,n=t[0],s=t[1],i=t[2],a=4;0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=qs({ones:()=>We(n),rate:this.dropout,training:o,count:a,dropoutFunc:this.dropoutFunc}));let l=this.dropoutMask,u=(rt,ot,lt)=>!ot||!ot[lt]?rt:D(ot[lt],rt),c=u(n,l,0),p=u(n,l,1),m=u(n,l,2),f=u(n,l,3);0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=qs({ones:()=>We(s),rate:this.recurrentDropout,training:o,count:a,dropoutFunc:this.dropoutFunc}));let h=this.recurrentDropoutMask,d=u(s,h,0),g=u(s,h,1),y=u(s,h,2),b=u(s,h,3),w=3,[C,I,$,A]=Ve(this.kernel.read(),a,w),[_,O,P,B]=this.useBias?Ve(this.bias.read(),a):[null,null,null,null];c=this.inputConv(c,C,_,this.padding),p=this.inputConv(p,I,O,this.padding),m=this.inputConv(m,$,P,this.padding),f=this.inputConv(f,A,B,this.padding);let[V,G,H,W]=Ve(this.recurrentKernel.read(),a,w);d=this.recurrentConv(d,V),g=this.recurrentConv(g,G),y=this.recurrentConv(y,H),b=this.recurrentConv(b,W);let X=this.recurrentActivation.apply(U(c,d)),Z=this.recurrentActivation.apply(U(p,g)),K=U(D(Z,i),D(X,this.activation.apply(U(m,y)))),J=D(this.recurrentActivation.apply(U(f,b)),this.activation.apply(K));return[J,J,K]})}getConfig(){let t=super.getConfig(),{units:e}=t,o=AW(t,["units"]),n={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},o,n)}inputConv(t,e,o,n){let s=zr(t,e,this.strides,n||"valid",this.dataFormat==="channelsFirst"?"NCHW":"NHWC",this.dilationRate);return o?Ar(s,o,this.dataFormat):s}recurrentConv(t,e){return zr(t,e,1,"same",this.dataFormat==="channelsFirst"?"NCHW":"NHWC")}};dp.className="ConvLSTM2DCell";j.registerClass(dp);var tf=class extends Mg{constructor(t){let e=new dp(t);super(Object.assign({},t,{cell:e}))}static fromConfig(t,e){return new t(e)}};tf.className="ConvLSTM2D";j.registerClass(tf);var gp=class extends Et{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(this.noiseShape==null)return this.noiseShape;let e=t.shape,o=[];for(let n=0;n<this.noiseShape.length;++n)o.push(this.noiseShape[n]==null?e[n]:this.noiseShape[n]);return o}call(t,e){return z(()=>{this.invokeCallHook(t,e);let o=vt(t);if(0<this.rate&&this.rate<1){let n=e.training==null?!1:e.training,s=this.getNoiseShape(o);return ka(()=>tg(o,this.rate,s,this.seed),()=>o,n)}return t})}getConfig(){let t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}};gp.className="Dropout";j.registerClass(gp);var ef=class extends gp{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){let e=t.shape;return[e[0],1,e[2]]}};ef.className="SpatialDropout1D";j.registerClass(ef);var rf=class extends Et{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.batchInputShape==null&&t.inputShape==null&&t.inputDim!=null){let e=null;t.batchSize!=null&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,ke(this.units,"units"),this.activation=Zo(t.activation),t.useBias!=null&&(this.useBias=t.useBias),this.kernelInitializer=Kt(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Kt(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=de(t.kernelConstraint),this.biasConstraint=de(t.biasConstraint),this.kernelRegularizer=Zt(t.kernelRegularizer),this.biasRegularizer=Zt(t.biasRegularizer),this.activityRegularizer=Zt(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){t=Lt(t);let e=t[t.length-1];this.kernel==null&&(this.kernel=this.addWeight("kernel",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){t=Lt(t);let e=t.slice();return e[e.length-1]=this.units,e}call(t,e){return z(()=>{this.invokeCallHook(t,e);let o=vt(t),n=qd(this.activation.getClassName()),s;return n!=null?s=Eo(o,this.kernel.read(),n,this.bias?this.bias.read():null):(s=Eo(o,this.kernel.read()),this.bias!=null&&(s=Ar(s,this.bias.read())),this.activation!=null&&(s=this.activation.apply(s))),s})}getConfig(){let t={units:this.units,activation:Yo(this.activation),useBias:this.useBias,kernelInitializer:oe(this.kernelInitializer),biasInitializer:oe(this.biasInitializer),kernelRegularizer:Ht(this.kernelRegularizer),biasRegularizer:Ht(this.biasRegularizer),activityRegularizer:Ht(this.activityRegularizer),kernelConstraint:he(this.kernelConstraint),biasConstraint:he(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}};rf.className="Dense";j.registerClass(rf);var of=class extends Et{constructor(t){t=t||{},super(t),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=Lt(t);for(let e of t.slice(1))if(e==null)throw new L(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[t[0],ko(t,1)]}call(t,e){return z(()=>{this.invokeCallHook(t,e);let o=vt(t);if(this.dataFormat==="channelsFirst"&&o.rank>1){let n=[0];for(let s=2;s<o.rank;++s)n.push(s);n.push(1),o=St(o,n)}return Pk(o)})}getConfig(){let t={};this.dataFormat!=null&&(t.dataFormat=this.dataFormat);let e=super.getConfig();return Object.assign(t,e),t}};of.className="Flatten";j.registerClass(of);var nf=class extends Et{constructor(t){super(t),this.supportsMasking=!0,this.activation=Zo(t.activation)}call(t,e){return z(()=>{this.invokeCallHook(t,e);let o=vt(t);return this.activation.apply(o)})}getConfig(){let t={activation:Yo(this.activation)},e=super.getConfig();return Object.assign(t,e),t}};nf.className="Activation";j.registerClass(nf);var sf=class extends Et{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return z(()=>(t=vt(t),Ok(t,this.n)))}getConfig(){let t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}};sf.className="RepeatVector";j.registerClass(sf);var af=class extends Et{constructor(t){super(t),this.targetShape=t.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(t){return t<0||t==null}fixUnknownDimension(t,e){let o="Total size of new array must be unchanged.",n=e.slice(),s=1,i=null;for(let l=0;l<n.length;++l){let u=n[l];if(this.isUnknown(u))if(i===null)i=l;else throw new L("Can only specifiy one unknown dimension.");else s*=u}let a=ko(t);if(i!==null){if(s===0||a%s!==0)throw new L(o);n[i]=a/s}else if(a!==s)throw new L(o);return n}computeOutputShape(t){let e=!1;for(let o=0;o<t.length;++o)if(this.isUnknown(t[o])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return z(()=>{this.invokeCallHook(t,e);let o=vt(t),n=o.shape,s=n.slice(0,1).concat(this.fixUnknownDimension(n.slice(1),this.targetShape));return F(o,s)})}getConfig(){let t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}};af.className="Reshape";j.registerClass(af);var lf=class extends Et{constructor(t){if(super(t),t.dims==null)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${t.dims} instead.`);let e=dr(1,t.dims.length+1);if(!x.arraysEqual(t.dims.slice().sort(),e))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Yt({ndim:this.dims.length+1})]}computeOutputShape(t){t=Lt(t);let e=t.slice();return this.dims.forEach((o,n)=>{e[n+1]=t[o]}),e}call(t,e){return St(vt(t),this.dimsIncludingBatch)}getConfig(){let t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}};lf.className="Permute";j.registerClass(lf);var uf=class extends Et{constructor(t){super(t==null?{}:t),this.supportsMasking=!0,t!=null?this.maskValue=t.maskValue==null?0:t.maskValue:this.maskValue=0}computeOutputShape(t){return t}getConfig(){let t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){let o=vt(t),n=-1;return gl(Ho(o,this.maskValue),n)}call(t,e){return z(()=>{this.invokeCallHook(t,e);let o=vt(t),n=-1,s=!0,i=gl(Ho(o,this.maskValue),n,s);return D(o,q(i,o.dtype))})}};uf.className="Masking";j.registerClass(uf);var cf=class extends Et{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",t.batchInputShape==null&&t.inputShape==null){let e=null;t.batchSize!=null&&(e=t.batchSize),t.inputLength==null?this.batchInputShape=[e,null]:this.batchInputShape=[e].concat(Xt(t.inputLength))}this.inputDim=t.inputDim,ke(this.inputDim,"inputDim"),this.outputDim=t.outputDim,ke(this.outputDim,"outputDim"),this.embeddingsInitializer=Kt(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Zt(t.embeddingsRegularizer),this.activityRegularizer=Zt(t.activityRegularizer),this.embeddingsConstraint=de(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return z(()=>this.maskZero?(t=vt(t),Ho(t,dt(t))):null)}computeOutputShape(t){if(t=Lt(t),this.inputLength==null)return[...t,this.outputDim];let e=Xt(this.inputLength);if(e.length!==t.length-1)throw new L(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);{let o=0;for(let n=0;n<e.length;++n){let s=e[n],i=t[n+1];if(s!=null&&i!=null&&s!==i)throw new L(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);s==null&&(e[o]=i),o++}}return[t[0],...e,this.outputDim]}call(t,e){return z(()=>{this.invokeCallHook(t,e);let o=vt(t);o.dtype!=="int32"&&(o=Rl(o,"int32"));let n=Qd(this.embeddings.read(),F(o,[o.size]));return F(n,Lt(this.computeOutputShape(o.shape)))})}getConfig(){let t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:oe(this.embeddingsInitializer),embeddingsRegularizer:Ht(this.embeddingsRegularizer),activityRegularizer:Ht(this.activityRegularizer),embeddingsConstraint:he(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}};cf.className="Embedding";j.registerClass(cf);var Ks=class extends Et{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new gt}computeElementwiseOpOutputShape(t,e){if(t==null||e==null)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(e.length===0)return t;let o=t.slice(0,t.length-e.length);for(let n=0;n<e.length;++n){let s=t[t.length-e.length+n],i=e[n];if(s==null||i==null||s<0||i<0)o.push(null);else if(s===1)o.push(i);else if(i===1)o.push(s);else{if(s!==i)throw new L("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));o.push(s)}}return o}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[Lt(t)]),t=t,t.length<2)throw new L(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(let s of t)s!=null&&s[0]!==null&&e.push(s[0]);if(e=To(e),e.length>1)throw new L(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let o=t[0]==null?null:t[0].slice(1);for(let s=1;s<t.length;++s){let i=t[s]==null?null:t[s].slice(1);o=this.computeElementwiseOpOutputShape(o,i)}let n=t.map(s=>s.length);t.indexOf(null)===-1&&To(n).length===1?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,e){return z(()=>{if(t=t,this.reshapeRequired){let o=[],n=t.map(s=>s.rank);if(n.indexOf(null)===-1){let s=Xo(n);for(let i of t){let a=i.rank;for(let l=0;l<s-a;++l)i=Gs(i,1);o.push(i)}return this.mergeFunction(o)}else{let s=!1;for(let l of t){let u=l.rank;if(u==null){let c=l.shape,p=c[0],m=c.slice(1).concat([p]),f=F(l,[p].concat(ko(c.slice(1))));f=St(f,[1,0]),f=F(f,m),o.push(f),s=!0}else if(u>1){let c=dr(1,u).concat([0]);o.push(St(l,c)),s=!0}else o.push(l)}let i=this.mergeFunction(o),a=i.rank;if(s){if(a==null){let l=i.shape,u=l.length,c=l[u-1],p=[c].concat(l.slice(0,l.length-1));i=F(St(F(i,[-1,c]),[1,0]),p)}else if(a>1){let l=[a-1].concat(dr(0,a-1));i=St(i,l)}}return i}}else return this.mergeFunction(t)})}computeOutputShape(t){t=t;let e;t[0]==null?e=null:e=t[0].slice(1);for(let n=1;n<t.length;++n){let s=t[n]==null?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,s)}let o=[];for(let n of t)n!=null&&n[0]!==null&&o.push(n[0]);return o=To(o),o.length===1?e=o.concat(e):e=[null].concat(e),e}computeMask(t,e){return z(()=>{if(e==null)return null;if(!Array.isArray(e))throw new L("`mask` should be an Array");if(!Array.isArray(t))throw new L("`inputs` should be an Array");if(e.length!==t.length)throw new L(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(n=>n==null))return null;e=e.map(n=>n==null?n:ze(n,0));let o=e[0];for(let n=1;n<e.length-1;++n)o=ir(o,e[n]);return o})}},mf=class extends Ks{constructor(t){super(t)}mergeFunction(t){return z(()=>{let e=t[0].clone();for(let o=1;o<t.length;++o)e=U(e,t[o]);return e})}};mf.className="Add";j.registerClass(mf);var ff=class extends Ks{constructor(t){super(t)}mergeFunction(t){return z(()=>{let e=t[0].clone();for(let o=1;o<t.length;++o)e=D(e,t[o]);return e})}};ff.className="Multiply";j.registerClass(ff);var hf=class extends Ks{constructor(t){super(t)}mergeFunction(t){return z(()=>{let e=t[0].clone();for(let o=1;o<t.length;++o)e=U(e,t[o]);return D(1/t.length,e)})}};hf.className="Average";j.registerClass(hf);var df=class extends Ks{constructor(t){super(t)}mergeFunction(t){return z(()=>{let e=t[0];for(let o=1;o<t.length;++o)e=Mr(e,t[o]);return e})}};df.className="Maximum";j.registerClass(df);var gf=class extends Ks{constructor(t){super(t)}mergeFunction(t){return z(()=>{let e=t[0];for(let o=1;o<t.length;++o)e=In(e,t[o]);return e})}};gf.className="Minimum";j.registerClass(gf);var xf=class extends Ks{constructor(t){super(t),this.DEFAULT_AXIS=-1,t==null&&(t={}),this.axis=t.axis==null?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!(Array.isArray(t)&&Array.isArray(t[0]))||t.length===1)throw new L("A `Concatenate` layer should be called on a list of at least 2 inputs");t=t;let e=!0;for(let n of t)if(n!=null){e=!1;break}if(e)return;let o=[];for(let n=0;n<t.length;++n){let s=t[n].slice();s.splice(this.axis,1);let i=!1;for(let a of o)if(x.arraysEqual(a,s)){i=!0;break}i||o.push(s)}if(o.length>1)throw new L("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return z(()=>Yc(t,this.axis))}computeOutputShape(t){if(!(Array.isArray(t)&&Array.isArray(t[0])))throw new L("A `Concatenate` layer should be called on a list of inputs.");let e=t,o=e[0].slice(),n=this.axis<0?o.length+this.axis:this.axis;for(let s of e.slice(1)){if(o[n]==null||s[n]==null){o[n]=null;break}o[n]+=s[n]}return o}computeMask(t,e){if(e==null)return null;if(!Array.isArray(e))throw new L("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new L("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new L(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);return z(()=>{let o=!0;if(e.forEach(i=>{if(i!=null){o=!1;return}}),o)return null;let n=[];for(let i=0;i<t.length;++i)e[i]==null?n.push(q(We(t[i]),"bool")):e[i].rank<t[i].rank?n.push(ze(e[i],-1)):n.push(e[i]);let s=Bt(n,this.axis);return vc(s,-1,!1)})}getConfig(){let t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}};xf.className="Concatenate";j.registerClass(xf);function pf(r,t){for(;r<0;)r+=t;return r}function DW(r,t,e){if(r.shape.length>3||t.shape.length>3)throw new gt("batchDot is not implemented for tensors of 4D or higher rank yet");if(x.assert(r.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${r.shape.length}`),x.assert(r.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`),typeof e=="number"&&(e=[e,e]),r.dtype==="complex64"||t.dtype==="complex64")throw new gt("batchDot is not implemented for complex64-type Tensors yet.");let o=r.shape.length,n=t.shape.length;e==null&&(e=[o-1,n-2]);let s=e;return z(()=>{let i;if(o>n){i=o-n;let l=[];for(let u=0;u<i;++u)l.push(1);t=F(t,t.shape.concat(l))}else if(n>o){i=n-o;let l=[];for(let u=0;u<i;++u)l.push(1);r=F(r,r.shape.concat(l))}else i=0;let a;if(r.shape.length===2&&t.shape.length===2)s[0]===s[1]?a=st(D(r,t),s[0]):a=st(D(St(r,[1,0]),t),s[1]);else{let l=s[0]!==r.shape.length-1,u=s[1]===t.shape.length-1;a=kt(r,t,l,u)}if(i>0){let l;o>n?l=o+n-3:l=o-1;let u=[];for(let c=l;c<l+i;++c)u.push(c);a=kr(a,u)}return a.shape.length===1&&(a=ze(a,1)),a})}var yf=class extends Ks{constructor(t){super(t),this.axes=t.axes,this.normalize=t.normalize==null?!1:t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){x.assert(Array.isArray(t)&&t.length===2&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");let e=t[0],o=t[1];if(e.length>3||o.length>3)throw new gt("Dot layer does not support tensors of 4D or higher rank yet.");let n=this.interpretAxes(e,o);if(e[n[0]]!==o[n[1]])throw new L(`Dimension incompatibility: ${e[n[0]]} !== ${o[n[1]]}`)}mergeFunction(t){if(t.length!==2)throw new L(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let e=t[0],o=t[1],n;return Array.isArray(this.axes)?n=this.axes.map((s,i)=>pf(s,t[i].shape.length)):n=[pf(this.axes,e.shape.length),pf(this.axes,o.shape.length)],this.normalize&&(e=Dm(e,n[0]),o=Dm(o,n[1])),DW(e,o,n)}interpretAxes(t,e){let o;return Array.isArray(this.axes)?o=this.axes:o=[pf(this.axes,t.length),pf(this.axes,e.length)],o}computeOutputShape(t){x.assert(Array.isArray(t)&&t.length===2&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");let e=t[0].slice(),o=t[1].slice();if(e.length>3||o.length>3)throw new gt("Dot layer does not support tensors of 4D or higher rank yet.");let n=this.interpretAxes(e,o);e.splice(n[0],1),o.splice(n[1],1),o.splice(0,1);let s=e.concat(o);return s.length===1&&s.push(1),s}computeMask(t,e){return null}getConfig(){let t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}};yf.className="Dot";j.registerClass(yf);var bf=class extends Et{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){let t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return z(()=>{this.invokeCallHook(t,e);let o=vt(t);return ka(()=>U(Zc(o.shape,0,this.stddev),o),()=>o,e.training||!1)})}};bf.className="GaussianNoise";j.registerClass(bf);var wf=class extends Et{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){let t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return z(()=>{this.invokeCallHook(t,e);let o=vt(t);return this.rate>0&&this.rate<1?ka(()=>{let s=Math.sqrt(this.rate/(1-this.rate));return D(o,Zc(o.shape,1,s))},()=>o,e.training||!1):o})}};wf.className="GaussianDropout";j.registerClass(wf);var Cf=class extends Et{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||vt(t).shape}computeOutputShape(t){return t}getConfig(){let t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return z(()=>{if(this.rate<1&&this.rate>0){let o=this._getNoiseShape(t);return ka(()=>{let s=vt(t),i=1.6732632423543772,a=1.0507009873554805,l=-i*a,u=Kr(Tn(o),this.rate);u=Rl(u,"float32");let c=((1-this.rate)*(1+this.rate*l**2))**-.5,p=-c*l*this.rate,m=U(D(s,u),D(U(u,-1),l));return U(D(m,c),p)},()=>vt(t),e.training||!1)}return t})}};Cf.className="AlphaDropout";j.registerClass(Cf);function vf(r,t,e,o,n,s=.001){let i;if(r.rank===2)i=Gh(r,t,e,o,n,s);else if(r.rank===3)i=Wh(r,t,e,o,n,s);else if(r.rank===4)i=Uh(r,t,e,o,n,s);else throw new gt(`batchNormalization is not implemented for array of rank ${r.rank} yet`);return i}function FW(r,t,e,o,n=.001){return z(()=>{let s=vl(r,o),i=s.mean,a=s.variance;return[vf(r,i,a,e,t,n),i,a]})}function RW(r,t,e,o,n=.001){return z(()=>{let s=vl(r,o),i=s.mean,a=s.variance,l=[];for(let h of dr(0,r.rank))o.indexOf(h)!==-1?l.push(1):l.push(r.shape[h]);let u=F(i,l),c=F(a,l),p=t==null?null:F(t,l),m=e==null?null:F(e,l);return[vf(r,u,c,m,p,n),i,a]})}function _W(r,t,e,o,n=.001){return x.arraysEqual(o.slice().sort(),dr(0,r.rank-1))?FW(r,t,e,o,n):RW(r,t,e,o,n)}var Nf=class extends Et{constructor(t){t==null&&(t={}),super(t),this.supportsMasking=!0,this.axis=t.axis==null?-1:t.axis,this.momentum=t.momentum==null?.99:t.momentum,this.epsilon=t.epsilon==null?.001:t.epsilon,this.center=t.center==null?!0:t.center,this.scale=t.scale==null?!0:t.scale,this.betaInitializer=Kt(t.betaInitializer||"zeros"),this.gammaInitializer=Kt(t.gammaInitializer||"ones"),this.movingMeanInitializer=Kt(t.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Kt(t.movingVarianceInitializer||"ones"),this.betaConstraint=de(t.betaConstraint),this.gammaConstraint=de(t.gammaConstraint),this.betaRegularizer=Zt(t.betaRegularizer),this.gammaRegularizer=Zt(t.gammaRegularizer)}build(t){t=Lt(t);let e=this.axis>=0?this.axis:this.axis+t.length,o=t[e];if(o==null)throw new L(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(t)}.`);this.inputSpec=[new Yt({ndim:t.length,axes:{[e]:o}})];let n=[o];this.scale&&(this.gamma=this.addWeight("gamma",n,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",n,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",n,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",n,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return z(()=>{let o=e.training==null?!1:e.training,n=vt(t),s=n.shape,i=s.length,a=dr(0,i),l=this.axis>=0?this.axis:this.axis+i;a.splice(l,1);let u=So(1,i);u[l]=s[l];let c=a.slice();c.sort();let p=!x.arraysEqual(c,dr(0,i).slice(0,i-1)),m=()=>{if(p){let b=F(this.movingMean.read(),u),w=F(this.movingVariance.read(),u),C=this.center?F(this.beta.read(),u):null,I=this.scale?F(this.gamma.read(),u):null;return vf(n,b,w,C,I,this.epsilon)}else return vf(n,this.movingMean.read(),this.movingVariance.read(),this.beta==null?null:this.beta.read(),this.gamma==null?null:this.gamma.read(),this.epsilon)};if(!o)return m();let[f,h,d]=_W(n,this.gamma.read(),this.beta.read(),a,this.epsilon),g=(b,w,C)=>{z(()=>{let I=1-C,$=b.read(),A=D(tt($,w),I);b.write(tt($,A))})};return(()=>{g(this.movingMean,h,this.momentum),g(this.movingVariance,d,this.momentum)})(),f})}getConfig(){let t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:oe(this.betaInitializer),gammaInitializer:oe(this.gammaInitializer),movingMeanInitializer:oe(this.movingMeanInitializer),movingVarianceInitializer:oe(this.movingVarianceInitializer),betaRegularizer:Ht(this.betaRegularizer),gammaRegularizer:Ht(this.gammaRegularizer),betaConstraint:he(this.betaConstraint),gammaConstraint:he(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}};Nf.className="BatchNormalization";j.registerClass(Nf);var Sf=class extends Et{constructor(t){if(t==null&&(t={}),super(t),this.axis=t.axis==null?-1:t.axis,typeof this.axis=="number"){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else if(Array.isArray(this.axis)){for(let e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}else throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);this.epsilon=t.epsilon==null?.001:t.epsilon,this.center=t.center==null?!0:t.center,this.scale=t.scale==null?!0:t.scale,this.betaInitializer=Kt(t.betaInitializer||"zeros"),this.gammaInitializer=Kt(t.gammaInitializer||"ones"),this.betaRegularizer=Zt(t.betaRegularizer),this.gammaRegularizer=Zt(t.gammaRegularizer),this.supportsMasking=!0}build(t){t=Lt(t);let e=t.length;typeof this.axis=="number"&&(this.axis=[this.axis]);for(let s=0;s<this.axis.length;++s)this.axis[s]<0&&(this.axis[s]+=e);for(let s of this.axis)if(s<0||s>=e)throw new Error(`Invalid axis: ${s}`);if(this.axis.length!==To(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);let o=this.axis.map(s=>t[s]),n=!0;this.scale?this.gamma=this.addWeight("gamma",o,"float32",this.gammaInitializer,this.gammaRegularizer,n):this.gamma=null,this.center?this.beta=this.addWeight("beta",o,"float32",this.betaInitializer,this.betaRegularizer,n):this.beta=null,this.built=!0}call(t,e){let o=vt(t),n=o.shape,s=n.length;return z(()=>{let{mean:a,variance:l}=vl(o,this.axis,!0),u=So(1,s);for(let d of this.axis)u[d]=n[d];let c=d=>d!=null&&d.shape.length!==s?F(d,u):d,p=this.scale?c(this.gamma.read()):null,m=this.center?c(this.beta.read()):null,f=[],h=[];for(let d=0;d<s;++d)this.axis.indexOf(d)!==-1?(f.push(n[d]),h.push(1)):(f.push(1),h.push(n[d]));return a=tr(a,f),l=tr(l,f),p!=null&&(p=tr(p,h)),m!=null&&(m=tr(m,h)),vf(o,a,l,m,p,this.epsilon)})}getConfig(){let t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:oe(this.betaInitializer),gammaInitializer:oe(this.gammaInitializer),betaRegularizer:Ht(this.betaRegularizer),gammaRegularizer:Ht(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}};Sf.className="LayerNormalization";j.registerClass(Sf);function OW(r,t,e){return z(()=>{if(r.rank!==4)throw new L(`temporalPadding expects input tensor to be 4-D, but received a ${r.rank}-D tensor.`);if(t==null&&(t=[[1,1],[1,1]]),t.length!==2||t[0].length!==2||t[1].length!==2)throw new L("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(e==null&&(e=$r()),e!=="channelsLast"&&e!=="channelsFirst")throw new L(`Unknown data format: ${e}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let o;return e==="channelsFirst"?o=[[0,0],[0,0],t[0],t[1]]:o=[[0,0],t[0],t[1],[0,0]],Tr(r,o)})}var If=class extends Et{constructor(t){if(t==null&&(t={}),super(t),this.dataFormat=t.dataFormat==null?$r():t.dataFormat,t.padding==null)this.padding=[[1,1],[1,1]];else if(typeof t.padding=="number")this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,t.padding.length!==2)throw new L(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);let e,o;if(typeof t.padding[0]=="number")e=[t.padding[0],t.padding[0]],o=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,t.padding[0].length!==2)throw new L(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);if(e=t.padding[0],t.padding[1].length!==2)throw new L(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);o=t.padding[1]}this.padding=[e,o]}this.inputSpec=[new Yt({ndim:4})]}computeOutputShape(t){t=Lt(t);let e,o;return this.dataFormat==="channelsFirst"?(t[2]!=null&&t[2]>=0?e=t[2]+this.padding[0][0]+this.padding[0][1]:e=null,t[3]!=null&&t[3]>=0?o=t[3]+this.padding[1][0]+this.padding[1][1]:o=null,[t[0],t[1],e,o]):(t[1]!=null&&t[1]>=0?e=t[1]+this.padding[0][0]+this.padding[0][1]:e=null,t[2]!=null&&t[2]>=0?o=t[2]+this.padding[1][0]+this.padding[1][1]:o=null,[t[0],e,o,t[3]])}call(t,e){return z(()=>OW(vt(t),this.padding,this.dataFormat))}getConfig(){let t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}};If.className="ZeroPadding2D";j.registerClass(If);function Hg(r,t,e,o,n,s){return z(()=>{ce(n),Hw(s),Er(o),e==null&&(e=[1,1]),o==null&&(o="valid"),n==null&&(n=$r()),s==null&&(s="max"),r=Xm(r,n);let i,a=o==="same"?"same":"valid";return s==="max"?i=ma(r,t,e,a):i=sa(r,t,e,a),n==="channelsFirst"&&(i=St(i,[0,3,1,2])),i})}function y1(r,t,e,o,n,s){return z(()=>{ce(n),Hw(s),Er(o),e==null&&(e=[1,1,1]),o==null&&(o="valid"),n==null&&(n=$r()),s==null&&(s="max"),r=l0(r,n);let i,a=o==="same"?"same":"valid";return s==="max"?i=dd(r,t,e,a):i=Vh(r,t,e,a),n==="channelsFirst"&&(i=St(i,[0,4,1,2,3])),i})}var Bg=class extends Et{constructor(t){if(t.poolSize==null&&(t.poolSize=2),super(t),typeof t.poolSize=="number")this.poolSize=[t.poolSize];else if(Array.isArray(t.poolSize)&&t.poolSize.length===1&&typeof t.poolSize[0]=="number")this.poolSize=t.poolSize;else throw new L(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);if(ke(this.poolSize,"poolSize"),t.strides==null)this.strides=this.poolSize;else if(typeof t.strides=="number")this.strides=[t.strides];else if(Array.isArray(t.strides)&&t.strides.length===1&&typeof t.strides[0]=="number")this.strides=t.strides;else throw new L(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);ke(this.strides,"strides"),this.padding=t.padding==null?"valid":t.padding,Er(this.padding),this.inputSpec=[new Yt({ndim:3})]}computeOutputShape(t){t=Lt(t);let e=Gr(t[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return z(()=>{this.invokeCallHook(t,e),t=Gs(vt(t),2);let o=this.poolingFunction(vt(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return kr(o,[2])})}getConfig(){let t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}},Tf=class extends Bg{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return ce(s),Er(n),Hg(t,e,o,n,s,"max")}};Tf.className="MaxPooling1D";j.registerClass(Tf);var kf=class extends Bg{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return ce(s),Er(n),Hg(t,e,o,n,s,"avg")}};kf.className="AveragePooling1D";j.registerClass(kf);var Vg=class extends Et{constructor(t){if(t.poolSize==null&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],t.strides==null)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(t.strides.length!==2)throw new L(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides];ke(this.poolSize,"poolSize"),ke(this.strides,"strides"),this.padding=t.padding==null?"valid":t.padding,this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,ce(this.dataFormat),Er(this.padding),this.inputSpec=[new Yt({ndim:4})]}computeOutputShape(t){t=Lt(t);let e=this.dataFormat==="channelsFirst"?t[2]:t[1],o=this.dataFormat==="channelsFirst"?t[3]:t[2];return e=Gr(e,this.poolSize[0],this.padding,this.strides[0]),o=Gr(o,this.poolSize[1],this.padding,this.strides[1]),this.dataFormat==="channelsFirst"?[t[0],t[1],e,o]:[t[0],e,o,t[3]]}call(t,e){return z(()=>(this.invokeCallHook(t,e),this.poolingFunction(vt(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){let t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}},Ef=class extends Vg{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return ce(s),Er(n),Hg(t,e,o,n,s,"max")}};Ef.className="MaxPooling2D";j.registerClass(Ef);var $f=class extends Vg{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return ce(s),Er(n),Hg(t,e,o,n,s,"avg")}};$f.className="AveragePooling2D";j.registerClass($f);var Gg=class extends Et{constructor(t){if(t.poolSize==null&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],t.strides==null)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(t.strides.length!==3)throw new L(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];ke(this.poolSize,"poolSize"),ke(this.strides,"strides"),this.padding=t.padding==null?"valid":t.padding,this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,ce(this.dataFormat),Er(this.padding),this.inputSpec=[new Yt({ndim:5})]}computeOutputShape(t){t=Lt(t);let e=this.dataFormat==="channelsFirst"?t[2]:t[1],o=this.dataFormat==="channelsFirst"?t[3]:t[2],n=this.dataFormat==="channelsFirst"?t[4]:t[3];return e=Gr(e,this.poolSize[0],this.padding,this.strides[0]),o=Gr(o,this.poolSize[1],this.padding,this.strides[1]),n=Gr(n,this.poolSize[2],this.padding,this.strides[2]),this.dataFormat==="channelsFirst"?[t[0],t[1],e,o,n]:[t[0],e,o,n,t[4]]}call(t,e){return z(()=>(this.invokeCallHook(t,e),this.poolingFunction(vt(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){let t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}},Af=class extends Gg{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return ce(s),Er(n),y1(t,e,o,n,s,"max")}};Af.className="MaxPooling3D";j.registerClass(Af);var Df=class extends Gg{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return ce(s),Er(n),y1(t,e,o,n,s,"avg")}};Df.className="AveragePooling3D";j.registerClass(Df);var Wg=class extends Et{constructor(t){super(t),this.inputSpec=[new Yt({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new gt}},Ff=class extends Wg{constructor(t){super(t||{})}call(t,e){return z(()=>{let o=vt(t);return ee(o,1)})}};Ff.className="GlobalAveragePooling1D";j.registerClass(Ff);var Rf=class extends Wg{constructor(t){super(t||{})}call(t,e){return z(()=>{let o=vt(t);return sr(o,1)})}};Rf.className="GlobalMaxPooling1D";j.registerClass(Rf);var Ug=class extends Et{constructor(t){super(t),this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,ce(this.dataFormat),this.inputSpec=[new Yt({ndim:4})]}computeOutputShape(t){return t=t,this.dataFormat==="channelsLast"?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new gt}getConfig(){let t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}},_f=class extends Ug{call(t,e){return z(()=>{let o=vt(t);return this.dataFormat==="channelsLast"?ee(o,[1,2]):ee(o,[2,3])})}};_f.className="GlobalAveragePooling2D";j.registerClass(_f);var Of=class extends Ug{call(t,e){return z(()=>{let o=vt(t);return this.dataFormat==="channelsLast"?sr(o,[1,2]):sr(o,[2,3])})}};Of.className="GlobalMaxPooling2D";j.registerClass(Of);var qg=class extends Et{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return this.layer!=null?this.layer.trainable:!1}set trainable(t){this.layer!=null&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){let t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),this.layer!=null&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,o={}){let n=e.layer,s=Xr(n,o);delete e.layer;let i={layer:s};return Object.assign(i,e),new t(i)}},Lf=class extends qg{constructor(t){super(t),this.supportsMasking=!0}build(t){if(t=Lt(t),t.length<3)throw new L(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(t)}`);this.inputSpec=[{shape:t}];let e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){t=Lt(t);let e=[t[0]].concat(t.slice(2)),o=this.layer.computeOutputShape(e),n=t[1];return[o[0],n].concat(o.slice(1))}call(t,e){return z(()=>(t=vt(t),c0((i,a)=>[vt(this.layer.call(i,e)),[]],t,[],!1,null,null,!1,!0)[1]))}};Lf.className="TimeDistributed";j.registerClass(Lf);function LW(r){$n(Ak,"BidirectionalMergeMode",r)}var PW="concat",Pf=class extends qg{constructor(t){super(t);let e=t.layer.getConfig(),o={};o.className=t.layer.getClassName(),o.config=e,this.forwardLayer=Xr(o),e.goBackwards=e.goBackwards!==!0;let n={};if(n.className=t.layer.getClassName(),n.config=e,this.backwardLayer=Xr(n),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=t.mergeMode===void 0?PW:t.mergeMode,LW(this.mergeMode),t.weights)throw new gt("weights support is not implemented for Bidirectional layer yet.");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,this.forwardLayer!=null&&(this.forwardLayer.trainable=t),this.backwardLayer!=null&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){let e=t.length,o=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,o)),this.backwardLayer.setWeights(t.slice(o))}computeOutputShape(t){let e=this.forwardLayer.computeOutputShape(t);Array.isArray(e)&&Array.isArray(e[0])||(e=[e]),e=e;let o,n,s;return this.returnState&&(s=e.slice(1)),o=e[0],o=o,this.mergeMode==="concat"?(o[o.length-1]*=2,n=[o]):this.mergeMode==null?n=[o,o.slice()]:n=[o],this.returnState?this.mergeMode==null?n.concat(s).concat(s.slice()):[o].concat(s).concat(s.slice()):Xe(n)}apply(t,e){let o=e==null?null:e.initialState,n=e==null?null:e.constants;e==null&&(e={});let s=u0(t,o,n,this.numConstants);if(t=s.inputs,o=s.initialState,n=s.constants,Array.isArray(t)&&(o=t.slice(1),t=t[0]),(o==null||o.length===0)&&n==null)return super.apply(t,e);let i=[],a=[];if(o!=null){let u=o.length;if(u%2>0)throw new L("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");e.initialState=o,i.push(...o);let c=o.map(p=>new Yt({shape:p.shape}));this.forwardLayer.stateSpec=c.slice(0,u/2),this.backwardLayer.stateSpec=c.slice(u/2),a.push(...c)}if(n!=null)throw new gt("Support for constants in Bidirectional layers is not implemented yet.");let l=i[0]instanceof xr;for(let u of i)if(u instanceof xr!==l)throw new L("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(l){let u=[t].concat(i),c=this.inputSpec.concat(a),p=this.inputSpec;this.inputSpec=c;let m=super.apply(u,e);return this.inputSpec=p,m}else return super.apply(t,e)}call(t,e){return z(()=>{let o=e.initialState,n,s;if(o==null)n=this.forwardLayer.call(t,e),s=this.backwardLayer.call(t,e);else{let l=o.slice(0,o.length/2),u=o.slice(o.length/2);n=this.forwardLayer.call(t,Object.assign(e,{initialState:l})),s=this.backwardLayer.call(t,Object.assign(e,{initialState:u}))}let i;this.returnState&&(Array.isArray(n)&&(i=n.slice(1).concat(s.slice(1))),n=n[0],s=s[0]),this.returnSequences&&(s=Be(s,1));let a;return this.mergeMode==="concat"?a=Yc([n,s]):this.mergeMode==="sum"?a=U(n,s):this.mergeMode==="ave"?a=D(.5,U(n,s)):this.mergeMode==="mul"?a=D(n,s):this.mergeMode==null&&(a=[n,s]),this.returnState?this.mergeMode==null?a.concat(i):[a].concat(i):a})}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){jo(this.forwardLayer.name,()=>{this.forwardLayer.build(t)}),jo(this.backwardLayer.name,()=>{this.backwardLayer.build(t)}),this.built=!0}computeMask(t,e){Array.isArray(e)&&(e=e[0]);let o;if(this.returnSequences?this.mergeMode==null?o=[e,e]:o=e:this.mergeMode==null?o=[null,null]:o=null,this.returnState){let s=this.forwardLayer.states.map(i=>null);return Array.isArray(o)?o.concat(s).concat(s):[o].concat(s).concat(s)}else return o}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),this.forwardLayer!=null&&this.forwardLayer.setFastWeightInitDuringBuild(t),this.backwardLayer!=null&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){let t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){let o=Xr(e.layer);if(delete e.layer,e.numConstants!=null)throw new gt("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");let n=e;return n.layer=o,new t(n)}};Pf.className="Bidirectional";j.registerClass(Pf);var WW=M();WW.registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,r=>{r&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")});var uo;(function(r){r[r.DT_INVALID=0]="DT_INVALID",r[r.DT_FLOAT=1]="DT_FLOAT",r[r.DT_DOUBLE=2]="DT_DOUBLE",r[r.DT_INT32=3]="DT_INT32",r[r.DT_UINT8=4]="DT_UINT8",r[r.DT_INT16=5]="DT_INT16",r[r.DT_INT8=6]="DT_INT8",r[r.DT_STRING=7]="DT_STRING",r[r.DT_COMPLEX64=8]="DT_COMPLEX64",r[r.DT_INT64=9]="DT_INT64",r[r.DT_BOOL=10]="DT_BOOL",r[r.DT_QINT8=11]="DT_QINT8",r[r.DT_QUINT8=12]="DT_QUINT8",r[r.DT_QINT32=13]="DT_QINT32",r[r.DT_BFLOAT16=14]="DT_BFLOAT16",r[r.DT_QINT16=15]="DT_QINT16",r[r.DT_QUINT16=16]="DT_QUINT16",r[r.DT_UINT16=17]="DT_UINT16",r[r.DT_COMPLEX128=18]="DT_COMPLEX128",r[r.DT_HALF=19]="DT_HALF",r[r.DT_RESOURCE=20]="DT_RESOURCE",r[r.DT_VARIANT=21]="DT_VARIANT",r[r.DT_UINT32=22]="DT_UINT32",r[r.DT_UINT64=23]="DT_UINT64",r[r.DT_FLOAT_REF=101]="DT_FLOAT_REF",r[r.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",r[r.DT_INT32_REF=103]="DT_INT32_REF",r[r.DT_UINT8_REF=104]="DT_UINT8_REF",r[r.DT_INT16_REF=105]="DT_INT16_REF",r[r.DT_INT8_REF=106]="DT_INT8_REF",r[r.DT_STRING_REF=107]="DT_STRING_REF",r[r.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",r[r.DT_INT64_REF=109]="DT_INT64_REF",r[r.DT_BOOL_REF=110]="DT_BOOL_REF",r[r.DT_QINT8_REF=111]="DT_QINT8_REF",r[r.DT_QUINT8_REF=112]="DT_QUINT8_REF",r[r.DT_QINT32_REF=113]="DT_QINT32_REF",r[r.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",r[r.DT_QINT16_REF=115]="DT_QINT16_REF",r[r.DT_QUINT16_REF=116]="DT_QUINT16_REF",r[r.DT_UINT16_REF=117]="DT_UINT16_REF",r[r.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",r[r.DT_HALF_REF=119]="DT_HALF_REF",r[r.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",r[r.DT_VARIANT_REF=121]="DT_VARIANT_REF",r[r.DT_UINT32_REF=122]="DT_UINT32_REF",r[r.DT_UINT64_REF=123]="DT_UINT64_REF"})(uo||(uo={}));var b1;(function(r){let t;(function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"})(t=r.CheckpointFormatVersion||(r.CheckpointFormatVersion={}))})(b1||(b1={}));var HW={};function Kg(r){return HW[r]}function v(r,t,e,o,n){let s=t.inputParams[r];if(s&&s.inputIndexStart!==void 0){let a=s.inputIndexStart,l=s.inputIndexEnd===0?void 0:s.inputIndexEnd===void 0?a+1:s.inputIndexEnd;if(s.type==="tensor")return Ue(t.inputNames[s.inputIndexStart],e,o,n);if(s.type==="tensors")return t.inputNames.slice(a,l).map(m=>Ue(m,e,o,n));let u=Ue(t.inputNames.slice(a)[0],e,o,n),c=u.dataSync();return s.type==="number"?c[0]:x.toNestedArray(u.shape,c)}let i=t.attrParams[r];return i&&i.value}function Ue(r,t,e,o){let[n,s]=Rr(r);if(o!=null){let a=o.getHashTableHandleByName(n);if(a!=null)return a}let i=e.currentContextIds.find(a=>!!t[jg(n,a)]);return i!==void 0?t[jg(n,i)][s]:void 0}function w1(r,t,e){return t[jg(r,e.currentContextId)]}function Fo(r,t){let[e,o,n]=Rr(r);return[jg(e,t&&t.currentContextId),o,n]}function jg(r,t){return t?`${r}-${t}`:r}function Rr(r){let t=r.split(":");if(t.length===1)return[r,0,void 0];let e=t[0],o=t.length===3?t[1]:void 0,n=Number(t[t.length-1]);return[e,n,o]}function zf(r,t,e){let o=v("pad",r,t,e);if(o==="explicit"){o=v("explicitPaddings",r,t,e);let n=[[0,0],[0,0],[0,0],[0,0]];for(let s=0;s<4;s++)n[s][0]=o[s*2],n[s][1]=o[s*2+1];return n}return o}function Qo(r){return r.kept?r:Nr(r)}var p0={};qt(p0,{json:()=>qW});var qW=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var m0={};qt(m0,{json:()=>KW});var KW=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var f0={};qt(f0,{json:()=>jW});var jW=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var h0={};qt(h0,{json:()=>XW});var XW=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var d0={};qt(d0,{json:()=>YW});var YW=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var g0={};qt(g0,{json:()=>ZW});var ZW=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var x0={};qt(x0,{json:()=>JW});var JW=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var y0={};qt(y0,{json:()=>QW});var QW=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var b0={};qt(b0,{json:()=>tU});var tU=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}];var w0={};qt(w0,{json:()=>eU});var eU=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var C0={};qt(C0,{json:()=>rU});var rU=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var v0={};qt(v0,{json:()=>oU});var oU=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}];var N0={};qt(N0,{json:()=>nU});var nU=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];var S0={};qt(S0,{json:()=>sU});var sU=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var I0={};qt(I0,{json:()=>iU});var iU=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];var T0={};qt(T0,{json:()=>aU});var aU=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var k0={};qt(k0,{json:()=>lU});var lU=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var E0={};qt(E0,{json:()=>uU});var uU=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var $0={};qt($0,{json:()=>cU});var cU=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var Mf=class{static get Instance(){return this._instance||(this._instance=new this)}constructor(){let t=[p0,m0,f0,h0,d0,g0,x0,y0,b0,w0,C0,v0,N0,S0,I0,T0,k0,E0,$0],e=[].concat(...t.map(o=>o.json));this.opMappers=e.reduce((o,n)=>(o[n.tfOpName]=n,o),{})}transformGraph(t,e={}){let o=t.node,n=[],s=[],i=[],a=o.reduce((d,g)=>(d[g.name]=this.mapNode(g),g.op.startsWith("Placeholder")?n.push(d[g.name]):g.op==="Const"?s.push(d[g.name]):(g.input==null||g.input.length===0)&&i.push(d[g.name]),d),{}),l=[],u=[],c={},p={};e!=null&&(c=this.mapSignatureEntries(e.inputs),p=this.mapSignatureEntries(e.outputs));let m=Object.keys(a);m.forEach(d=>{let g=a[d];g.inputNames.forEach((y,b)=>{let[w,,C]=Fo(y),I=a[w];if(I.outputs!=null){let $=I.outputs.indexOf(C);if($!==-1){let A=`${w}:${$}`;g.inputNames[b]=A}}g.inputs.push(I),I.children.push(g)})}),Object.keys(p).length===0?m.forEach(d=>{let g=a[d];g.children.length===0&&u.push(g)}):Object.keys(p).forEach(d=>{let[g]=Fo(d),y=a[g];y!=null&&(y.signatureKey=p[d],u.push(y))}),Object.keys(c).length>0?Object.keys(c).forEach(d=>{let[g]=Fo(d),y=a[g];y&&(y.signatureKey=c[d],l.push(y))}):l=n;let f={};t.library!=null&&t.library.function!=null&&(f=t.library.function.reduce((d,g)=>(d[g.signature.name]=this.mapFunction(g),d),{}));let h={nodes:a,inputs:l,outputs:u,weights:s,placeholders:n,signature:e,functions:f};return i.length>0&&(h.initNodes=i),h}mapSignatureEntries(t){return Object.keys(t||{}).reduce((e,o)=>(e[t[o].name]=o,e),{})}mapNode(t){let e=Kg(t.op)||this.opMappers[t.op]||{};t.attr==null&&(t.attr={});let o={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(n=>n.startsWith("^")?n.slice(1):n),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr,outputs:e.outputs};return e.inputs!=null&&(o.inputParams=e.inputs.reduce((n,s)=>(n[s.name]={type:s.type,inputIndexStart:s.start,inputIndexEnd:s.end},n),{})),e.attrs!=null&&(o.attrParams=e.attrs.reduce((n,s)=>{let i=s.type,a;switch(s.type){case"string":a=Xg(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=Xg(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"string[]":a=rx(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=rx(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"number":a=Zg(t.attr,s.tfName,s.defaultValue||0),a===void 0&&!!s.tfDeprecatedName&&(a=Zg(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"number[]":a=ex(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=ex(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"bool":a=Yg(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=Yg(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"bool[]":a=nx(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=nx(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"shape":a=tx(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=tx(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"shape[]":a=ox(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=ox(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"dtype":a=Jg(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=Jg(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"dtype[]":a=Qg(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=Qg(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"func":a=C1(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=C1(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${s.type} for op: ${t.op}`)}return n[s.name]={value:a,type:i},n},{})),o}mapFunction(t){let e=t.nodeDef,o=[],n=[],s={};e!=null&&(s=e.reduce((p,m)=>(p[m.name]=this.mapNode(m),m.op==="Const"&&n.push(p[m.name]),p),{}));let i=[],a=[];t.signature.inputArg.forEach(p=>{let[m]=Fo(p.name),f={name:m,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:A0(p.type),type:"dtype"}},children:[]};f.signatureKey=p.name,i.push(f),s[m]=f}),Object.keys(s).forEach(p=>{let m=s[p];m.inputNames.forEach((f,h)=>{let[d,,g]=Fo(f),y=s[d];if(y.outputs!=null){let b=y.outputs.indexOf(g);if(b!==-1){let w=`${d}:${b}`;m.inputNames[h]=w}}m.inputs.push(y),y.children.push(m)})});let u=t.ret;t.signature.outputArg.forEach(p=>{let[m,f]=Fo(u[p.name]),h=s[m];h!=null&&(h.defaultOutput=f,a.push(h))});let c=this.mapArgsToSignature(t);return{nodes:s,inputs:i,outputs:a,weights:n,placeholders:o,signature:c}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce((e,o)=>(e[o.name]=this.mapArgToTensorInfo(o),e),{}),outputs:t.signature.outputArg.reduce((e,o)=>(e[o.name]=this.mapArgToTensorInfo(o,t.ret),e),{})}}mapArgToTensorInfo(t,e){let o=t.name;return e!=null&&(o=e[o]),{name:o,dtype:t.type}}};function pU(r){let t=M().global;if(typeof t.atob!="undefined")return t.atob(r);if(typeof Buffer!="undefined")return new Buffer(r,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}function v1(r,t){let e=Array.isArray(r)?String.fromCharCode.apply(null,r):pU(r);return t?e:e.toLowerCase()}function Xg(r,t,e,o=!1){let n=r[t];return n!=null?v1(n.s,o):e}function Yg(r,t,e){let o=r[t];return o?o.b:e}function Zg(r,t,e){let o=r[t]||{},n=o.i!=null?o.i:o.f!=null?o.f:e;return typeof n=="number"?n:parseInt(n,10)}function A0(r){switch(typeof r=="string"&&(r=uo[r]),r){case uo.DT_FLOAT:case uo.DT_HALF:return"float32";case uo.DT_INT32:case uo.DT_INT64:case uo.DT_INT8:case uo.DT_UINT8:return"int32";case uo.DT_BOOL:return"bool";case uo.DT_DOUBLE:return"float32";case uo.DT_STRING:return"string";default:return null}}function C1(r,t,e){let o=r[t];return o&&o.func?o.func.name:e}function Jg(r,t,e){let o=r[t];return o&&o.type?A0(o.type):e}function Qg(r,t,e){let o=r[t];return o&&o.list&&o.list.type?o.list.type.map(n=>A0(n)):e}function N1(r){if(!r.unknownRank)return r.dim!=null?r.dim.map(t=>typeof t.size=="number"?t.size:parseInt(t.size,10)):[]}function tx(r,t,e){let o=r[t];return o&&o.shape?N1(o.shape):e}function ex(r,t,e){let o=r[t];return o?((o.list.f&&o.list.f.length?o.list.f:o.list.i)||[]).map(n=>typeof n=="number"?n:parseInt(n,10)):e}function rx(r,t,e,o=!1){let n=r[t];return n&&n.list&&n.list.s?n.list.s.map(s=>v1(s,o)):e}function ox(r,t,e){let o=r[t];return o&&o.list&&o.list.shape?o.list.shape.map(n=>N1(n)):e}function nx(r,t,e){let o=r[t];return o&&o.list&&o.list.b?o.list.b:e}var sx=class{constructor(t,e,o){this.node=t,this.tensorMap=e,this.context=o,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(n=>this.getInput(n)),t.rawAttrs!=null&&(this.attrs=Object.keys(t.rawAttrs).reduce((n,s)=>(n[s]=this.getAttr(s),n),{}))}getInput(t){return Ue(t,this.tensorMap,this.context)}getAttr(t,e){let o=this.node.rawAttrs[t];if(o.tensor!=null)return Ue(t,this.tensorMap,this.context);if(o.i!=null||o.f!=null)return Zg(this.node.rawAttrs,t,e);if(o.s!=null)return Xg(this.node.rawAttrs,t,e);if(o.b!=null)return Yg(this.node.rawAttrs,t,e);if(o.shape!=null)return tx(this.node.rawAttrs,t,e);if(o.type!=null)return Jg(this.node.rawAttrs,t,e);if(o.list!=null){if(o.list.i!=null||o.list.f!=null)return ex(this.node.rawAttrs,t,e);if(o.list.s!=null)return rx(this.node.rawAttrs,t,e);if(o.list.shape!=null)return ox(this.node.rawAttrs,t,e);if(o.list.b!=null)return nx(this.node.rawAttrs,t,e);if(o.list.type!=null)return Qg(this.node.rawAttrs,t,e)}return e}};var Gt={};qt(Gt,{OP_SCOPE_SUFFIX:()=>Jb,abs:()=>se,acos:()=>Fh,acosh:()=>Rh,add:()=>U,addN:()=>WN,all:()=>vc,any:()=>gl,argMax:()=>xn,argMin:()=>_h,asin:()=>Oh,asinh:()=>Lh,atan:()=>Ph,atan2:()=>zh,atanh:()=>Mh,avgPool:()=>sa,avgPool3d:()=>Vh,basicLSTMCell:()=>qN,batchNorm:()=>bn,batchNorm2d:()=>Gh,batchNorm3d:()=>Wh,batchNorm4d:()=>Uh,batchToSpaceND:()=>ia,bincount:()=>Hh,booleanMaskAsync:()=>sB,broadcastArgs:()=>jN,broadcastTo:()=>aa,buffer:()=>pt,cast:()=>q,ceil:()=>qh,clipByValue:()=>Pe,clone:()=>Nr,complex:()=>Lr,concat:()=>Bt,concat1d:()=>Kh,concat2d:()=>jh,concat3d:()=>Xh,concat4d:()=>Yh,conv1d:()=>Sc,conv2d:()=>zr,conv2dTranspose:()=>Tc,conv3d:()=>Zh,conv3dTranspose:()=>Qh,cos:()=>la,cosh:()=>kc,cosineWindow:()=>mm,cumprod:()=>bl,cumsum:()=>Ec,denseBincount:()=>XN,depthToSpace:()=>td,depthwiseConv2d:()=>wn,diag:()=>YN,dilation2d:()=>ed,div:()=>et,divNoNan:()=>rd,dot:()=>od,dropout:()=>Dw,einsum:()=>ZN,elu:()=>Cn,enclosingPowerOfTwo:()=>Fw,equal:()=>hr,erf:()=>nd,euclideanNorm:()=>sd,exp:()=>Ae,expandDims:()=>ze,expm1:()=>id,eye:()=>Cl,fft:()=>xa,fill:()=>vn,floor:()=>Nn,floorDiv:()=>Cc,fused:()=>ba,gather:()=>Sn,gatherND:()=>hB,greater:()=>Se,greaterEqual:()=>Kr,ifft:()=>Ps,imag:()=>na,image:()=>Ms,inTopKAsync:()=>xB,irfft:()=>Gc,isFinite:()=>ad,isInf:()=>ld,isNaN:()=>ud,leakyRelu:()=>ua,less:()=>$c,lessEqual:()=>jr,linalg:()=>_w,linspace:()=>tS,localResponseNormalization:()=>cd,log:()=>Ke,log1p:()=>ca,logSigmoid:()=>md,logSoftmax:()=>Ac,logSumExp:()=>Dc,logicalAnd:()=>ir,logicalNot:()=>pa,logicalOr:()=>Fc,logicalXor:()=>fd,losses:()=>xV,lowerBound:()=>eS,matMul:()=>kt,max:()=>sr,maxPool:()=>ma,maxPool3d:()=>dd,maxPoolWithArgmax:()=>rS,maximum:()=>Mr,mean:()=>ee,meshgrid:()=>oS,min:()=>wl,minimum:()=>In,mirrorPad:()=>gd,mod:()=>xd,moments:()=>vl,movingAverage:()=>aB,mul:()=>D,multiRNNCell:()=>nS,multinomial:()=>sS,neg:()=>Rt,norm:()=>Ls,notEqual:()=>Ho,oneHot:()=>hn,ones:()=>Me,onesLike:()=>We,op:()=>S,outerProduct:()=>iS,pad:()=>Tr,pad1d:()=>aS,pad2d:()=>lS,pad3d:()=>uS,pad4d:()=>cS,pool:()=>yd,pow:()=>Sr,prelu:()=>ha,print:()=>Ih,prod:()=>bd,rand:()=>pS,randomGamma:()=>ES,randomNormal:()=>Il,randomStandardNormal:()=>$S,randomUniform:()=>Tn,range:()=>da,real:()=>Os,reciprocal:()=>Sd,relu:()=>er,relu6:()=>Rc,reshape:()=>F,reverse:()=>Be,reverse1d:()=>AS,reverse2d:()=>DS,reverse3d:()=>FS,reverse4d:()=>RS,rfft:()=>ya,round:()=>_c,rsqrt:()=>Oc,scalar:()=>nt,scatterND:()=>uB,searchSorted:()=>um,selu:()=>Lc,separableConv2d:()=>Pc,setdiff1dAsync:()=>_S,sigmoid:()=>fr,sign:()=>Id,signal:()=>gV,sin:()=>zc,sinh:()=>Mc,slice:()=>Ct,slice1d:()=>Bc,slice2d:()=>pm,slice3d:()=>Vc,slice4d:()=>Tl,softmax:()=>ga,softplus:()=>Uo,spaceToBatchND:()=>fa,sparse:()=>yV,sparseToDense:()=>mB,spectral:()=>dV,split:()=>Ve,sqrt:()=>te,square:()=>At,squaredDifference:()=>Wc,squeeze:()=>kr,stack:()=>De,step:()=>Co,stridedSlice:()=>Td,string:()=>bV,sub:()=>tt,sum:()=>st,tan:()=>kd,tanh:()=>yn,tensor:()=>Ze,tensor1d:()=>Ce,tensor2d:()=>zs,tensor3d:()=>Ah,tensor4d:()=>OS,tensor5d:()=>LS,tensor6d:()=>PS,tile:()=>tr,topk:()=>Ed,transpose:()=>St,truncatedNormal:()=>Uc,unique:()=>$d,unsortedSegmentSum:()=>Hc,unstack:()=>je,upperBound:()=>zS,variable:()=>Ad,where:()=>le,whereAsync:()=>Fd,zeros:()=>re,zerosLike:()=>dt});var S1=(r,t,e,o=Gt)=>{switch(r.op){case"BiasAdd":case"AddV2":case"Add":return[o.add(v("a",r,t,e),v("b",r,t,e))];case"AddN":return[o.addN(v("tensors",r,t,e))];case"FloorMod":case"Mod":return[o.mod(v("a",r,t,e),v("b",r,t,e))];case"Mul":return[o.mul(v("a",r,t,e),v("b",r,t,e))];case"RealDiv":case"Div":return[o.div(v("a",r,t,e),v("b",r,t,e))];case"DivNoNan":return[o.divNoNan(v("a",r,t,e),v("b",r,t,e))];case"FloorDiv":return[o.floorDiv(v("a",r,t,e),v("b",r,t,e))];case"Sub":return[o.sub(v("a",r,t,e),v("b",r,t,e))];case"Minimum":return[o.minimum(v("a",r,t,e),v("b",r,t,e))];case"Maximum":return[o.maximum(v("a",r,t,e),v("b",r,t,e))];case"Pow":return[o.pow(v("a",r,t,e),v("b",r,t,e))];case"SquaredDifference":return[o.squaredDifference(v("a",r,t,e),v("b",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var I1=(r,t,e,o=Gt)=>{switch(r.op){case"Abs":case"ComplexAbs":return[o.abs(v("x",r,t,e))];case"Acos":return[o.acos(v("x",r,t,e))];case"Acosh":return[o.acosh(v("x",r,t,e))];case"Asin":return[o.asin(v("x",r,t,e))];case"Asinh":return[o.asinh(v("x",r,t,e))];case"Atan":return[o.atan(v("x",r,t,e))];case"Atan2":return[o.atan2(v("x",r,t,e),v("y",r,t,e))];case"Atanh":return[o.atanh(v("x",r,t,e))];case"Ceil":return[o.ceil(v("x",r,t,e))];case"Complex":return[o.complex(v("real",r,t,e),v("imag",r,t,e))];case"Cos":return[o.cos(v("x",r,t,e))];case"Cosh":return[o.cosh(v("x",r,t,e))];case"Elu":return[o.elu(v("x",r,t,e))];case"Erf":return[o.erf(v("x",r,t,e))];case"Exp":return[o.exp(v("x",r,t,e))];case"Expm1":return[o.expm1(v("x",r,t,e))];case"Floor":return[o.floor(v("x",r,t,e))];case"Log":return[o.log(v("x",r,t,e))];case"Log1p":return[o.log1p(v("x",r,t,e))];case"Imag":return[o.imag(v("x",r,t,e))];case"Neg":return[o.neg(v("x",r,t,e))];case"Reciprocal":return[o.reciprocal(v("x",r,t,e))];case"Real":return[o.real(v("x",r,t,e))];case"Relu":return[o.relu(v("x",r,t,e))];case"Round":return[o.round(v("x",r,t,e))];case"Selu":return[o.selu(v("x",r,t,e))];case"Sigmoid":return[o.sigmoid(v("x",r,t,e))];case"Sin":return[o.sin(v("x",r,t,e))];case"Sign":return[o.sign(v("x",r,t,e))];case"Sinh":return[o.sinh(v("x",r,t,e))];case"Softplus":return[o.softplus(v("x",r,t,e))];case"Sqrt":return[o.sqrt(v("x",r,t,e))];case"Square":return[o.square(v("x",r,t,e))];case"Tanh":return[o.tanh(v("x",r,t,e))];case"Tan":return[o.tan(v("x",r,t,e))];case"ClipByValue":return[o.clipByValue(v("x",r,t,e),v("clipValueMin",r,t,e),v("clipValueMax",r,t,e))];case"Relu6":return[o.relu6(v("x",r,t,e))];case"Rsqrt":return[o.rsqrt(Ue(r.inputNames[0],t,e))];case"Prod":return[o.prod(v("x",r,t,e),v("axes",r,t,e))];case"LeakyRelu":return[o.leakyRelu(v("x",r,t,e),v("alpha",r,t,e))];case"Prelu":return[o.prelu(v("x",r,t,e),v("alpha",r,t,e))];case"IsNan":return[o.isNaN(Ue(r.inputNames[0],t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};function Zr(r,t,e=""){if(!(typeof r=="number"||typeof t=="number")){x.assert(r.length===t.length,()=>e+` Shapes ${r} and ${t} must match`);for(let o=0;o<r.length;o++){let n=r[o],s=t[o];x.assert(n<0||s<0||n===s,()=>e+` Shapes ${r} and ${t} must match`)}}}function T1(r){return!(typeof r=="number"||r.some(t=>t<0))}function xp(r,t,e){let o=ix(r,e),n=!T1(o);if(n&&t.length===0)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${o}`);if(n&&t.forEach(s=>{o=ix(s.shape,o)}),!T1(o))throw new Error(`Non-fully-defined elementShape: ${o}`);return o}function ix(r,t){if(typeof r=="number")return t;if(typeof t=="number")return r;if(r.length!==t.length)throw new Error(`Incompatible ranks during merge: ${r} vs. ${t}`);let e=[];for(let o=0;o<r.length;++o){let n=r[o],s=t[o];if(n>=0&&s>=0&&n!==s)throw new Error(`Incompatible shape during merge: ${r} vs. ${t}`);e[o]=n>=0?n:s}return e}var ax=class{constructor(t,e,o,n,s,i,a){this.name=t,this.dtype=e,this.maxSize=o,this.elementShape=n,this.identicalElementShapes=s,this.dynamicSize=i,this.clearAfterRead=a,this.tensors=[],this.closed_=!1,this.idTensor=nt(0),ue(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach(e=>{(t==null||!t.has(e.tensor.id))&&e.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);let e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(e=>this.read(e))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);let o=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},
          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(this.size()===0&&(this.elementShape==null||this.elementShape.length===0)&&(this.elementShape=e.shape),Zr(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),o.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(o.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);o.tensor=e,ue(e),o.written=!0,this.tensors[t]=o}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach((o,n)=>this.write(o,e[n]))}gather(t,e){if(!!e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let n=0;n<this.size();n++)t.push(n)}if(t.length===0)return Ze([],[0].concat(this.elementShape));let o=this.readMany(t);return Zr(this.elementShape,o[0].shape,"TensorArray shape mismatch: "),De(o,0)}concat(t){if(!!t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(this.size()===0)return Ze([],[0].concat(this.elementShape));let e=[];for(let n=0;n<this.size();n++)e.push(n);let o=this.readMany(e);return Zr(this.elementShape,o[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${o[0].shape})`),Bt(o,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);let o=Math.max(...t);if(!this.dynamicSize&&o>=this.maxSize)throw new Error(`Max index must be < array size (${o}  vs. ${this.maxSize})`);this.writeMany(t,je(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let o=0,n=t.map(l=>(o+=l,o));if(o!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${o}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);let s=o===0?0:e.size/o,i=[];z(()=>{e=F(e,[1,o,s]);for(let l=0;l<t.length;++l){let u=l===0?0:n[l-1],c=[0,u,0],p=[1,t[l],s];i[l]=F(Ct(e,c,p),this.elementShape)}return i});let a=[];for(let l=0;l<t.length;l++)a[l]=l;this.writeMany(a,i)}};var js=class{constructor(t,e,o,n=-1){this.tensors=t,this.elementShape=e,this.elementDtype=o,t!=null&&t.forEach(s=>{if(o!==s.dtype)throw new Error(`Invalid data types; op elements ${o}, but list elements ${s.dtype}`);Zr(e,s.shape,"TensorList shape mismatch: "),ue(s)}),this.idTensor=nt(0),this.maxNumElements=n,ue(this.idTensor)}get id(){return this.idTensor.id}copy(){return new js([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach(e=>{(t==null||!t.has(e.id))&&e.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,o=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(o!==-1&&this.tensors.length!==o)throw new Error(`Operation expected a list with ${o} elements but got a list with ${this.tensors.length} elements.`);Zr(t,this.elementShape,"TensorList shape mismatch: ");let n=xp(this.elementShape,this.tensors,t);return z(()=>{let s=this.tensors.map(i=>F(i,n));return De(s,0)})}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(this.size()===0)throw new Error("Trying to pop from an empty list.");let o=xp(this.elementShape,this.tensors,t),n=this.tensors.pop();return Zr(n.shape,t,"TensorList shape mismatch: "),F(n,o)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(Zr(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");ue(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);if(this.maxNumElements!==-1&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);let e=new js([],this.elementShape,this.elementDtype,this.maxNumElements);e.tensors.length=t;for(let o=0;o<Math.min(this.tensors.length,t);++o)e.tensors[o]=this.tensors[o];return e}getItem(t,e,o){if(o!==this.elementDtype)throw new Error(`Invalid data types; op elements ${o}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(this.tensors[t]==null)throw new Error(`element at index ${t} is null.`);Zr(this.tensors[t].shape,e,"TensorList shape mismatch: ");let n=xp(this.elementShape,this.tensors,e);return F(this.tensors[t],n)}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||this.maxNumElements!==-1&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);Zr(this.elementShape,e.shape,"TensorList shape mismatch: "),ue(e),this.tensors[t]=e}gather(t,e,o){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);Zr(this.elementShape,o,"TensorList shape mismatch: "),t=t.slice(0,this.size());let n=xp(this.elementShape,this.tensors,o);return t.length===0?Ze([],[0].concat(n)):z(()=>{let s=t.map(i=>F(this.tensors[i],n));return De(s,0)})}concat(t,e){if(!!t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);Zr(this.elementShape,e,"TensorList shape mismatch: ");let o=xp(this.elementShape,this.tensors,e);return this.size()===0?Ze([],[0].concat(o)):z(()=>{let n=this.tensors.map(s=>F(s,o));return Bt(n,0)})}};function k1(r,t,e){let o=r.dtype;if(r.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${r.shape}`);if(r.dtype!==e)throw new Error(`Invalid data types; op elements ${r.dtype}, but list elements ${e}`);let n=r.shape.slice(1);Zr(n,t,"TensorList shape mismatch: ");let s=je(r);return new js(s,t,o)}function E1(r,t,e,o){return new js([],r,t,o)}function $1(r,t,e,o){if(t.length!==r.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${r.shape[0]}`);let n=Math.max(...t);if(o!=null&&o!==-1&&n>=o)throw new Error(`Max index must be < array size (${n}  vs. ${o})`);let s=new js([],e,r.dtype,o),i=je(r,0);return t.forEach((a,l)=>{s.setItem(a,i[l])}),s}function A1(r,t,e){let o=0,n=t.map(c=>(o+=c,o));if(o!==r.shape[0])throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${o}, and tensor's shape is: ${r.shape}`);let s=r.shape.slice(1),i=ix(s,e),a=o===0?0:r.size/o,l=z(()=>{let c=[];r=F(r,[1,o,a]);for(let p=0;p<t.length;++p){let m=p===0?0:n[p-1],f=[0,m,0],h=[1,t[p],a];c[p]=F(Ct(r,f,h),i)}return r.dispose(),c}),u=new js([],e,r.dtype,t.length);for(let c=0;c<l.length;c++)u.setItem(c,l[c]);return u}var D1=async(r,t,e)=>{switch(r.op){case"If":case"StatelessIf":{let o=v("thenBranch",r,t,e),n=v("elseBranch",r,t,e),s=v("cond",r,t,e),i=v("args",r,t,e);return(await s.data())[0]?e.functionMap[o].executeFunctionAsync(i,e.tensorArrayMap,e.tensorListMap):e.functionMap[n].executeFunctionAsync(i,e.tensorArrayMap,e.tensorListMap)}case"While":case"StatelessWhile":{let o=v("body",r,t,e),n=v("cond",r,t,e),s=v("args",r,t,e),i=await e.functionMap[n].executeFunctionAsync(s,e.tensorArrayMap,e.tensorListMap),a=s.map(c=>c.id),l=await i[0].data();i.forEach(c=>{!c.kept&&a.indexOf(c.id)===-1&&c.dispose()});let u=s;for(;l[0];){let c=u;u=await e.functionMap[o].executeFunctionAsync(u,e.tensorArrayMap,e.tensorListMap);let p=u.map(f=>f.id);c.forEach(f=>{!f.kept&&a.indexOf(f.id)===-1&&p.indexOf(f.id)===-1&&f.dispose()});let m=await e.functionMap[n].executeFunctionAsync(u,e.tensorArrayMap,e.tensorListMap);l=await m[0].data(),m.forEach(f=>{!f.kept&&a.indexOf(f.id)===-1&&p.indexOf(f.id)===-1&&f.dispose()})}return u}case"LoopCond":{let o=v("pred",r,t,e);return[Qo(o)]}case"Switch":{let o=v("pred",r,t,e),n=v("data",r,t,e);return n.kept||(n=Qo(n)),(await o.data())[0]?[void 0,n]:[n,void 0]}case"Merge":{let o=r.inputNames.find(n=>Ue(n,t,e)!==void 0);if(o){let n=Ue(o,t,e);return[Qo(n)]}return}case"Enter":{let o=v("frameName",r,t,e),n=v("tensor",r,t,e);return e.enterFrame(o),[Qo(n)]}case"Exit":{let o=v("tensor",r,t,e);return e.exitFrame(),[Qo(o)]}case"NextIteration":{let o=v("tensor",r,t,e);return e.nextIteration(),[Qo(o)]}case"TensorArrayV3":{let o=v("size",r,t,e),n=v("dtype",r,t,e),s=v("elementShape",r,t,e),i=v("dynamicSize",r,t,e),a=v("clearAfterRead",r,t,e),l=v("identicalElementShapes",r,t,e),u=v("name",r,t,e),c=new ax(u,n,o,s,l,i,a);return e.addTensorArray(c),[c.idTensor,nt(1)]}case"TensorArrayWriteV3":{let o=v("tensorArrayId",r,t,e),n=v("index",r,t,e),s=v("tensor",r,t,e),i=e.getTensorArray(o.id);return i.write(n,s),[i.idTensor]}case"TensorArrayReadV3":{let o=v("tensorArrayId",r,t,e),n=v("index",r,t,e);return[e.getTensorArray(o.id).read(n)]}case"TensorArrayGatherV3":{let o=v("tensorArrayId",r,t,e),n=v("indices",r,t,e),s=v("dtype",r,t,e);return[e.getTensorArray(o.id).gather(n,s)]}case"TensorArrayScatterV3":{let o=v("tensorArrayId",r,t,e),n=v("indices",r,t,e),s=v("tensor",r,t,e),i=e.getTensorArray(o.id);return i.scatter(n,s),[i.idTensor]}case"TensorArrayConcatV3":{let o=v("tensorArrayId",r,t,e),n=e.getTensorArray(o.id),s=v("dtype",r,t,e);return[n.concat(s)]}case"TensorArraySplitV3":{let o=v("tensorArrayId",r,t,e),n=v("tensor",r,t,e),s=v("lengths",r,t,e),i=e.getTensorArray(o.id);return i.split(s,n),[i.idTensor]}case"TensorArraySizeV3":{let o=v("tensorArrayId",r,t,e),n=e.getTensorArray(o.id);return[nt(n.size(),"int32")]}case"TensorArrayCloseV3":{let o=v("tensorArrayId",r,t,e),n=e.getTensorArray(o.id);return n.clearAndClose(),[n.idTensor]}case"TensorListSetItem":{let o=v("tensorListId",r,t,e),n=v("index",r,t,e),s=v("tensor",r,t,e),i=e.getTensorList(o.id);return i.setItem(n,s),[i.idTensor]}case"TensorListGetItem":{let o=v("tensorListId",r,t,e),n=v("index",r,t,e),s=v("elementShape",r,t,e),i=v("elementDType",r,t,e);return[e.getTensorList(o.id).getItem(n,s,i)]}case"TensorListScatterV2":case"TensorListScatter":{let o=v("indices",r,t,e),n=v("tensor",r,t,e),s=v("elementShape",r,t,e),i=v("numElements",r,t,e),a=$1(n,o,s,i);return e.addTensorList(a),[a.idTensor]}case"TensorListReserve":case"EmptyTensorList":{let o=v("elementShape",r,t,e),n=v("elementDType",r,t,e),s;r.op==="TensorListReserve"?s="numElements":s="maxNumElements";let i=v(s,r,t,e),a=r.op==="TensorListReserve"?-1:i,l=E1(o,n,i,a);return e.addTensorList(l),[l.idTensor]}case"TensorListGather":{let o=v("tensorListId",r,t,e),n=v("indices",r,t,e),s=v("elementShape",r,t,e),i=v("elementDType",r,t,e);return[e.getTensorList(o.id).gather(n,i,s)]}case"TensorListStack":{let o=v("tensorListId",r,t,e),n=v("elementShape",r,t,e),s=v("elementDType",r,t,e),i=v("numElements",r,t,e);return[e.getTensorList(o.id).stack(n,s,i)]}case"TensorListFromTensor":{let o=v("tensor",r,t,e),n=v("elementShape",r,t,e),s=v("elementDType",r,t,e),i=k1(o,n,s);return e.addTensorList(i),[i.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{let o=v("tensorListId",r,t,e),n=e.getTensorList(o.id),s=v("dtype",r,t,e),i=v("elementShape",r,t,e);return[n.concat(s,i)]}case"TensorListPushBack":{let o=v("tensorListId",r,t,e),n=v("tensor",r,t,e),s=e.getTensorList(o.id);return s.pushBack(n),[s.idTensor]}case"TensorListPopBack":{let o=v("tensorListId",r,t,e),n=v("elementShape",r,t,e),s=v("elementDType",r,t,e);return[e.getTensorList(o.id).popBack(n,s)]}case"TensorListSplit":{let o=v("tensor",r,t,e),n=v("elementShape",r,t,e),s=v("lengths",r,t,e),i=A1(o,s,n);return e.addTensorList(i),[i.idTensor]}case"TensorListLength":{let o=v("tensorListId",r,t,e),n=e.getTensorList(o.id);return[nt(n.size(),"int32")]}case"TensorListResize":{let o=v("tensorListId",r,t,e),n=v("size",r,t,e),i=e.getTensorList(o.id).resize(n);return e.addTensorList(i),[i.idTensor]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};function F1(r,t,e){let[o,n]=v("fusedOps",r,t,e),s=o==="biasadd",i=!s,a=n==="prelu",l=o==="fusedbatchnorm",u=v("numArgs",r,t,e);if(s){if(a&&u!==2)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!a&&s&&u!==1)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");let c=v("strides",r,t,e),p=zf(r,t,e),m=v("dataFormat",r,t,e).toUpperCase(),f=v("dilations",r,t,e),[h,d]=v("args",r,t,e);i&&(d=h,h=void 0);let g=v("leakyreluAlpha",r,t,e);return{stride:c,pad:p,dataFormat:m,dilations:f,biasArg:h,preluArg:d,activationFunc:n,leakyreluAlpha:g}}var R1=(r,t,e,o=Gt)=>{switch(r.op){case"Conv1D":{let n=v("stride",r,t,e),s=v("pad",r,t,e),i=v("dataFormat",r,t,e).toUpperCase(),a=v("dilation",r,t,e);return[o.conv1d(v("x",r,t,e),v("filter",r,t,e),n,s,i,a)]}case"Conv2D":{let n=v("strides",r,t,e),s=zf(r,t,e),i=v("dataFormat",r,t,e).toUpperCase(),a=v("dilations",r,t,e);return[o.conv2d(v("x",r,t,e),v("filter",r,t,e),[n[1],n[2]],s,i,[a[1],a[2]])]}case"_FusedConv2D":{let{stride:n,pad:s,dataFormat:i,dilations:a,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:p}=F1(r,t,e);return[o.fused.conv2d({x:v("x",r,t,e),filter:v("filter",r,t,e),strides:[n[1],n[2]],pad:s,dataFormat:i,dilations:[a[1],a[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:p})]}case"FusedDepthwiseConv2dNative":{let{stride:n,pad:s,dataFormat:i,dilations:a,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:p}=F1(r,t,e);return[o.fused.depthwiseConv2d({x:v("x",r,t,e),filter:v("filter",r,t,e),strides:[n[1],n[2]],pad:s,dataFormat:i,dilations:[a[1],a[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:p})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{let n=v("outputShape",r,t,e),s=v("strides",r,t,e),i=zf(r,t,e);return[o.conv2dTranspose(v("x",r,t,e),v("filter",r,t,e),n,[s[1],s[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{let n=v("strides",r,t,e),s=zf(r,t,e),i=v("dilations",r,t,e),a=v("dataFormat",r,t,e).toUpperCase();return[o.depthwiseConv2d(v("input",r,t,e),v("filter",r,t,e),[n[1],n[2]],s,a,[i[1],i[2]])]}case"Conv3D":{let n=v("strides",r,t,e),s=v("pad",r,t,e),i=v("dataFormat",r,t,e).toUpperCase(),a=v("dilations",r,t,e);return[o.conv3d(v("x",r,t,e),v("filter",r,t,e),[n[1],n[2],n[3]],s,i,[a[1],a[2],a[3]])]}case"AvgPool":{let n=v("strides",r,t,e),s=v("pad",r,t,e),i=v("kernelSize",r,t,e);return[o.avgPool(v("x",r,t,e),[i[1],i[2]],[n[1],n[2]],s)]}case"MaxPool":{let n=v("strides",r,t,e),s=v("pad",r,t,e),i=v("kernelSize",r,t,e);return[o.maxPool(v("x",r,t,e),[i[1],i[2]],[n[1],n[2]],s)]}case"MaxPoolWithArgmax":{let n=v("strides",r,t,e),s=v("pad",r,t,e),i=v("kernelSize",r,t,e),a=v("includeBatchInIndex",r,t,e),{result:l,indexes:u}=o.maxPoolWithArgmax(v("x",r,t,e),[i[1],i[2]],[n[1],n[2]],s,a);return[l,u]}case"AvgPool3D":{let n=v("strides",r,t,e),s=v("pad",r,t,e),i=v("kernelSize",r,t,e);return[o.avgPool3d(v("x",r,t,e),[i[1],i[2],i[3]],[n[1],n[2],n[3]],s)]}case"MaxPool3D":{let n=v("strides",r,t,e),s=v("pad",r,t,e),i=v("kernelSize",r,t,e);return[o.maxPool3d(v("x",r,t,e),[i[1],i[2],i[3]],[n[1],n[2],n[3]],s)]}case"Dilation2D":{let n=v("strides",r,t,e),s=v("pad",r,t,e),i=v("dilations",r,t,e),a=n[1],l=n[2],u=i[1],c=i[2];return[o.dilation2d(v("x",r,t,e),v("filter",r,t,e),[a,l],s,[u,c],"NHWC")]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var _1=(r,t,e,o=Gt)=>{switch(r.op){case"Fill":{let n=v("shape",r,t,e),s=v("dtype",r,t,e),i=v("value",r,t,e);return[o.fill(n,i,s)]}case"LinSpace":{let n=v("start",r,t,e),s=v("stop",r,t,e),i=v("num",r,t,e);return[o.linspace(n,s,i)]}case"Multinomial":{let n=v("logits",r,t,e),s=v("numSamples",r,t,e),i=v("seed",r,t,e);return[o.multinomial(n,s,i)]}case"OneHot":{let n=v("indices",r,t,e),s=v("depth",r,t,e),i=v("onValue",r,t,e),a=v("offValue",r,t,e);return[o.oneHot(n,s,i,a)]}case"Ones":return[o.ones(v("shape",r,t,e),v("dtype",r,t,e))];case"OnesLike":return[o.onesLike(v("x",r,t,e))];case"RandomStandardNormal":return[o.randomStandardNormal(v("shape",r,t,e),v("dtype",r,t,e),v("seed",r,t,e))];case"RandomUniform":return[o.randomUniform(v("shape",r,t,e),v("minval",r,t,e),v("maxval",r,t,e),v("dtype",r,t,e))];case"Range":{let n=v("start",r,t,e),s=v("stop",r,t,e),i=v("step",r,t,e);return[o.range(n,s,i,v("dtype",r,t,e))]}case"TruncatedNormal":{let n=v("shape",r,t,e),s=v("mean",r,t,e),i=v("stdDev",r,t,e),a=v("seed",r,t,e);return[o.truncatedNormal(n,s,i,v("dtype",r,t,e),a)]}case"Zeros":return[o.zeros(v("shape",r,t,e),v("dtype",r,t,e))];case"ZerosLike":return[o.zerosLike(v("x",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};function D0(r,t,e){let o=v("boxes",r,t,e),n=v("scores",r,t,e),s=v("maxOutputSize",r,t,e),i=v("iouThreshold",r,t,e),a=v("scoreThreshold",r,t,e),l=v("softNmsSigma",r,t,e);return{boxes:o,scores:n,maxOutputSize:s,iouThreshold:i,scoreThreshold:a,softNmsSigma:l}}var O1=async(r,t,e,o,n=Gt)=>{switch(r.op){case"NonMaxSuppressionV5":{let{boxes:s,scores:i,maxOutputSize:a,iouThreshold:l,scoreThreshold:u,softNmsSigma:c}=D0(r,t,e),p=await n.image.nonMaxSuppressionWithScoreAsync(s,i,a,l,u,c);return[p.selectedIndices,p.selectedScores]}case"NonMaxSuppressionV4":{let{boxes:s,scores:i,maxOutputSize:a,iouThreshold:l,scoreThreshold:u}=D0(r,t,e),c=v("padToMaxOutputSize",r,t,e),p=await n.image.nonMaxSuppressionPaddedAsync(s,i,a,l,u,c);return[p.selectedIndices,p.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{let{boxes:s,scores:i,maxOutputSize:a,iouThreshold:l,scoreThreshold:u}=D0(r,t,e);return[await n.image.nonMaxSuppressionAsync(s,i,a,l,u)]}case"Where":{let s=n.cast(v("condition",r,t,e),"bool"),i=[await n.whereAsync(s)];return s.dispose(),i}case"ListDiff":return n.setdiff1dAsync(v("x",r,t,e),v("y",r,t,e));default:throw TypeError(`Node type ${r.op} is not implemented`)}};var L1=(r,t,e,o=Gt)=>{switch(r.op){case"LowerBound":{let n=v("sortedSequence",r,t,e),s=v("values",r,t,e);return[o.lowerBound(n,s)]}case"TopKV2":{let n=v("x",r,t,e),s=v("k",r,t,e),i=v("sorted",r,t,e),a=o.topk(n,s,i);return[a.values,a.indices]}case"UpperBound":{let n=v("sortedSequence",r,t,e),s=v("values",r,t,e);return[o.upperBound(n,s)]}case"Unique":{let n=v("x",r,t,e),s=o.unique(n);return[s.values,s.indices]}case"UniqueV2":{let n=v("x",r,t,e),s=v("axis",r,t,e),i=o.unique(n,s);return[i.values,i.indices]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var P1=(r,t,e,o=Gt)=>{switch(r.op){case"Const":return t[r.name];case"PlaceholderWithDefault":let n=v("default",r,t,e);return[Ue(r.name,t,e)||n];case"Placeholder":return[Ue(r.name,t,e)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":{let c=v("x",r,t,e);return[Qo(c)]}case"IdentityN":return v("x",r,t,e).map(c=>Qo(c));case"Snapshot":let s=v("x",r,t,e);return[Qo(s)];case"Shape":return[o.tensor1d(v("x",r,t,e).shape,"int32")];case"ShapeN":return v("x",r,t,e).map(c=>o.tensor1d(c.shape));case"Size":return[o.scalar(v("x",r,t,e).size,"int32")];case"Rank":return[o.scalar(v("x",r,t,e).rank,"int32")];case"NoOp":return[o.scalar(1)];case"Print":let i=v("x",r,t,e),a=v("data",r,t,e),l=v("message",r,t,e),u=v("summarize",r,t,e);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(l);for(let c=0;c<a.length;c++)console.log(Array.prototype.slice.call(a[c].dataSync()).slice(0,u));return[i];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var lx=class{constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=nt(0),this.tensorMap=new Map,ue(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach(t=>t.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return nt(this.size(),"int32")}async import(t,e){this.checkKeyAndValueTensor(t,e);let o=await t.data();return this.tensorMap.forEach(n=>n.dispose()),this.tensorMap.clear(),z(()=>{let n=je(e),s=o.length,i=n.length;x.assert(s===i,()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${i} elements.`);for(let a=0;a<s;a++){let l=o[a],u=n[a];ue(u),this.tensorMap.set(l,u)}return this.handle})}async find(t,e){this.checkKeyAndValueTensor(t,e);let o=await t.data();return z(()=>{let n=[];for(let s=0;s<o.length;s++){let i=o[s],a=this.findWithDefault(i,e);n.push(a)}return De(n)})}findWithDefault(t,e){let o=this.tensorMap.get(t);return o!=null?o:e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`)}};var z1=async(r,t,e,o)=>{switch(r.op){case"HashTable":case"HashTableV2":{let n=v("keyDType",r,t,e),s=v("valueDType",r,t,e),i=new lx(n,s);return o.addHashTable(r.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{let n=v("tableHandle",r,t,e,o),s=v("keys",r,t,e),i=v("values",r,t,e);return[await o.getHashTableById(n.id).import(s,i)]}case"LookupTableFind":case"LookupTableFindV2":{let n=v("tableHandle",r,t,e,o),s=v("keys",r,t,e),i=v("defaultValue",r,t,e);return[await o.getHashTableById(n.id).find(s,i)]}case"LookupTableSize":case"LookupTableSizeV2":{let n=v("tableHandle",r,t,e,o);return[o.getHashTableById(n.id).tensorSize()]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var M1=(r,t,e,o=Gt)=>{switch(r.op){case"ResizeBilinear":{let n=v("images",r,t,e),s=v("size",r,t,e),i=v("alignCorners",r,t,e),a=v("halfPixelCenters",r,t,e);return[o.image.resizeBilinear(n,[s[0],s[1]],i,a)]}case"ResizeNearestNeighbor":{let n=v("images",r,t,e),s=v("size",r,t,e),i=v("alignCorners",r,t,e),a=v("halfPixelCenters",r,t,e);return[o.image.resizeNearestNeighbor(n,[s[0],s[1]],i,a)]}case"CropAndResize":{let n=v("image",r,t,e),s=v("boxes",r,t,e),i=v("boxInd",r,t,e),a=v("cropSize",r,t,e),l=v("method",r,t,e),u=v("extrapolationValue",r,t,e);return[o.image.cropAndResize(n,s,i,a,l,u)]}case"ImageProjectiveTransformV3":{let n=v("images",r,t,e),s=v("transforms",r,t,e),i=v("outputShape",r,t,e),a=v("fillValue",r,t,e),l=v("interpolation",r,t,e),u=v("fillMode",r,t,e);return[o.image.transform(n,s,l.toLowerCase(),u.toLowerCase(),a,i)]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var B1=(r,t,e,o=Gt)=>{switch(r.op){case"Equal":return[o.equal(v("a",r,t,e),v("b",r,t,e))];case"NotEqual":return[o.notEqual(v("a",r,t,e),v("b",r,t,e))];case"Greater":return[o.greater(v("a",r,t,e),v("b",r,t,e))];case"GreaterEqual":return[o.greaterEqual(v("a",r,t,e),v("b",r,t,e))];case"Less":return[o.less(v("a",r,t,e),v("b",r,t,e))];case"LessEqual":return[o.lessEqual(v("a",r,t,e),v("b",r,t,e))];case"LogicalAnd":return[o.logicalAnd(v("a",r,t,e),v("b",r,t,e))];case"LogicalNot":return[o.logicalNot(v("a",r,t,e))];case"LogicalOr":return[o.logicalOr(v("a",r,t,e),v("b",r,t,e))];case"Select":case"SelectV2":return[o.where(v("condition",r,t,e),v("a",r,t,e),v("b",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var V1=(r,t,e,o=Gt)=>{switch(r.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[o.matMul(v("a",r,t,e),v("b",r,t,e),v("transposeA",r,t,e),v("transposeB",r,t,e))];case"Einsum":return[o.einsum(v("equation",r,t,e),...v("tensors",r,t,e))];case"Transpose":return[o.transpose(v("x",r,t,e),v("perm",r,t,e))];case"_FusedMatMul":let[n,s]=v("fusedOps",r,t,e),i=n==="biasadd",a=s==="prelu",l=v("numArgs",r,t,e),u=v("leakyreluAlpha",r,t,e);if(i){if(a&&l!==2)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!a&&l!==1)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}let[c,p]=v("args",r,t,e);return[o.fused.matMul({a:v("a",r,t,e),b:v("b",r,t,e),transposeA:v("transposeA",r,t,e),transposeB:v("transposeB",r,t,e),bias:c,activation:s,preluActivationWeights:p,leakyreluAlpha:u})];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var G1=(r,t,e,o=Gt)=>{switch(r.op){case"EuclideanNorm":return[o.euclideanNorm(v("x",r,t,e),v("axis",r,t,e),v("keepDims",r,t,e))];case"FusedBatchNorm":case"FusedBatchNormV2":return[o.batchNorm(v("x",r,t,e),v("mean",r,t,e),v("variance",r,t,e),v("offset",r,t,e),v("scale",r,t,e),v("epsilon",r,t,e))];case"FusedBatchNormV3":return[o.batchNorm(v("x",r,t,e),v("mean",r,t,e),v("variance",r,t,e),v("offset",r,t,e),v("scale",r,t,e),v("epsilon",r,t,e))];case"LRN":return[o.localResponseNormalization(v("x",r,t,e),v("radius",r,t,e),v("bias",r,t,e),v("alpha",r,t,e),v("beta",r,t,e))];case"Softmax":return[o.softmax(v("x",r,t,e))];case"LogSoftmax":return[o.logSoftmax(v("x",r,t,e))];case"SparseToDense":return[o.sparseToDense(v("sparseIndices",r,t,e),v("outputShape",r,t,e),v("sparseValues",r,t,e),v("defaultValue",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var W1=(r,t,e,o=Gt)=>{switch(r.op){case"Max":{let a=v("axis",r,t,e),l=v("keepDims",r,t,e);return[o.max(v("x",r,t,e),a,l)]}case"Mean":{let a=v("axis",r,t,e),l=v("keepDims",r,t,e);return[o.mean(v("x",r,t,e),a,l)]}case"Min":{let a=v("axis",r,t,e),l=v("keepDims",r,t,e);return[o.min(v("x",r,t,e),a,l)]}case"Sum":{let a=v("axis",r,t,e),l=v("keepDims",r,t,e);return[o.sum(v("x",r,t,e),a,l)]}case"All":{let a=v("axis",r,t,e),l=v("keepDims",r,t,e);return[o.all(v("x",r,t,e),a,l)]}case"Any":{let a=v("axis",r,t,e),l=v("keepDims",r,t,e);return[o.any(v("x",r,t,e),a,l)]}case"ArgMax":{let a=v("axis",r,t,e);return[o.argMax(v("x",r,t,e),a)]}case"ArgMin":{let a=v("axis",r,t,e);return[o.argMin(v("x",r,t,e),a)]}case"Prod":{let a=v("axis",r,t,e),l=v("keepDims",r,t,e);return[o.prod(v("x",r,t,e),a,l)]}case"Cumprod":{let a=v("axis",r,t,e),l=v("exclusive",r,t,e),u=v("reverse",r,t,e);return[o.cumprod(v("x",r,t,e),a,l,u)]}case"Cumsum":{let a=v("axis",r,t,e),l=v("exclusive",r,t,e),u=v("reverse",r,t,e);return[o.cumsum(v("x",r,t,e),a,l,u)]}case"Bincount":let n=v("x",r,t,e),s=v("weights",r,t,e),i=v("size",r,t,e);return[o.bincount(n,s,i)];case"DenseBincount":{let a=v("x",r,t,e),l=v("weights",r,t,e),u=v("size",r,t,e),c=v("binaryOutput",r,t,e);return[o.denseBincount(a,l,u,c)]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var U1=(r,t,e,o=Gt)=>{switch(r.op){case"ConcatV2":case"Concat":{let n=v("n",r,t,e),s=v("axis",r,t,e),i=v("tensors",r,t,e);return i=i.slice(0,n),[o.concat(i,s)]}case"Gather":{let n=v("x",r,t,e),s=v("indices",r,t,e);return[o.gather(n,o.cast(s,"int32"),0)]}case"GatherV2":{let n=v("axis",r,t,e),s=v("batchDims",r,t,e),i=v("x",r,t,e),a=v("indices",r,t,e);return[o.gather(i,o.cast(a,"int32"),n,s)]}case"Reverse":{let n=v("dims",r,t,e),s=[];for(let a=0;a<n.length;a++)n[a]&&s.push(a);let i=v("x",r,t,e);return[o.reverse(i,s)]}case"ReverseV2":{let n=v("axis",r,t,e),s=v("x",r,t,e);return[o.reverse(s,n)]}case"Slice":{let n=v("begin",r,t,e),s=v("size",r,t,e);return[o.slice(v("x",r,t,e),n,s)]}case"StridedSlice":{let n=v("begin",r,t,e),s=v("end",r,t,e),i=v("strides",r,t,e),a=v("beginMask",r,t,e),l=v("endMask",r,t,e),u=v("ellipsisMask",r,t,e),c=v("newAxisMask",r,t,e),p=v("shrinkAxisMask",r,t,e),m=v("x",r,t,e);return[o.stridedSlice(m,n,s,i,a,l,u,c,p)]}case"Pack":return z(()=>{let n=v("axis",r,t,e),s=v("tensors",r,t,e),i=s[0].shape,a=o.squeeze(s[0]).shape,l=s.map(u=>{let c=x.arraysEqual(u.shape,i);if(!c&&!x.arraysEqual(o.squeeze(u).shape,a))throw new Error("the input tensors shape does not match");return c?u:o.reshape(u,i)});return[o.stack(l,n)]});case"Unpack":{let n=v("axis",r,t,e),s=v("tensor",r,t,e);return o.unstack(s,n)}case"Tile":{let n=v("reps",r,t,e);return[o.tile(v("x",r,t,e),n)]}case"Split":case"SplitV":{let n=v("axis",r,t,e),s=v("numOrSizeSplits",r,t,e),i=v("x",r,t,e);return o.split(i,s,n)}case"ScatterNd":{let n=v("indices",r,t,e),s=v("values",r,t,e),i=v("shape",r,t,e);return[o.scatterND(n,s,i)]}case"GatherNd":{let n=v("x",r,t,e),s=v("indices",r,t,e);return[o.gatherND(n,s)]}case"SparseToDense":{let n=v("sparseIndices",r,t,e),s=v("outputShape",r,t,e),i=v("sparseValues",r,t,e),a=v("defaultValue",r,t,e);return[o.sparseToDense(n,i,s,i.dtype===a.dtype?a:o.cast(a,i.dtype))]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var H1=(r,t,e,o=Gt)=>{switch(r.op){case"SparseFillEmptyRows":{let{outputIndices:n,outputValues:s,emptyRowIndicator:i,reverseIndexMap:a}=o.sparse.sparseFillEmptyRows(v("indices",r,t,e),v("values",r,t,e),v("denseShape",r,t,e),v("defaultValue",r,t,e));return[n,s,i,a]}case"SparseReshape":{let{outputIndices:n,outputShape:s}=o.sparse.sparseReshape(v("inputIndices",r,t,e),v("inputShape",r,t,e),v("newShape",r,t,e));return[n,s]}case"SparseSegmentMean":return[o.sparse.sparseSegmentMean(v("data",r,t,e),v("indices",r,t,e),v("segmentIds",r,t,e))];case"SparseSegmentSum":return[o.sparse.sparseSegmentSum(v("data",r,t,e),v("indices",r,t,e),v("segmentIds",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var q1=(r,t,e,o=Gt)=>{switch(r.op){case"FFT":return[o.fft(v("x",r,t,e))];case"IFFT":return[o.ifft(v("x",r,t,e))];case"RFFT":return[o.rfft(v("x",r,t,e))];case"IRFFT":return[o.irfft(v("x",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var K1=(r,t,e,o=Gt)=>{switch(r.op){case"StringNGrams":{let{nGrams:n,nGramsSplits:s}=o.string.stringNGrams(v("data",r,t,e),v("dataSplits",r,t,e),v("separator",r,t,e),v("nGramWidths",r,t,e),v("leftPad",r,t,e),v("rightPad",r,t,e),v("padWidth",r,t,e),v("preserveShortSequences",r,t,e));return[n,s]}case"StringSplit":{let{indices:n,values:s,shape:i}=o.string.stringSplit(v("input",r,t,e),v("delimiter",r,t,e),v("skipEmpty",r,t,e));return[n,s,i]}case"StringToHashBucketFast":return[o.string.stringToHashBucketFast(v("input",r,t,e),v("numBuckets",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var j1=(r,t,e,o=Gt)=>{switch(r.op){case"Cast":return[o.cast(v("x",r,t,e),v("dtype",r,t,e))];case"ExpandDims":{let n=v("axis",r,t,e);return[o.expandDims(v("x",r,t,e),n)]}case"Squeeze":{let n=v("axis",r,t,e);return[o.squeeze(v("x",r,t,e),n)]}case"Reshape":return[o.reshape(v("x",r,t,e),v("shape",r,t,e))];case"MirrorPad":return[o.mirrorPad(v("x",r,t,e),v("padding",r,t,e),v("mode",r,t,e))];case"PadV2":case"Pad":return[o.pad(v("x",r,t,e),v("padding",r,t,e),v("constantValue",r,t,e))];case"SpaceToBatchND":{let n=v("blockShape",r,t,e),s=v("paddings",r,t,e);return[o.spaceToBatchND(v("x",r,t,e),n,s)]}case"BatchToSpaceND":{let n=v("blockShape",r,t,e),s=v("crops",r,t,e);return[o.batchToSpaceND(v("x",r,t,e),n,s)]}case"DepthToSpace":{let n=v("blockSize",r,t,e),s=v("dataFormat",r,t,e).toUpperCase();return[o.depthToSpace(v("x",r,t,e),n,s)]}case"BroadcastTo":return[o.broadcastTo(v("x",r,t,e),v("shape",r,t,e))];case"BroadcastArgs":return[o.broadcastArgs(v("s0",r,t,e),v("s1",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};function F0(r,t,e,o,n=z){let s=((i,a,l)=>{switch(i.category){case"arithmetic":return n(()=>S1(i,a,l));case"basic_math":return n(()=>I1(i,a,l));case"control":return D1(i,a,l);case"convolution":return n(()=>R1(i,a,l));case"creation":return n(()=>_1(i,a,l));case"dynamic":return O1(i,a,l);case"evaluation":return n(()=>L1(i,a,l));case"image":return n(()=>M1(i,a,l));case"graph":return n(()=>P1(i,a,l));case"logical":return n(()=>B1(i,a,l));case"matrices":return n(()=>V1(i,a,l));case"normalization":return n(()=>G1(i,a,l));case"reduction":return n(()=>W1(i,a,l));case"slice_join":return n(()=>U1(i,a,l));case"sparse":return n(()=>H1(i,a,l));case"spectral":return n(()=>q1(i,a,l));case"string":return n(()=>K1(i,a,l));case"transformation":return n(()=>j1(i,a,l));case"hash_table":return z1(i,a,l,o);case"custom":let u=Kg(i.op);if(u&&u.customExecutor)return u.customExecutor(new sx(i,a,l));throw TypeError(`Custom op ${i.op} is not registered.`);default:throw TypeError(`Unknown op '${i.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(r,t,e);return x.isPromise(s)?s.then(i=>[].concat(i)):[].concat(s)}var Bf=class{constructor(t={},e={},o={},n={}){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=o,this.functionMap=n,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){let t=[];for(let e=0;e<this.contexts.length-1;e++){let o=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(o))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map(e=>e.id===0&&e.iterationId===0?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(this.contexts&&this.contexts.length>1)this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift();else throw new Error("Cannot exit frame, the context is empty")}nextIteration(){if(this.contexts&&this.contexts.length>0){this.contexts=this.contexts.slice(),this.lastId++;let t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}else throw new Error("Cannot increase frame iteration, the context is empty")}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(let e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(let e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}};function R0(r,t,e,o){let n=new Set,s=[],i=null,a=null,l=new Set,u=Object.keys(r).map(m=>Rr(m)[0]),c=[];o!=null&&(c=o.map(m=>Rr(m.name)[0]));let p=[...t];for(;p.length>0;){let m=p.pop();if((_0(m)||_U(m)||OU(m))&&i==null&&(i=m,a=i.children.map(f=>f.name).filter(f=>n.has(f))),n.add(m.name),e[m.name]==null&&u.indexOf(m.name)===-1&&c.indexOf(m.name)===-1){if(m.inputs.length===0){s.push(m.name);continue}m.inputs.forEach(f=>{l.has(f.name)||(l.add(f.name),p.push(f))})}}return{inputs:r,outputs:t,usedNodes:n,missingInputs:s,dynamicNode:i,syncInputs:a}}function X1(r,t,e){let{usedNodes:o,inputs:n}=e,s=[],i=Object.keys(n).map(c=>Rr(c)[0]).map(c=>r.nodes[c]),a=r.initNodes;i.forEach(c=>{o.has(c.name)&&s.push(c)}),r.weights.forEach(c=>{o.has(c.name)&&s.push(c)}),a!=null&&a.forEach(c=>{o.has(c.name)&&s.push(c)});let l=new Set,u=[];for(;s.length>0;){let c=s.pop();l.add(c.name),t[c.name]||u.push(c),c.children.forEach(p=>{!l.has(p.name)&&o.has(p.name)&&p.inputs.every(m=>l.has(m.name))&&s.push(p)})}return u}var DU=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],FU=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],RU=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function _0(r){return DU.indexOf(r.op)>=0}function _U(r){return FU.indexOf(r.op)>=0}function OU(r){return RU.indexOf(r.op)>=0}var Gl=class{constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,t.functions!=null&&Object.keys(t.functions).forEach(o=>{this._functionExecutorMap[o]=new Gl(t.functions[o],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){let e=Object.keys(t).map(o=>t[o].map(n=>n.id));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>{let e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e})}get functions(){return Object.keys(this._functions).reduce((t,e)=>(t[e]=this._functions[e].signature,t),{})}getCompilationKey(t,e){let o=t.map(s=>s.name).sort(),n=e.map(s=>s.name).sort();return o.join(this.SEPERATOR)+"--"+n.join(this.SEPERATOR)}compile(t,e){let o=R0(t,e,this.weightMap,this._initNodes),{missingInputs:n,dynamicNode:s,syncInputs:i}=o;if(s!=null)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${i}]`);if(n.length>0){let a=e.map(u=>u.name),l=Object.keys(t);throw new Error(`Cannot compute the outputs [${a}] from the provided inputs [${l}]. Missing the following inputs: [${n}]`)}return X1(this.graph,this.weightMap,o)}execute(t,e){t=this.mapInputs(t);let o=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);let n=o.map(p=>this.graph.nodes[Rr(p)[0]]),s=e.map(p=>Rr(p)[0]),i=s.map(p=>this.graph.nodes[p]);this.resetIntermediateTensors(),i.length===0&&(i=this._outputs);let a=this.getCompilationKey(n,i),l=this.compiledMap.get(a);l==null&&(l=this.compile(t,i),this.compiledMap.set(a,l));let u={},c={};return z(()=>{let p=new Bf(this.weightMap,u,c,this.functionExecutorMap),m=Object.assign({},this.weightMap);Object.keys(t).forEach(d=>{let[g,y]=Rr(d),b=[];b[y]=t[d],m[g]=b});let f=this.getFrozenTensorIds(m),h={};for(let d=0;d<l.length;d++){let g=l[d];if(!m[g.name]){let y=F0(g,m,p,this._resourceManager);if(x.isPromise(y))throw new Error(`The execution of the op '${g.op}' returned a promise. Please use model.executeAsync() instead.`);m[g.name]=y,this.checkTensorForDisposal(g.name,g,m,p,f,s,h)}}return this.parent==null&&p.dispose(f),e.map(d=>Ue(d,m,p))})}getFrozenTensorIds(t){let e=[].concat.apply([],Object.keys(t).map(o=>t[o]).map(o=>o.map(n=>n.id)));return new Set(e)}checkTensorForDisposal(t,e,o,n,s,i,a){e.category==="control"||i.indexOf(t)!==-1||(o[t].forEach(l=>{l!=null&&(a[l.id]=(a[l.id]||0)+e.children.length)}),e.inputs.forEach(l=>{if(l.category!=="control"){let u=w1(l.name,o,n);u!=null&&u.forEach(c=>{if(c&&!c.kept&&!s.has(c.id)){let p=a[c.id];if(p===1){if(!this.keepTensorForDebug)c.dispose();else{let[m,f]=Fo(e.name,n);this.intermediateTensors[m]?this.intermediateTensors[m][f]=c:(this.intermediateTensors[m]=[],this.intermediateTensors[m][f]=c)}delete a[c.id]}else p!=null&&a[c.id]--}})}}))}async executeAsync(t,e){return this._executeAsync(t,e)}disposeIntermediateTensors(){!this.intermediateTensors||(Object.keys(this.intermediateTensors).forEach(t=>this.intermediateTensors[t].forEach(e=>e.dispose())),this.disposeTensorsMap())}disposeTensorsMap(){!this.tensorsMap||Object.keys(this.tensorsMap).forEach(t=>{this.tensorsMap[t].forEach(o=>{o&&!o.kept&&!o.isDisposed&&!this.keepIds.has(o.id)&&o.dispose()})})}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(let t in this.intermediateTensors)this.intermediateTensors[t].forEach(e=>e.dispose()),delete this.intermediateTensors[t]}async _executeAsync(t,e,o=!1,n={},s={}){o||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e));try{this.keepTensorForDebug=M().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(c){console.warn(c.message)}this.resetIntermediateTensors();let i=new Bf(this.weightMap,n,s,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(t,i,e,o);let a=e.map(c=>Ue(c,this.tensorsMap,i)),l=a.map(c=>c.id),u=Object.keys(t).map(c=>t[c].id);return this.keepIds=new Set([...l,...u,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),this.parent==null&&i.dispose(this.keepIds),a}async executeFunctionAsync(t,e,o){let n=t.reduce((s,i,a)=>(s[this.inputs[a].name]=i,s),{});return this._executeAsync(n,this.outputNodes,!0,e,o)}async executeWithControlFlow(t,e,o,n){let s=Object.keys(t),i=s.map(w=>this.graph.nodes[Rr(w)[0]]),a=o.map(w=>Rr(w)[0]),l=a.map(w=>this.graph.nodes[w]);l.length===0&&(l=this._outputs);let{usedNodes:u,missingInputs:c,dynamicNode:p,syncInputs:m}=R0(t,l,this.weightMap,this._initNodes),f=[...i,...this.graph.weights,...this._initNodes||[]].map(w=>({node:w,contexts:e.currentContext})),h=Object.assign({},this.weightMap);Object.keys(t).forEach(w=>{let[C,I]=Rr(w),$=[];$[I]=t[w],h[C]=$});let d={},g=this.getFrozenTensorIds(h),y={};for(;f.length>0;){let w=this.processStack(i,f,e,h,y,g,a,d,u);await Promise.all(w)}p==null&&!n&&console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");let b=l.filter(w=>!_0(w)&&!Ue(w.name,h,e)).map(w=>w.name);if(b.length>0){let w="";throw p!=null&&(w=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${m}]`),new Error(`Cannot compute the outputs [${b}] from the provided inputs [${s}]. Consider providing the following inputs: [${c}]. ${w}`)}return h}processStack(t,e,o,n,s,i,a,l,u){let c=[];for(;e.length>0;){let p=e.pop();o.currentContext=p.contexts;let m="";if(p.node.op==="Enter"&&v("isConstant",p.node,n,o)&&([m]=Fo(p.node.name,o)),n[p.node.name]==null){let f=F0(p.node,n,o,this._resourceManager);m||([m]=Fo(p.node.name,o));let h=o.currentContext;x.isPromise(f)?c.push(f.then(d=>(n[m]=d,o.currentContext=h,this.checkTensorForDisposal(m,p.node,n,o,i,a,l),this.processChildNodes(p.node,e,o,n,s,u),d))):(n[m]=f,this.checkTensorForDisposal(m,p.node,n,o,i,a,l),this.processChildNodes(p.node,e,o,n,s,u))}else this.processChildNodes(p.node,e,o,n,s,u)}return c}processChildNodes(t,e,o,n,s,i){t.children.forEach(a=>{let[l]=Fo(a.name,o);s[l]||!i.has(a.name)||(a.op==="Merge"?a.inputNames.some(u=>!!Ue(u,n,o))&&(s[l]=!0,e.push({contexts:o.currentContext,node:a})):a.inputNames.every(u=>!!Ue(u,n,o))&&(s[l]=!0,e.push({contexts:o.currentContext,node:a})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(e=>e.dispose()))}checkInputShapeAndType(t){Object.keys(t).forEach(e=>{let o=t[e],[n]=Rr(e),s=this.graph.nodes[n];if(s.attrParams.shape&&s.attrParams.shape.value){let i=s.attrParams.shape.value,a=i.length===o.shape.length&&o.shape.every((l,u)=>i[u]===-1||i[u]===l);x.assert(a,()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${i}], but was [${o.shape}]`)}s.attrParams.dtype&&s.attrParams.dtype.value&&x.assert(o.dtype===s.attrParams.dtype.value,()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${o.dtype}`)})}mapInputs(t){let e={};for(let o in t)if(this._signature!=null&&this._signature.inputs!=null&&this._signature.inputs[o]!=null){let n=this._signature.inputs[o];e[n.name]=t[o]}else e[o]=t[o];return e}checkInputs(t){let e=Object.keys(t).filter(o=>{let[n]=Rr(o);return this.graph.nodes[n]==null});if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map(e=>this._signature!=null&&this._signature.outputs!=null&&this._signature.outputs[e]!=null?this._signature.outputs[e].name:e,{})}checkOutputs(t){t.forEach(e=>{let[o]=Rr(e);if(!this.graph.nodes[o])throw new Error(`The output '${e}' is not found in the graph`)})}};var ux=class{constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(let t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(let t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}};var LU="?tfjs-format=file",PU="model.json",cx=class{constructor(t,e={},o=Wo){this.modelUrl=t,this.loadOptions=e,this.version="n/a",this.io=o,e==null&&(this.loadOptions={}),this.resourceManager=new ux}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){let t=this.modelUrl;if(t.load!=null)this.handler=t;else if(this.loadOptions.requestInit!=null)this.handler=this.io.browserHTTPRequest(t,this.loadOptions);else{let e=this.io.getLoadHandlers(t,this.loadOptions);if(e.length===0)e.push(this.io.browserHTTPRequest(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}load(){if(this.findIOHandler(),this.handler.load==null)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");let t=this.handler.load();return x.isPromise(t)?t.then(e=>this.loadSync(e)):this.loadSync(t)}loadSync(t){this.artifacts=t;let e=this.artifacts.modelTopology,o=this.artifacts.signature;if(this.artifacts.userDefinedMetadata!=null){let s=this.artifacts.userDefinedMetadata;s.signature!=null&&(o=s.signature),s.structuredOutputKeys!=null&&(this.structuredOutputKeys=s.structuredOutputKeys)}this.signature=o,this.version=`${e.versions.producer}.${e.versions.minConsumer}`;let n=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new Gl(Mf.Instance.transformGraph(e,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(n),this.executor.resourceManager=this.resourceManager,t.modelInitializer!=null&&t.modelInitializer.node!=null){let s=Mf.Instance.transformGraph(t.modelInitializer);this.initializer=new Gl(s),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(t,e){if(typeof t=="string"){let o=this.io.getSaveHandlers(t);if(o.length===0)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(o.length>1)throw new Error(`Found more than one (${o.length}) save handlers for URL '${t}'`);t=o[0]}if(t.save==null)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(this.artifacts)}predict(t,e){let o=this.execute(t,this.outputNodes);if(this.structuredOutputKeys){let n=o instanceof Dt?[o]:o,s={};return n.forEach((i,a)=>s[this.structuredOutputKeys[a]]=i),s}return o}normalizeInputs(t){if(!(t instanceof Dt)&&!Array.isArray(t))return t;if(t=Array.isArray(t)?t:[t],t.length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`);return this.inputNodes.reduce((e,o,n)=>(e[o]=t[n],e),{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}execute(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);let o=this.executor.execute(t,e);return o.length>1?o:o[0]}async executeAsync(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);let o=await this.executor.executeAsync(t,e);return o.length>1?o:o[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce((e,o)=>(e[o]=[t[o]],e),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}};async function O0(r,t={},e=Wo){if(r==null)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");t==null&&(t={}),t.fromTFHub&&typeof r=="string"&&(r=zU(r));let o=new cx(r,t,e);return await o.load(),o}function zU(r){return r.endsWith("/")||(r=r+"/"),`${r}${PU}${LU}`}var iE=Wp(cm());var oE=Wp(cm());function Z1(r,t){return J1(r,t)}function J1(r,t,e=new Map,o=new Set){if(r==null)return null;if(typeof Blob=="function"&&r instanceof Blob)return r.slice();if(o.has(r))throw new Error("Circular references are not supported.");if(e.has(r))return e.get(r);let n=t(r);if(n.recurse&&n.value!==null)throw new Error("A deep map function may not return both a value and recurse=true.");if(n.recurse)if(yp(r)){let s=Array.isArray(r)?[]:{};o.add(r);for(let i in r){let a=r[i],l=J1(a,t,e,o);s[i]=l}return o.delete(r),r.__proto__&&(s.__proto__=r.__proto__),s}else throw new Error(`Can't recurse into non-iterable type: ${r}`);else return e.set(r,n.value),n.value}function Q1(r,t=L0){return tE(r,t)}function tE(r,t,e=new Set){let o=r[0];if(e.has(o))throw new Error("Circular references are not supported.");let n=t(r);if(n.recurse&&n.value!==null)throw new Error("A deep zip function may not return both a value and recurse=true.");if(n.recurse)if(yp(o)){let s=Array.isArray(o)?[]:{};e.add(o);for(let i in o){let a=r.map(u=>u[i]),l=tE(a,t,e);s[i]=l}return e.delete(o),s}else throw new Error(`Can't recurse into non-iterable type: ${o}`);else return n.value}function L0(r){return r===null?null:yp(r[0])?{value:null,recurse:!0}:{value:r,recurse:!1}}function yp(r){let t=!1;if(M().get("IS_BROWSER"))t=r instanceof TextDecoder;else{let{StringDecoder:e}=Y1();t=r instanceof e}return r!=null&&!ArrayBuffer.isView(r)&&(Array.isArray(r)||typeof r=="object"&&!(r instanceof Dt)&&!(r instanceof Promise)&&!t)}function eE(r){return r==null||BU(r)||Array.isArray(r)||typeof r=="object"&&r instanceof Dt||x.isTypedArray(r)}function BU(r){return r===null||typeof r!="object"&&typeof r!="function"}function rE(r){return Z1(r,VU)}function VU(r){return r instanceof Dt?{value:r.clone(),recurse:!1}:yp(r)?{value:null,recurse:!0}:{value:r,recurse:!1}}var bp=class{constructor(t){if(this.capacity=t,this.begin=0,this.end=0,t==null)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}wrap(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity}get(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]}set(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e}length(){let t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t}isFull(){return this.length()===this.capacity}isEmpty(){return this.length()===0}push(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1)}pushAll(t){for(let e of t)this.push(e)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);let t=this.get(this.end);return this.set(this.end,void 0),t}unshift(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");let t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t}shuffleExcise(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");let e=this.wrap(this.begin+t),o=this.get(e);return this.set(e,this.pop()),o}};var Wl=class extends bp{constructor(){super(Wl.INITIAL_CAPACITY)}isFull(){return!1}push(t){super.isFull()&&this.expand(),super.push(t)}unshift(t){super.isFull()&&this.expand(),super.unshift(t)}expand(){let t=this.capacity*2,e=new Array(t),o=this.length();for(let n=0;n<o;n++)e[n]=this.get(this.wrap(this.begin+n));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=o}};Wl.INITIAL_CAPACITY=32;function nE(r){return new P0(r)}function X0(r){return new z0(r)}function sE(r,t){return new mx(r,t)}var rr=class{async toArray(){let t=[],e=await this.next();for(;!e.done;)t.push(e.value),e=await this.next();return t}async toArrayForTest(){let t=this.prefetch(100),e=[],o=await t.next();for(;!o.done;)e.push(o.value),o=await t.next();return e}async resolveFully(){let t=await this.next();for(;!t.done;)t=await this.next()}async resolveWhile(t){let e=await this.next(),o=t(e.value);for(;!e.done&&o;)e=await this.next(),o=t(e.value)}handleErrors(t){return new H0(this,t)}filter(t){return new W0(this,t)}map(t){return new U0(this,t)}mapAsync(t){return new px(this,t)}serialMapAsync(t){return new px(this,t).serial()}flatmap(t){return new q0(this,t)}async forEachAsync(t){return this.map(t).resolveFully()}async serialForEach(t){return this.serialMapAsync(t).resolveWhile(e=>e===!0)}rowMajorBatch(t,e=!0){return new G0(this,t,e)}columnMajorBatch(t,e=!0,o=L0){return this.rowMajorBatch(t,e).map(s=>Q1(s,o))}concatenate(t,e){return new mx(nE([this,t]),e)}take(t){return t<0||t==null?this:new V0(this,t)}skip(t){return t<0||t==null?this:new B0(this,t)}prefetch(t){return new fx(this,t)}shuffle(t,e){return new j0(this,t,e)}serial(){return new M0(this)}},P0=class extends rr{constructor(t){super(),this.items=t,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};let t=this.items[this.trav];return this.trav++,{value:rE(t),done:!1}}},z0=class extends rr{constructor(t){super(),this.nextFn=t}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(t){throw t.message=`Error thrown while iterating through a dataset: ${t.message}`,t}}},M0=class extends rr{constructor(t){super(),this.upstream=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}},B0=class extends rr{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){let t=await this.upstream.next();if(t.done)return t;yt(t.value)}return this.upstream.next()}},V0=class extends rr{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}},G0=class extends rr{constructor(t,e,o=!0){super(),this.upstream=t,this.batchSize=e,this.enableSmallLastBatch=o,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){let t=[];for(;t.length<this.batchSize;){let e=await this.upstream.next();if(e.done)return this.enableSmallLastBatch&&t.length>0?{value:t,done:!1}:{value:null,done:!0};t.push(e.value)}return{value:t,done:!1}}},W0=class extends rr{constructor(t,e){super(),this.upstream=t,this.predicate=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){let t=await this.upstream.next();if(t.done||this.predicate(t.value))return t;yt(t.value)}}},U0=class extends rr{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> Map`}async next(){let t=await this.upstream.next();if(t.done)return{value:null,done:!0};let e=yo.getTensorsInContainer(t.value),o=this.transform(t.value),n=yo.getTensorsInContainer(o);for(let s of e)yo.isTensorInList(s,n)||s.dispose();return{value:o,done:!1}}},H0=class extends rr{constructor(t,e){super(),this.upstream=t,this.handler=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(t){if(!this.handler(t))return{value:null,done:!0}}}},px=class extends rr{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){let t=await this.upstream.next();if(t.done)return{value:null,done:!0};let e=yo.getTensorsInContainer(t.value),o=await this.transform(t.value),n=yo.getTensorsInContainer(o);for(let s of e)yo.isTensorInList(s,n)||s.dispose();return{value:o,done:!1}}},Vf=class extends rr{constructor(){super(),this.outputQueue=new Wl,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.outputQueue.length()===0;)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}},q0=class extends Vf{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){let t=await this.upstream.next();if(t.done)return!1;let e=yo.getTensorsInContainer(t.value),o=this.transform(t.value),n=yo.getTensorsInContainer(o);this.outputQueue.pushAll(o);for(let s of e)yo.isTensorInList(s,n)||s.dispose();return!0}},mx=class extends rr{constructor(t,e){super(),this.baseErrorHandler=e,this.lastRead=null,this.iterator=null,this.moreIterators=t}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(t){if(await t,this.iterator==null){let o=await this.moreIterators.next();if(o.done)return{value:null,done:!0};this.iterator=o.value,this.baseErrorHandler!=null&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}let e=await this.iterator.next();return e.done?(this.iterator=null,this.readFromChain(t)):e}},K0;(function(r){r[r.FAIL=0]="FAIL",r[r.SHORTEST=1]="SHORTEST",r[r.LONGEST=2]="LONGEST"})(K0||(K0={}));var fx=class extends rr{constructor(t,e){super(),this.upstream=t,this.bufferSize=e,this.buffer=new bp(e)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){let t=this.upstream.next();this.buffer.push(t)}}next(){return this.refill(),this.buffer.shift()}},j0=class extends fx{constructor(t,e,o){super(t,e),this.upstream=t,this.windowSize=e,this.upstreamExhausted=!1,this.random=oE.alea(o||x.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(t){return Math.floor(this.random()*t)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){let t=this.chooseIndex(),e=await this.buffer.shuffleExcise(t);if(e.done)this.upstreamExhausted=!0;else return this.refill(),e}return{value:null,done:!0}}};var Ul=class{constructor(){this.size=null}batch(t,e=!0){let o=this;x.assert(t>0,()=>`batchSize needs to be positive, but it is
      ${t}`);let n;return this.size===1/0||this.size==null?n=this.size:e?n=Math.ceil(this.size/t):n=Math.floor(this.size/t),tn(async()=>(await o.iterator()).columnMajorBatch(t,e,WU),n)}concatenate(t){let e=this,o;return this.size===1/0||t.size===1/0?o=1/0:this.size!=null&&t.size!=null?o=this.size+t.size:o=null,tn(async()=>(await e.iterator()).concatenate(await t.iterator()),o)}filter(t){let e=this,o;return this.size===1/0?o=1/0:o=null,tn(async()=>(await e.iterator()).filter(n=>z(()=>t(n))),o)}async forEachAsync(t){return(await this.iterator()).forEachAsync(t)}map(t){let e=this;return tn(async()=>(await e.iterator()).map(o=>z(()=>t(o))),this.size)}mapAsync(t){let e=this;return tn(async()=>(await e.iterator()).mapAsync(t),this.size)}prefetch(t){if(t==null)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");let e=this;return tn(async()=>(await e.iterator()).prefetch(t),this.size)}repeat(t){let e=this,o;return this.size!=null&&t>0?o=this.size*t:t===0?o=0:this.size!=null&&(t===void 0||t<0)?o=1/0:o=null,tn(async()=>{let n=X0(async()=>({value:await e.iterator(),done:!1}));return sE(n.take(t))},o)}skip(t){let e=this,o;return this.size!=null&&t>=0&&this.size>=t?o=this.size-t:this.size!=null&&(this.size<t||t===void 0||t<0)?o=0:o=null,tn(async()=>(await e.iterator()).skip(t),o)}shuffle(t,e,o=!0){if(t==null||t<0)throw this.size==null?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);let n=this,s=iE.alea(e||x.now().toString());return tn(async()=>{let i=s.int32();return o&&(i+=s.int32()),(await n.iterator()).shuffle(t,i.toString())},this.size)}take(t){let e=this,o;return this.size!=null&&this.size>t?o=t:this.size!=null&&this.size<=t?o=this.size:o=null,tn(async()=>(await e.iterator()).take(t),o)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}};Ul.MAX_BUFFER_SIZE=1e4;function tn(r,t=null){return new class extends Ul{constructor(){super(...arguments),this.size=t}async iterator(){return r()}}}function WU(r){if(r===null)return null;let t=r[0];return eE(t)?{value:UU(r),recurse:!1}:{value:null,recurse:!0}}function UU(r){if(r.length===0)throw new Error("Can't make a batch of zero elements.");return r[0]instanceof Dt?De(r):Ze(r)}var P8t=Symbol("out"),z8t=Symbol("field"),M8t=Symbol("quote"),B8t=Symbol("quoteafterquote"),V8t=Symbol("quoteinquote");function Y(r,t){Array.isArray(r)||(r=[r]),r.forEach(e=>{e!=null&&x.assert(e.dtype!=="complex64",()=>`${t} does not support complex64 tensors in the CPU backend.`)})}var t4=ur.whereImpl,Oa=class extends Pn{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new qa(this,dn())}nextDataId(){return Oa.nextDataId++}write(t,e,o){this.firstUse&&(this.firstUse=!1,M().get("IS_NODE")&&T.warn(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));let n={id:this.nextDataId()};return this.data.set(n,{values:t,dtype:o,refCount:1}),n}makeTensorInfo(t,e,o){let n;if(e==="string"&&o!=null&&o.length>0&&x.isString(o[0])){let s=o.map(i=>x.encodeString(i));n=this.write(s,t,e)}else n=this.write(o,t,e);return{dataId:n,shape:t,dtype:e}}refCount(t){return this.data.has(t)?this.data.get(t).refCount:0}incRef(t){let e=this.data.get(t);e.refCount++}decRef(t){if(this.data.has(t)){let e=this.data.get(t);e.refCount--}}move(t,e,o,n,s){this.data.set(t,{values:e,dtype:n,refCount:s})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){let{dtype:e,complexTensorInfos:o}=this.data.get(t);if(e==="complex64"){let n=this.readSync(o.real.dataId),s=this.readSync(o.imag.dataId);return T.mergeRealAndImagArrays(n,s)}return this.data.get(t).values}bufferSync(t){let e=this.readSync(t.dataId);if(t.dtype==="string")try{let o=e.map(n=>x.decodeString(n));return pt(t.shape,t.dtype,o)}catch(o){throw new Error("Failed to decode encoded string bytes into utf-8")}return pt(t.shape,t.dtype,e)}makeOutput(t,e,o){return dn().makeTensorFromTensorInfo(this.makeTensorInfo(e,o,t),this)}disposeData(t,e=!1){if(this.data.has(t)){if(this.data.get(t).refCount--,!e&&this.data.get(t).refCount>0)return!1;let{complexTensorInfos:o}=this.data.get(t);o!=null&&(this.disposeData(o.real.dataId,!0),this.disposeData(o.imag.dataId,!0)),this.data.delete(t)}return!0}disposeIntermediateTensorInfo(t){this.disposeData(t.dataId)}async time(t){let e=x.now();return t(),{kernelMs:x.now()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(t){Y([t],"where");let e=this.readSync(t.dataId);return t4(t.shape,e)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}};Oa.nextDataId=0;var Ax={};qt(Ax,{addImpl:()=>Z0,bincountImpl:()=>vp,bincountReduceImpl:()=>hx,ceilImpl:()=>J0,concatImpl:()=>dx,equalImpl:()=>Q0,expImpl:()=>eC,expm1Impl:()=>oC,floorImpl:()=>nC,gatherNdImpl:()=>gx,gatherV2Impl:()=>xx,greaterEqualImpl:()=>iC,greaterImpl:()=>sC,lessEqualImpl:()=>lC,lessImpl:()=>aC,linSpaceImpl:()=>yx,logImpl:()=>uC,maxImpl:()=>bx,maximumImpl:()=>cC,minimumImpl:()=>pC,multiplyImpl:()=>Gf,negImpl:()=>mC,notEqualImpl:()=>fC,prodImpl:()=>hC,rangeImpl:()=>wx,rsqrtImpl:()=>dC,scatterImpl:()=>Xs,sigmoidImpl:()=>DE,simpleAbsImpl:()=>Y0,sliceImpl:()=>xC,sparseFillEmptyRowsImpl:()=>Cx,sparseReshapeImpl:()=>vx,sparseSegmentReductionImpl:()=>Sp,sqrtImpl:()=>_E,squaredDifferenceImpl:()=>yC,stridedSliceImpl:()=>Nx,stringNGramsImpl:()=>Sx,stringSplitImpl:()=>Ix,stringToHashBucketFastImpl:()=>Tx,subImpl:()=>wC,tileImpl:()=>kx,topKImpl:()=>Ex,transposeImpl:()=>Np,uniqueImpl:()=>$x});function Y0(r){let t=new Float32Array(r.length);for(let e=0;e<r.length;++e)t[e]=Math.abs(r[e]);return t}var e4=r=>{let{x:t}=r.inputs,e=r.backend;Y(t,"abs");let o=new Float32Array(x.sizeFromShape(t.shape)),n=e.data.get(t.dataId).values;return o=Y0(n),e.makeOutput(o,t.shape,t.dtype)},aE={kernelName:si,backendName:"cpu",kernelFunc:e4};function zt(r){return(t,e,o,n,s)=>{let i=T.assertAndGetBroadcastShape(t,e),a=i.length,l=x.computeStrides(i),u=x.sizeFromShape(i),c=x.getTypedArrayFromDType(s,u),p=t.length,m=e.length,f=x.computeStrides(t),h=x.computeStrides(e),d=T.getBroadcastDims(t,i),g=T.getBroadcastDims(e,i);if(d.length+g.length===0)for(let y=0;y<c.length;++y)c[y]=r(o[y%o.length],n[y%n.length]);else for(let y=0;y<c.length;++y){let b=x.indexToLoc(y,a,l),w=b.slice(-p);d.forEach(A=>w[A]=0);let C=x.locToIndex(w,p,f),I=b.slice(-m);g.forEach(A=>I[A]=0);let $=x.locToIndex(I,m,h);c[y]=r(o[C],n[$])}return[c,i]}}function He(r){let{inputs:t,backend:e}=r,{real:o,imag:n}=t,s=e.data.get(o.dataId).values,i=e.data.get(n.dataId).values,a=e.makeTensorInfo(o.shape,"complex64"),l=e.data.get(a.dataId);return l.complexTensorInfos={real:e.makeTensorInfo(o.shape,"float32",s),imag:e.makeTensorInfo(n.shape,"float32",i)},a}var lE={kernelName:xu,backendName:"cpu",kernelFunc:He};function wp(r,t,e="float32"){if(e==="complex64"){let n=wp(r,t,"float32"),s=wp(r,t,"float32");return He({inputs:{real:n,imag:s},backend:r})}let o=x.makeZerosTypedArray(x.sizeFromShape(t),e);return r.makeTensorInfo(t,e,o)}function pr(r){let{inputs:t,backend:e}=r,{x:o}=t;return e.incRef(o.dataId),{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}var uE={kernelName:an,backendName:"cpu",kernelFunc:pr};function Ro(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.data.get(o.dataId).complexTensorInfos.real,s=e.data.get(n.dataId).values;return e.makeTensorInfo(n.shape,n.dtype,s)}var cE={kernelName:qu,backendName:"cpu",kernelFunc:Ro};function _o(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return pr({inputs:{x:n},backend:e});let i=wp(e,n.shape,n.dtype),a=_o({inputs:{x:n},backend:e,attrs:{dtype:"float32"}}),l=He({inputs:{real:a,imag:i},backend:e});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}if(n.dtype==="complex64"){let i=Ro({inputs:{input:n},backend:e}),a=_o({inputs:{x:i},backend:e,attrs:{dtype:s}});return e.disposeIntermediateTensorInfo(i),a}if(!x.hasEncodingLoss(n.dtype,s)){let i=pr({inputs:{x:n},backend:e});return{dataId:i.dataId,shape:i.shape,dtype:s}}if(s==="int32"){let i=e.data.get(n.dataId).values,a=Int32Array.from(i);return e.makeTensorInfo(n.shape,"int32",a)}if(s==="bool"){let i=e.data.get(n.dataId).values,a=x.toTypedArray([0],n.dtype),[l,u]=zt((c,p)=>c!==p?1:0)(n.shape,[],i,a,"bool");return e.makeTensorInfo(u,"bool",l)}throw new Error(`Error in Cast: failed to cast ${n.dtype} to ${s}`)}var pE={kernelName:sn,backendName:"cpu",kernelFunc:_o};function Vt(r,t,e,o){return e==null?({inputs:n,backend:s})=>{let{a:i,b:a}=n,l=s;Y([i,a],r);let u=l.data.get(i.dataId).values,c=l.data.get(a.dataId).values,p=i.dtype==="string"?T.fromUint8ToStringArray(u):u,m=i.dtype==="string"?T.fromUint8ToStringArray(c):c,f=o||i.dtype,[h,d]=t(i.shape,a.shape,p,m,f);return l.makeTensorInfo(d,f,h)}:({inputs:n,backend:s})=>{let{a:i,b:a}=n,l=s;if(i.dtype==="complex64"||a.dtype==="complex64"){let u=_o({inputs:{x:i},backend:l,attrs:{dtype:"complex64"}}),c=l.data.get(u.dataId),p=c.complexTensorInfos.real,m=c.complexTensorInfos.imag,f=l.data.get(p.dataId).values,h=l.data.get(m.dataId).values,d=_o({inputs:{x:a},backend:l,attrs:{dtype:"complex64"}}),g=l.data.get(d.dataId),y=g.complexTensorInfos.real,b=g.complexTensorInfos.imag,w=l.data.get(y.dataId).values,C=l.data.get(b.dataId).values,[I,$,A]=e(i.shape,a.shape,f,h,w,C),_=l.makeTensorInfo(A,"float32",I),O=l.makeTensorInfo(A,"float32",$),P=He({inputs:{real:_,imag:O},backend:l});return l.disposeIntermediateTensorInfo(u),l.disposeIntermediateTensorInfo(d),l.disposeIntermediateTensorInfo(_),l.disposeIntermediateTensorInfo(O),P}else{let u=l.data.get(i.dataId).values,c=l.data.get(a.dataId).values,p=o||i.dtype,[m,f]=t(i.shape,a.shape,u,c,p);return l.makeTensorInfo(f,p,m)}}}function Cp(r){return(t,e,o,n,s,i)=>{let a=T.assertAndGetBroadcastShape(t,e),l=x.sizeFromShape(a),u=a.length,c=x.computeStrides(a),p=x.getTypedArrayFromDType("float32",l),m=x.getTypedArrayFromDType("float32",l),f=T.getBroadcastDims(t,a),h=T.getBroadcastDims(e,a),d=T.mergeRealAndImagArrays(o,n),g=T.mergeRealAndImagArrays(s,i),y=t.length,b=x.computeStrides(t),w=e.length,C=x.computeStrides(e);if(f.length+h.length===0)for(let I=0;I<p.length;I++){let $=I%d.length,A=I%g.length,_=r(d[$*2],d[$*2+1],g[A*2],g[A*2+1]);p[I]=_.real,m[I]=_.imag}else for(let I=0;I<p.length;I++){let $=x.indexToLoc(I,u,c),A=$.slice(-y);f.forEach(V=>A[V]=0);let _=x.locToIndex(A,y,b),O=$.slice(-w);h.forEach(V=>O[V]=0);let P=x.locToIndex(O,w,C),B=r(d[_*2],d[_*2+1],g[P*2],g[P*2+1]);p[I]=B.real,m[I]=B.imag}return[p,m,a]}}var Z0=zt((r,t)=>r+t),r4=Cp((r,t,e,o)=>({real:r+e,imag:t+o})),Dn=Vt(Bo,Z0,r4),mE={kernelName:Bo,backendName:"cpu",kernelFunc:Dn};function vp(r,t,e,o,n){let s=x.sizeFromShape(o),i=x.makeZerosTypedArray(n,e);for(let a=0;a<r.length;a++){let l=r[a];if(l<0)throw new Error("Input x must be non-negative!");l>=n||(s>0?i[l]+=t[a]:i[l]+=1)}return i}function hx(r,t,e,o=!1){let n=r.shape[0],s=r.shape[1],i=pt([n,e],t.dtype);for(let a=0;a<n;a++)for(let l=0;l<s;l++){let u=r.get(a,l);if(u<0)throw new Error("Input x must be non-negative!");u>=e||(o?i.set(1,a,u):t.size>0?i.set(i.get(a,u)+t.get(a,l),a,u):i.set(i.get(a,u)+1,a,u))}return i}function _r(r){return(t,e,o)=>{let n=x.getTypedArrayFromDType(e,t.length);for(let s=0;s<t.length;++s)n[s]=r(t[s],o);return n}}function bt(r,t,e){return({inputs:o,attrs:n,backend:s})=>{let{x:i}=o;if(Y(i,r),i.dtype==="string"||e==="string")throw new Error("unaryKernelFunc does not support string input/output");let a=s,l=a.data.get(i.dataId).values,u=x.sizeFromShape(i.shape),c=e||i.dtype,p=x.getArrayFromDType(c,u);for(let m=0;m<u;++m)p[m]=t(l[m],n);return a.makeTensorInfo(i.shape,c,p)}}function Oo(r,t,e){return({inputs:o,attrs:n,backend:s})=>{let{x:i}=o;if(Y(i,r),i.dtype==="string"||e==="string")throw new Error("unaryKernelFunc does not support string input/output");let a=s,l=a.data.get(i.dataId).values,u=e||i.dtype,c=t(l,u,n);return a.makeTensorInfo(i.shape,u,c)}}var J0=_r(r=>Math.ceil(r)),o4=Oo(Kn,J0),fE={kernelName:Kn,backendName:"cpu",kernelFunc:o4};function dx(r,t,e,o){let n=x.getArrayFromDType(e,x.sizeFromShape(t));if(o&&e!=="string"){let s=0;r.forEach(i=>{let a=x.sizeFromShape(i.shape);n.set(i.vals,s),s+=a})}else{let s=0;r.forEach(i=>{let a=e==="string"?T.fromUint8ToStringArray(i.vals):i.vals,l=0;for(let u=0;u<i.shape[0];++u){let c=u*t[1]+s;for(let p=0;p<i.shape[1];++p)n[c+p]=a[l++]}s+=i.shape[1]})}return n}var Q0=zt((r,t)=>r===t?1:0),tC=Vt(Ya,Q0,null,"bool"),hE={kernelName:Ya,backendName:"cpu",kernelFunc:tC};var eC=_r(r=>Math.exp(r)),rC=Oo(ts,eC,"float32"),dE={kernelName:ts,backendName:"cpu",kernelFunc:rC};var oC=_r(r=>Math.expm1(r)),n4=Oo(es,oC),gE={kernelName:es,backendName:"cpu",kernelFunc:n4};var nC=_r(r=>Math.floor(r)),s4=Oo(rs,nC),xE={kernelName:rs,backendName:"cpu",kernelFunc:s4};function gx(r,t,e,o,n,s,i,a,l){let u=pt([o,s],e);for(let c=0;c<o;c++){let p=[],m=0;for(let f=0;f<n;f++){let h=r[c*n+f];m+=h*i[f],p.push(h)}if(m<0||m>=l/s)throw new Error(`Invalid indices: ${p} does not index into ${a}`);for(let f=0;f<s;f++)u.values[c*s+f]=t.get(...t.indexToLoc(m*s+f))}return u}function xx(r,t,e){let o=pt(e,r.dtype);for(let n=0;n<o.size;++n){let i=o.indexToLoc(n).slice(),a=i[0],l=i[2],u=t.locToIndex([a,l]);i[2]=t.values[u];let c=r.locToIndex(i);0<=c&&c<r.values.length&&(o.values[n]=r.values[c])}return o}var sC=zt((r,t)=>r>t?1:0),i4=Vt(Za,sC,null,"bool"),yE={kernelName:Za,backendName:"cpu",kernelFunc:i4};var iC=zt((r,t)=>r>=t?1:0),a4=Vt(ns,iC,null,"bool"),bE={kernelName:ns,backendName:"cpu",kernelFunc:a4};var aC=zt((r,t)=>r<t?1:0),l4=Vt(Ja,aC,null,"bool"),wE={kernelName:Ja,backendName:"cpu",kernelFunc:l4};var lC=zt((r,t)=>r<=t?1:0),u4=Vt(Qa,lC,null,"bool"),CE={kernelName:Qa,backendName:"cpu",kernelFunc:u4};function yx(r,t,e){let o=(t-r)/(e-1),n=x.makeZerosTypedArray(e,"float32");n[0]=r;for(let s=1;s<n.length;s++)n[s]=n[s-1]+o;return n}var uC=_r(r=>Math.log(r)),c4=Oo(ls,uC),vE={kernelName:ls,backendName:"cpu",kernelFunc:c4};function bx(r,t,e,o){let n=x.getTypedArrayFromDType(o,x.sizeFromShape(e));for(let s=0;s<n.length;++s){let i=s*t,a=r[i];for(let l=0;l<t;++l){let u=r[i+l];(Number.isNaN(u)||u>a)&&(a=u)}n[s]=a}return n}var cC=zt((r,t)=>Math.max(r,t)),p4=Vt(cs,cC),NE={kernelName:cs,backendName:"cpu",kernelFunc:p4};var pC=zt((r,t)=>Math.min(r,t)),m4=Vt(ps,pC),SE={kernelName:ps,backendName:"cpu",kernelFunc:m4};var Gf=zt((r,t)=>r*t),f4=Cp((r,t,e,o)=>({real:r*e-t*o,imag:r*o+t*e})),Hl=Vt(fs,Gf,f4),IE={kernelName:fs,backendName:"cpu",kernelFunc:Hl};function mC(r,t,e){let o=x.createScalarValue(-1,e);return Gf([],t,o,r,e)}function h4(r){let{inputs:t,backend:e}=r,{x:o}=t;Y(o,"neg");let n=e.data.get(o.dataId).values,[s,i]=mC(n,o.shape,o.dtype);return e.makeTensorInfo(i,o.dtype,s)}var TE={kernelName:Fi,backendName:"cpu",kernelFunc:h4};var fC=zt((r,t)=>r!==t?1:0),d4=Vt(ol,fC,null,"bool"),kE={kernelName:ol,backendName:"cpu",kernelFunc:d4};function Np(r,t,e,o,n){let s=t.length,i=x.sizeFromShape(t),a=x.computeStrides(t),l=x.computeStrides(n),u=x.getTypedArrayFromDType(e,x.sizeFromShape(n));for(let c=0;c<i;++c){let p=x.indexToLoc(c,s,a),m=new Array(p.length);for(let h=0;h<m.length;h++)m[h]=p[o[h]];let f=x.locToIndex(m,s,l);u[f]=r[c]}return u}function ge(r){let{inputs:t,attrs:e,backend:o}=r,{x:n}=t,{perm:s}=e;Y(n,"transpose");let i=n.shape.length,a=new Array(i);for(let p=0;p<a.length;p++)a[p]=n.shape[s[p]];let l=o.data.get(n.dataId).values,u=Np(l,n.shape,n.dtype,s,a);return{dataId:o.write(u,a,n.dtype),shape:a,dtype:n.dtype}}var EE={kernelName:un,backendName:"cpu",kernelFunc:ge};function hC(r,t,e,o){let[n,s]=T.computeOutAndReduceShapes(r,o),i=Re(t,"int32"),a=x.makeZerosTypedArray(x.sizeFromShape(n),i),l=x.sizeFromShape(s);for(let u=0;u<a.length;++u){let c=u*l,p=1;for(let m=0;m<l;++m)p*=e[c+m];a[u]=p}return{outVals:a,outShape:n,outDtype:i}}function g4(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;Y(n,"prod");let a=n.shape.length,l=x.parseAxisParam(s,n.shape),u=T.getAxesPermutation(l,a),c=l,p=n,m=[];u!=null&&(p=ge({inputs:{x:n},backend:e,attrs:{perm:u}}),m.push(p),c=T.getInnerMostAxes(c.length,a));let f=e.data.get(p.dataId).values,{outVals:h,outShape:d,outDtype:g}=hC(p.shape,p.dtype,f,c),y=d;return i&&(y=T.expandShapeToKeepDim(d,l)),m.forEach(b=>e.disposeIntermediateTensorInfo(b)),e.makeTensorInfo(y,g,h)}var $E={kernelName:zi,backendName:"cpu",kernelFunc:g4};function wx(r,t,e,o){let n=r===t,s=r<t&&e<0,i=t<r&&e>1;if(n||s||i)return x.makeZerosTypedArray(0,o);let a=Math.abs(Math.ceil((t-r)/e)),l=x.makeZerosTypedArray(a,o);t<r&&e===1&&(e=-1),l[0]=r;for(let u=1;u<l.length;u++)l[u]=l[u-1]+e;return l}var dC=_r(r=>1/Math.sqrt(r)),x4=Oo(bs,dC),AE={kernelName:bs,backendName:"cpu",kernelFunc:x4};function Xs(r,t,e,o,n,s,i,a,l,u){let c=[o/n,n],p=r.values,m=t.values;if(o===0)return pt(e,t.dtype);let f=pt(c,t.dtype);typeof l=="string"||typeof l=="number"?f.values.fill(l):typeof l=="boolean"&&f.values.fill(+l);for(let h=0;h<s;h++){let d=[],g=0;for(let y=0;y<i;y++){let b=p[h*i+y];d.push(b),g+=b*a[y]}if(g<0||g>=o/n)throw new Error(`Invalid indices: ${d} does not index into ${e}`);for(let y=0;y<n;y++)u?f.values[g*n+y]+=m[h*n+y]:f.values[g*n+y]=t.rank===0?m[0]:m[h*n+y]}return f}var DE=_r(r=>1/(1+Math.exp(-r))),gC=bt(Ss,r=>1/(1+Math.exp(-r))),FE={kernelName:Ss,backendName:"cpu",kernelFunc:gC};function xC(r,t,e,o,n){let s=qe.isSliceContinous(o,t,e),i=x.sizeFromShape(e),a=x.computeStrides(o);if(s){let p=qe.computeFlatOffset(t,a);return n==="string"?r.slice(p,p+i):r.subarray(p,p+i)}let l=n==="string"?T.fromUint8ToStringArray(r):r,u=pt(o,n,l),c=pt(e,n);for(let p=0;p<c.size;++p){let m=c.indexToLoc(p),f=m.map((h,d)=>h+t[d]);c.set(u.get(...f),...m)}return n==="string"?T.fromStringArrayToUint8(c.values):c.values}function Lo(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,size:i}=o;Y(n,"slice");let[a,l]=qe.parseSliceParams(n,s,i);qe.assertParamsValid(n,a,l);let u=e.data.get(n.dataId).values,c=xC(u,a,l,n.shape,n.dtype);return e.makeTensorInfo(l,n.dtype,c)}var RE={kernelName:Ui,backendName:"cpu",kernelFunc:Lo};function Cx(r,t,e,o,n,s,i){let a=t[0],l=s[0],u=new Array(l),c=new Array(a),p=t[1];if(l===0){if(a!==0)throw new Error(T.getSparseFillEmptyRowsIndicesDenseShapeMismatch(a));let g=x.getArrayFromDType(e,0),y=x.getArrayFromDType(n,0);return[g,[0,p],y,u,c]}let m=!0,f=0,h=new Array(l).fill(0);for(let g=0;g<a;++g){let y=r[g*p];if(y<0)throw new Error(T.getSparseFillEmptyRowsNegativeIndexErrorMessage(g,y));if(y>=l)throw new Error(T.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(g,y,l));++h[y],m=m&&y>=f,f=y}let d=!0;for(let g=0;g<l;++g){let y=h[g]===0;u[g]=y,d=d&&!y,h[g]=Math.max(h[g],1),g>0&&(h[g]+=h[g-1])}if(d&&m){let g=r,y=o;for(let b=0;b<a;++b)c[b]=b;return[g,[a,p],y,u,c]}else{let g=h[l-1],y=x.getArrayFromDType(e,g*p),b=x.getArrayFromDType(n,g),w=new Array(l).fill(0);for(let C=0;C<a;++C){let I=r[C*p],$=w[I],A=(I===0?0:h[I-1])+$;w[I]++;for(let _=0;_<p;++_)y[A*p+_]=r[C*p+_];b[A]=o[C],c[C]=A}for(let C=0;C<l;++C)if(w[C]===0){let $=C===0?0:h[C-1];y[$*p+0]=C;for(let A=1;A<p;++A)y[$*p+A]=0;b[$]=i}return[y,[g,p],b,u,c]}}function vx(r,t,e,o,n){let s=x.sizeFromShape(o),i=t[0],a=n.length,l=[],u=1,c=-1;for(let g=0;g<a;++g){let y=n[g];if(y===-1){if(c!==-1)throw new Error(T.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,g));c=g,l.push(1)}else{if(y<0)throw new Error(T.getSparseReshapeNegativeOutputDimErrorMessage(g,y));u*=y,l.push(y)}}if(c!==-1){if(u<=0)throw new Error(T.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());let g=Math.trunc(s/u);if(u*g!==s)throw new Error(T.getSparseReshapeInputOutputMultipleErrorMessage(o,l));l[c]=g}if(x.sizeFromShape(l)!==s)throw new Error(T.getSparseReshapeInputOutputMismatchErrorMessage(o,l));let m=o.length,f=[];if(m>0){f[m-1]=1;for(let g=m-2;g>=0;--g)f[g]=f[g+1]*o[g+1]}let h=[];if(a>0){h[a-1]=1;for(let g=a-2;g>=0;--g)h[g]=h[g+1]*l[g+1]}let d=x.getArrayFromDType(e,i*a);for(let g=0;g<i;++g){let y=0;for(let b=0;b<m;++b)y+=r[g*m+b]*f[b];for(let b=0;b<a;++b)d[g*a+b]=Math.trunc(y/h[b]),y%=h[b]}return[d,[i,a],l]}function Sp(r,t,e,o,n,s=!1,i=0){let a=o.length,l=[t[0],r.length/t[0]],u=l[1],p=a>0?n[a-1]+1:0;if(p<0)throw new Error(T.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let m=t.slice();m[0]=p;let f=m.reduce((w,C)=>w*C,1),h=x.getArrayFromDType(e,f);if(a===0)return p>0&&h.fill(i),[h,m];if(p<=0)throw new Error(T.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let d=0,g=1,y=0,b=n[d];for(;;){let w=0;if(g<a){if(w=n[g],b===w){++g;continue}if(b>=w)throw new Error(T.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=p)throw new Error(T.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,p));b>y&&h.fill(i,y*u,b*u);for(let C=d;C<g;++C){let I=o[C];if(I<0||I>=l[0])throw new Error(T.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(C,o[C],l[0]));for(let $=0;$<u;$++)h[b*u+$]+=r[I*u+$]}if(s)for(let C=0;C<u;C++)h[b*u+C]/=g-d;if(d=g,++g,y=b+1,b=w,g>a)break}return y<p&&h.fill(i,y*u,p*u),[h,m]}var _E=_r(r=>Math.sqrt(r)),y4=bt(Ts,r=>Math.sqrt(r)),OE={kernelName:Ts,backendName:"cpu",kernelFunc:y4};var yC=zt((r,t)=>{let e=r-t;return e*e}),b4=Vt(ks,yC),LE={kernelName:ks,backendName:"cpu",kernelFunc:b4};function Nx(r,t,e,o){let n=pt(r,t.dtype);for(let s=0;s<n.size;s++){let i=n.indexToLoc(s),a=new Array(i.length);for(let l=0;l<a.length;l++)a[l]=i[l]*e[l]+o[l];n.set(t.get(...a),...i)}return n}var bC=class{constructor(t,e,o,n,s,i){this.separator=x.encodeString(t),this.nGramWidths=e,this.leftPad=x.encodeString(o),this.rightPad=x.encodeString(n),this.padWidth=s,this.preserveShort=i}getPadWidth(t){return Math.min(this.padWidth<0?t-1:this.padWidth,t-1)}getNumNGrams(t,e){let o=this.getPadWidth(e);return Math.max(0,t+2*o-e+1)}createNGrams(t,e,o,n,s,i){for(let a=0;a<s;++a){let l=this.getPadWidth(i),u=Math.max(0,l-a),c=Math.max(0,l-(s-(a+1))),p=i-(u+c),m=e+(u>0?0:a-l),f=0;f+=u*this.leftPad.length;for(let b=0;b<p;++b)f+=t[m+b].length;f+=c*this.rightPad.length,f+=(u+c+p-1)*this.separator.length,o[n+a]=new Uint8Array(f);let d=o[n+a],g=0,y=b=>b.forEach(w=>d[g++]=w);for(let b=0;b<u;++b)y(this.leftPad),y(this.separator);for(let b=0;b<p-1;++b)y(t[m+b]),y(this.separator);if(p>0){y(t[m+p-1]);for(let b=0;b<c;++b)y(this.separator),y(this.rightPad)}else{for(let b=0;b<c-1;++b)y(this.rightPad),y(this.separator);y(this.rightPad)}}}compute(t,e){let o=t.length,n=e.length;if(n>0){let l=e[0];if(l!==0)throw new Error(`First split value must be 0, got ${l}`);for(let u=1;u<n;++u){let c=e[u]>=l;if(c=c&&e[u]<=o,!c)throw new Error(`Invalid split value ${e[u]}, must be in [${l}, ${o}]`);l=e[u]}if(l!==o)throw new Error(`Last split value must be data size. Expected ${o}, got ${l}`)}let s=n-1,i=x.getArrayFromDType("int32",n);if(o===0||n===0){let l=new Array(o);for(let u=0;u<=s;++u)i[u]=0;return[l,i]}i[0]=0;for(let l=1;l<=s;++l){let u=e[l]-e[l-1],c=0;this.nGramWidths.forEach(p=>{c+=this.getNumNGrams(u,p)}),this.preserveShort&&u>0&&c===0&&(c=1),i[l]=i[l-1]+c}let a=new Array(i[s]);for(let l=0;l<s;++l){let u=e[l],c=i[l];if(this.nGramWidths.forEach(p=>{let m=e[l+1]-e[l],f=this.getNumNGrams(m,p);this.createNGrams(t,u,a,c,f,p),c+=f}),this.preserveShort&&c===i[l]){let p=e[l+1]-e[l];if(p===0)continue;let m=p+2*this.padWidth,f=1;this.createNGrams(t,u,a,c,f,m)}}return[a,i]}};function Sx(r,t,e,o,n,s,i,a){return new bC(e,o,n,s,i,a).compute(r,t)}function w4(r,t,e,o){if(!r.length)return;if(t.length===0){for(let s=0;s<r.length;++s)o.push(r.subarray(s,s+1));return}if(t.length===1){let s=t[0],i=r.indexOf(s);for(;i!==-1;){let a=r.subarray(0,i);(!e||a.length!==0)&&o.push(a),r=r.subarray(i+1),i=r.indexOf(s)}(!e||r.length!==0)&&o.push(r);return}let n=0;for(let s=0;s<r.length+1;s++)if(s===r.length||t.indexOf(r[s])!==-1){let i=r.subarray(n,s);(!e||i.length!==0)&&o.push(i),n=s+1}}function Ix(r,t,e){let o=r.length,n=[],s=0,i=0,a=new Array(o);for(let m=0;m<o;++m){let f=n.length;w4(r[m],t,e,n);let h=n.length-f;a[m]=h,s+=h,i=Math.max(i,h)}let l=x.getArrayFromDType("int32",s*2),u=new Array(s),c=[o,i],p=0;for(let m=0;m<o;++m)for(let f=0;f<a[m];++f)l[p*2]=m,l[p*2+1]=f,u[p]=n[p],++p;return[l,u,c]}function Tx(r,t){let e=x.getArrayFromDType("int32",r.length);for(let o=0;o<r.length;++o)e[o]=x.fingerPrint64(r[o]).modulo(t).getLowBitsUnsigned();return e}var wC=zt((r,t)=>r-t),C4=Cp((r,t,e,o)=>({real:r-e,imag:t-o})),Wf=Vt(Es,wC,C4),PE={kernelName:Es,backendName:"cpu",kernelFunc:Wf};function kx(r,t){let e=new Array(r.rank);for(let n=0;n<e.length;n++)e[n]=r.shape[n]*t[n];let o=pt(e,r.dtype);for(let n=0;n<o.values.length;++n){let s=o.indexToLoc(n),i=new Array(r.rank);for(let l=0;l<i.length;l++)i[l]=s[l]%r.shape[l];let a=r.locToIndex(i);o.values[n]=r.values[a]}return o}var Uf=(r,t)=>{let e=t.value-r.value;return e===0?r.index-t.index:e};function zE(r,t,e=0,o=r.length-1){for(;o>e;){if(o-e>600){let a=o-e+1,l=t-e+1,u=Math.log(a),c=.5*Math.exp(2*u/3),p=.5*Math.sqrt(u*c*(a-c)/a)*Math.sign(l-a/2),m=Math.max(e,Math.floor(t-l*c/a+p)),f=Math.min(o,Math.floor(t+(a-l)*c/a+p));zE(r,t,m,f)}let n=r[t],s=e,i=o;for(x.swap(r,e,t),Uf(r[o],n)>0&&x.swap(r,e,o);s<i;){for(x.swap(r,s,i),s++,i--;Uf(r[s],n)<0;)s=s+1;for(;Uf(r[i],n)>0;)i=i-1}Uf(r[e],n)===0?x.swap(r,e,i):(i=i+1,x.swap(r,i,o)),i<=t&&(e=i+1),t<=i&&(o=i-1)}}function Ex(r,t,e,o,n){let s=t[t.length-1],[i,a]=[r.length/s,s],l=x.getTypedArrayFromDType(e,i*o),u=x.getTypedArrayFromDType("int32",i*o);for(let p=0;p<i;p++){let m=p*a,f=r.subarray(m,m+a),h=new Array(f.length);f.forEach((b,w)=>h[w]={value:b,index:w}),o<h.length&&(zE(h,o),h=h.slice(0,o)),n&&h.sort(Uf);let d=p*o,g=l.subarray(d,d+o),y=u.subarray(d,d+o);for(let b=0;b<o;b++)g[b]=h[b].value,y[b]=h[b].index}let c=t.slice();return c[c.length-1]=o,[pt(c,e,l),pt(c,"int32",u)]}function $x(r,t,e,o){let n=x.parseAxisParam(t,e)[0],s=[1,e[0],1];for(let h=0;h<n;h++)s[0]*=e[h];s[1]=e[n];for(let h=n+1;h<e.length;h++)s[2]*=e[h];let i={},a=new Int32Array(e[n]),l=new Ut(s,o,r),u=[],c=s[0]===1&&s[2]===1;for(let h=0;h<e[n];h++){let d;if(c)d=r[h].toString();else{let g=[];for(let y=0;y<s[0];y++)for(let b=0;b<s[2];b++)g.push(l.get(y,h,b));d=g.join(",")}if(i[d]!==void 0)a[h]=i[d];else{let g=Object.keys(i).length;i[d]=g,a[h]=g,u.push(h)}}let p=s.slice();p[1]=Object.keys(i).length;let m=new Ut(p,o);u.forEach((h,d)=>{for(let g=0;g<s[0];g++)for(let y=0;y<s[2];y++)m.set(l.get(g,h,y),g,d,y)});let f=e.slice();return f[n]=p[1],{outputValues:m.values,outputShape:f,indices:a}}$h("cpu",()=>new Oa,1);var CC=bt(Jn,r=>r>=0?r:Math.exp(r)-1),ME={kernelName:Jn,backendName:"cpu",kernelFunc:CC};function vC(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{alpha:s}=o;Y([n],"leakyRelu");let i=x.sizeFromShape(n.shape),a=e.data.get(n.dataId).values,l=x.getTypedArrayFromDType("float32",i);for(let u=0;u<a.length;u++)l[u]=a[u]<0?s*a[u]:a[u];return e.makeTensorInfo(n.shape,"float32",l)}var BE={kernelName:Si,backendName:"cpu",kernelFunc:vC};var N4=zt((r,t)=>r<0?t*r:r);function NC(r){let{inputs:t,backend:e}=r,{x:o,alpha:n}=t;Y([o,n],"prelu");let s=e.data.get(o.dataId).values,i=e.data.get(n.dataId).values,[a,l]=N4(o.shape,n.shape,s,i,"float32");return e.makeTensorInfo(l,"float32",a)}var VE={kernelName:Pi,backendName:"cpu",kernelFunc:NC};var SC=bt(gs,r=>Math.max(0,r)),GE={kernelName:gs,backendName:"cpu",kernelFunc:SC};var IC=bt(xs,r=>Math.min(Math.max(0,r),6)),WE={kernelName:xs,backendName:"cpu",kernelFunc:IC};function ql(r,t,e,o,n){if(e==="linear")return pr({inputs:{x:t},backend:r});if(e==="relu")return SC({inputs:{x:t},backend:r});if(e==="elu")return CC({inputs:{x:t},backend:r});if(e==="relu6")return IC({inputs:{x:t},backend:r});if(e==="prelu")return NC({inputs:{x:t,alpha:o},backend:r});if(e==="leakyrelu")return vC({inputs:{x:t},backend:r,attrs:{alpha:n}});if(e==="sigmoid")return gC({inputs:{x:t},backend:r});throw new Error(`Activation ${e} has not been implemented for the CPU backend.`)}function _t(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{shape:s}=o,i=x.sizeFromShape(n.shape),a=x.inferFromImplicitShape(s,i),l=x.sizeFromShape(a);x.assert(i===l,()=>`The new shape (${a}) has ${l} elements and the old shape (${n.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),e.incRef(n.dataId);let u=e.data.get(n.dataId);if(u.complexTensorInfos!=null){let c=u.complexTensorInfos.real,p=u.complexTensorInfos.imag;c.shape=a,p.shape=a}return{dataId:n.dataId,shape:a,dtype:n.dtype}}var UE={kernelName:Mi,backendName:"cpu",kernelFunc:_t};function TC(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s}=t,{transposeA:i,transposeB:a}=o;Y([n,s],"matMul");let l=n.shape.length,u=s.shape.length,c=i?n.shape[l-2]:n.shape[l-1],p=a?s.shape[u-1]:s.shape[u-2],m=i?n.shape[l-1]:n.shape[l-2],f=a?s.shape[u-2]:s.shape[u-1],h=n.shape.slice(0,-2),d=s.shape.slice(0,-2),g=x.sizeFromShape(h),y=x.sizeFromShape(d),w=qr.assertAndGetBroadcastShape(n.shape.slice(0,-2),s.shape.slice(0,-2)).concat([m,f]);x.assert(c===p,()=>`Error in matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${n.shape} and ${s.shape} and transposeA=${i} and transposeB=${a} must match.`);let C=i?[g,c,m]:[g,m,c],I=a?[y,f,p]:[y,p,f],$=_t({inputs:{x:n},backend:e,attrs:{shape:C}}),A=_t({inputs:{x:s},backend:e,attrs:{shape:I}}),_=i?$.shape[1]:$.shape[2],O=i?$.shape[2]:$.shape[1],P=a?A.shape[1]:A.shape[2],B=Math.max(g,y),V=e.data.get($.dataId).values,G=e.data.get(A.dataId).values,H=x.computeStrides($.shape),W=x.computeStrides(A.shape),[X,Z,K]=i?[H[0],1,H[1]]:[H[0],H[1],1],[J,rt,ot]=a?[1,W[1],W[0]]:[W[1],1,W[0]],lt=O*P,it=pt([B,O,P],$.dtype),ct=it.values,at=e.blockSize;for(let mt=0;mt<B;mt++)for(let xt=0;xt<O;xt+=at)for(let Nt=0;Nt<P;Nt+=at)for(let Tt=0;Tt<_;Tt+=at){let Pt=Math.min(xt+at,O),Mt=Math.min(Nt+at,P),ne=Math.min(Tt+at,_);for(let me=xt;me<Pt;me++)for(let ye=Nt;ye<Mt;ye++){let ve=0;for(let ae=Tt;ae<ne;ae++){let Fe=Math.min(mt,g-1)*X,Oe=Math.min(mt,y-1)*ot,On=V[Fe+me*Z+ae*K],nr=G[ae*J+ye*rt+Oe];ve+=On*nr}ct[mt*lt+(me*P+ye)]+=ve}}return e.disposeIntermediateTensorInfo($),e.disposeIntermediateTensorInfo(A),e.makeTensorInfo(w,it.dtype,it.values)}var HE={kernelName:pi,backendName:"cpu",kernelFunc:TC};function S4(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s,bias:i,preluActivationWeights:a}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=o,m,f,h,d=[];m=TC({inputs:{a:n,b:s},attrs:{transposeA:l,transposeB:u},backend:e}),i&&(f=Dn({inputs:{a:m,b:i},backend:e}),d.push(m),m=f),c&&(h=ql(e,m,c,a,p),d.push(m),m=h);for(let y of d)e.disposeIntermediateTensorInfo(y);return m}var qE={kernelName:nl,backendName:"cpu",kernelFunc:S4};var I4=bt(Bn,r=>Math.acos(r)),KE={kernelName:Bn,backendName:"cpu",kernelFunc:I4};var T4=bt(Vn,r=>Math.acosh(r)),jE={kernelName:Vn,backendName:"cpu",kernelFunc:T4};function k4(r){let{inputs:t,backend:e}=r,o=t;Y(t,"addN");let n=o.map(a=>e.data.get(a.dataId).values),s=pt(o[0].shape,o[0].dtype),i=s.values;for(let a=0;a<o.length;a++){let l=n[a];for(let u=0;u<i.length;u++)i[u]+=l[u]}return e.makeTensorInfo(s.shape,s.dtype,s.values)}var XE={kernelName:ii,backendName:"cpu",kernelFunc:k4};function E4(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;Y(n,"all");let a=x.parseAxisParam(s,n.shape),l=a,u=T.getAxesPermutation(l,n.shape.length),c=n;u!=null&&(c=ge({inputs:{x:n},backend:e,attrs:{perm:u}}),l=T.getInnerMostAxes(l.length,n.shape.length)),T.assertAxesAreInnerMostDims("all",l,c.shape.length);let[p,m]=T.computeOutAndReduceShapes(c.shape,l),f=x.sizeFromShape(m),h=x.makeZerosTypedArray(x.sizeFromShape(p),c.dtype),d=e.data.get(c.dataId).values;for(let y=0;y<h.length;++y){let b=y*f,w=d[b];for(let C=0;C<f;++C){let I=d[b+C];w=w&&I}h[y]=w}u!=null&&e.disposeIntermediateTensorInfo(c);let g=e.makeTensorInfo(p,c.dtype,h);if(i){let y=T.expandShapeToKeepDim(p,a),b=_t({inputs:{x:g},backend:e,attrs:{shape:y}});return e.disposeIntermediateTensorInfo(g),b}return g}var YE={kernelName:pu,backendName:"cpu",kernelFunc:E4};function $4(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;Y(n,"any");let a=x.parseAxisParam(s,n.shape),l=a,u=T.getAxesPermutation(l,n.shape.length),c=n;u!=null&&(c=ge({inputs:{x:n},backend:e,attrs:{perm:u}}),l=T.getInnerMostAxes(l.length,n.shape.length)),T.assertAxesAreInnerMostDims("any",l,c.shape.length);let[p,m]=T.computeOutAndReduceShapes(c.shape,l),f=x.sizeFromShape(m),h=x.makeZerosTypedArray(x.sizeFromShape(p),c.dtype),d=e.data.get(c.dataId).values;for(let y=0;y<h.length;++y){let b=y*f,w=d[b];for(let C=0;C<f;++C){let I=d[b+C];w=w||I}h[y]=w}u!=null&&e.disposeIntermediateTensorInfo(c);let g=e.makeTensorInfo(p,c.dtype,h);if(i){let y=T.expandShapeToKeepDim(p,a),b=_t({inputs:{x:g},backend:e,attrs:{shape:y}});return e.disposeIntermediateTensorInfo(g),b}return g}var ZE={kernelName:mu,backendName:"cpu",kernelFunc:$4};function A4(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o;Y(n,"argMax");let i=x.parseAxisParam(s,n.shape),a=T.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=ge({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=T.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],T.assertAxesAreInnerMostDims("argMax",i,l.shape.length);let[c,p]=T.computeOutAndReduceShapes(l.shape,i),m=x.sizeFromShape(c),f=x.makeZerosTypedArray(m,"int32"),h=x.sizeFromShape(p),d=e.data.get(l.dataId).values;for(let g=0;g<f.length;++g){let y=g*h,b=d[y],w=0;for(let C=0;C<h;++C){let I=d[y+C];I>b&&(b=I,w=C)}f[g]=w}return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),e.makeTensorInfo(c,"int32",f)}var JE={kernelName:ai,backendName:"cpu",kernelFunc:A4};function D4(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o;Y(n,"argMin");let i=x.parseAxisParam(s,n.shape),a=T.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=ge({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=T.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],T.assertAxesAreInnerMostDims("argMin",i,l.shape.length);let[c,p]=T.computeOutAndReduceShapes(l.shape,i),m=x.sizeFromShape(c),f=x.makeZerosTypedArray(m,"int32"),h=x.sizeFromShape(p),d=e.data.get(l.dataId).values;for(let g=0;g<f.length;++g){let y=g*h,b=d[y],w=0;for(let C=0;C<h;++C){let I=d[y+C];I<b&&(b=I,w=C)}f[g]=w}return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),e.makeTensorInfo(c,"int32",f)}var QE={kernelName:li,backendName:"cpu",kernelFunc:D4};var F4=bt(Gn,r=>Math.asin(r)),t$={kernelName:Gn,backendName:"cpu",kernelFunc:F4};var R4=bt(Wn,r=>Math.asinh(r)),e$={kernelName:Wn,backendName:"cpu",kernelFunc:R4};var _4=bt(Un,r=>Math.atan(r)),r$={kernelName:Un,backendName:"cpu",kernelFunc:_4};var O4=zt((r,t)=>Math.atan2(r,t)),L4=Vt(qn,O4),o$={kernelName:qn,backendName:"cpu",kernelFunc:L4};var P4=bt(Hn,r=>Math.atanh(r)),n$={kernelName:Hn,backendName:"cpu",kernelFunc:P4};function Ip(r,t,e,o,n,s){let i=n.strideHeight,a=n.strideWidth,l=n.dilationHeight,u=n.dilationWidth,c=n.effectiveFilterHeight,p=n.effectiveFilterWidth,m=n.padInfo.top,f=n.padInfo.left,h=s==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,d=pt(n.outShape,e),g=d.values,y=n.outShape[1]*n.outShape[2]*n.outShape[3],b=n.outShape[2]*n.outShape[3],w=n.outShape[3];for(let C=0;C<n.batchSize;++C){let I=C*y,$=C*o[0];for(let A=0;A<n.inChannels;++A)for(let _=0;_<n.outHeight;++_){let O=_*i-m,P=Math.max(0,O),B=Math.min(n.inHeight,c+O),V=I+_*b;for(let G=0;G<n.outWidth;++G){let H=G*a-f,W=Math.max(0,H),X=Math.min(n.inWidth,p+H),Z=h,K=0,J=0;for(let ot=P;ot<B;ot+=l){let lt=$+ot*o[1];for(let it=W;it<X;it+=u){let ct=lt+it*o[2],at=r[ct+A];s==="max"&&at>Z?Z=at:s==="avg"&&(K+=at,J++)}if(isNaN(Z))break}let rt=V+G*w+A;g[rt]=s==="avg"?K/J:Z}}}return d}function Dx(r,t,e,o,n=!1,s=!1){let i=pt(o.outShape,"int32"),a=o.strideHeight,l=o.strideWidth,u=o.dilationHeight,c=o.dilationWidth,p=o.effectiveFilterHeight,m=o.effectiveFilterWidth,f=o.padInfo.top,h=o.padInfo.left,d=pt(t,e,r);for(let g=0;g<o.batchSize;++g)for(let y=0;y<o.inChannels;++y)for(let b=0;b<o.outHeight;++b){let w=b*a-f,C=w;for(;C<0;)C+=u;let I=Math.min(o.inHeight,p+w);for(let $=0;$<o.outWidth;++$){let A=$*l-h,_=A;for(;_<0;)_+=c;let O=Math.min(o.inWidth,m+A),P=Number.NEGATIVE_INFINITY,B=-1;for(let V=C;V<I;V+=u){let G=V-w;for(let H=_;H<O;H+=c){let W=H-A,X=d.get(g,V,H,y);X>P&&(P=X,n?B=s?((g*o.inHeight+V)*o.inWidth+H)*o.inChannels+y:(V*o.inWidth+H)*o.inChannels+y:B=G*m+W)}}i.set(B,g,b,$,y)}}return i}function Fx(r,t,e,o,n,s){let i=n.strideDepth,a=n.strideHeight,l=n.strideWidth,u=n.dilationDepth,c=n.dilationHeight,p=n.dilationWidth,m=n.effectiveFilterDepth,f=n.effectiveFilterHeight,h=n.effectiveFilterWidth,d=n.padInfo.front,g=n.padInfo.top,y=n.padInfo.left,b=s==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,w=pt(n.outShape,e),C=w.values,I=n.outShape[1]*n.outShape[2]*n.outShape[3]*n.outShape[4],$=n.outShape[2]*n.outShape[3]*n.outShape[4],A=n.outShape[3]*n.outShape[4],_=n.outShape[4];for(let O=0;O<n.batchSize;++O){let P=O*I,B=O*o[0];for(let V=0;V<n.inChannels;++V)for(let G=0;G<n.outDepth;++G){let H=G*i-d,W=H;for(;W<0;)W+=u;let X=Math.min(n.inDepth,m+H),Z=P+G*$;for(let K=0;K<n.outHeight;++K){let J=K*a-g,rt=J;for(;rt<0;)rt+=c;let ot=Math.min(n.inHeight,f+J),lt=Z+K*A;for(let it=0;it<n.outWidth;++it){let ct=it*l-y,at=ct;for(;at<0;)at+=p;let mt=Math.min(n.inWidth,h+ct),xt=lt+it*_,Nt=b,Tt=0,Pt=0;for(let ne=W;ne<X;ne+=u){let me=B+ne*o[1];for(let ye=rt;ye<ot;ye+=c){let ve=me+ye*o[2];for(let ae=at;ae<mt;ae+=p){let Fe=ve+ae*o[3],Oe=r[Fe+V];if(s==="max"&&Oe>Nt?Nt=Oe:s==="avg"&&(Tt+=Oe,Pt++),isNaN(Nt))break}if(isNaN(Nt))break}if(isNaN(Nt))break}let Mt=xt+V;C[Mt]=s==="avg"?Tt/Pt:Nt}}}}return w}function s$(r,t){let e=pt(t.outShape,"int32"),o=t.strideDepth,n=t.strideHeight,s=t.strideWidth,i=t.dilationDepth,a=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,p=t.effectiveFilterWidth,m=t.padInfo.front,f=t.padInfo.top,h=t.padInfo.left;for(let d=0;d<t.batchSize;++d)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){let b=y*o-m,w=b;for(;w<0;)w+=i;let C=Math.min(t.inDepth,u+b);for(let I=0;I<t.outHeight;++I){let $=I*n-f,A=$;for(;A<0;)A+=a;let _=Math.min(t.inHeight,c+$);for(let O=0;O<t.outWidth;++O){let P=O*s-h,B=P;for(;B<0;)B+=l;let V=Math.min(t.inWidth,p+P),G=Number.NEGATIVE_INFINITY,H=-1;for(let W=w;W<C;W+=i){let X=W-b;for(let Z=A;Z<_;Z+=a){let K=Z-$;for(let J=B;J<V;J+=l){let rt=J-P,ot=r.get(d,W,Z,J,g);ot>=G&&(G=ot,H=X*c*p+K*c+rt)}}}e.set(H,d,y,I,O,g)}}}return e}function z4(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;Y(n,"avgPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;x.assert(T.eitherStridesOrDilationsAreOne(i,u),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=T.computePool2DInfo(n.shape,s,i,u,a,l),p;if(c.filterWidth===1&&c.filterHeight===1&&x.arraysEqual(c.inShape,c.outShape))p=pr({inputs:{x:n},backend:e});else{let m=e.data.get(n.dataId).values,f=x.computeStrides(n.shape),h=Ip(m,n.shape,n.dtype,f,c,"avg");p=e.makeTensorInfo(c.outShape,n.dtype,h.values)}return p}var i$={kernelName:ui,backendName:"cpu",kernelFunc:z4};function M4(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=o;Y(n,"avgPool3d");let c=T.computePool3DInfo(n.shape,s,i,1,a,l,u),p=e.data.get(n.dataId).values,m=Fx(p,n.shape,n.dtype,x.computeStrides(n.shape),c,"avg");return e.makeTensorInfo(m.shape,"float32",m.values)}var a$={kernelName:ci,backendName:"cpu",kernelFunc:M4};function B4(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,{filterSize:i,strides:a,pad:l,dimRoundingMode:u}=o;Y([n,s],"avgPool3DGrad");let c=T.computePool3DInfo(s.shape,i,a,1,l,u),p=c.strideDepth,m=c.strideHeight,f=c.strideWidth,h=c.filterDepth,d=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,w=c.dilationWidth,C=c.effectiveFilterDepth,I=c.effectiveFilterHeight,$=c.effectiveFilterWidth,A=C-1-c.padInfo.front,_=$-1-c.padInfo.left,O=I-1-c.padInfo.top,P=pt(s.shape,"float32"),B=1/(h*d*g),V=e.bufferSync(n);for(let G=0;G<c.batchSize;++G)for(let H=0;H<c.inChannels;++H)for(let W=0;W<c.inDepth;++W)for(let X=0;X<c.inHeight;++X)for(let Z=0;Z<c.inWidth;++Z){let K=W-A,J=X-O,rt=Z-_,ot=0;for(let lt=0;lt<C;lt+=y){let it=(K+lt)/p;if(!(it<0||it>=c.outDepth||Math.floor(it)!==it))for(let ct=0;ct<I;ct+=b){let at=(J+ct)/m;if(!(at<0||at>=c.outHeight||Math.floor(at)!==at))for(let mt=0;mt<$;mt+=w){let xt=(rt+mt)/f;if(xt<0||xt>=c.outWidth||Math.floor(xt)!==xt)continue;ot+=V.get(G,it,at,xt,H)}}}P.set(ot*B,G,W,X,Z,H)}return e.makeTensorInfo(P.shape,P.dtype,P.values)}var l$={kernelName:hu,backendName:"cpu",kernelFunc:B4};function V4(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,i=s;Y([n,s],"avgPoolGrad");let{filterSize:a,strides:l,pad:u}=o,c=T.computePool2DInfo(i.shape,a,l,1,u),p=c.strideHeight,m=c.strideWidth,f=c.filterHeight,h=c.filterWidth,d=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,w=b-1-c.padInfo.left,C=y-1-c.padInfo.top,I=pt(i.shape,"float32"),$=1/(f*h),A=e.data.get(n.dataId).values,_=pt(n.shape,"float32",A);for(let O=0;O<c.batchSize;++O)for(let P=0;P<c.inChannels;++P)for(let B=0;B<c.inHeight;++B)for(let V=0;V<c.inWidth;++V){let G=B-C,H=V-w,W=0;for(let X=0;X<y;X+=d){let Z=(G+X)/p;if(!(Z<0||Z>=c.outHeight||Math.floor(Z)!==Z))for(let K=0;K<b;K+=g){let J=(H+K)/m;if(J<0||J>=c.outWidth||Math.floor(J)!==J)continue;W+=_.get(O,Z,J,P)}}I.set(W*$,O,B,V,P)}return e.makeTensorInfo(I.shape,I.dtype,I.values)}var u$={kernelName:fu,backendName:"cpu",kernelFunc:V4};function G4(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,scale:s,offset:i,mean:a,variance:l}=t;x.assert(a.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),x.assert(i==null||a.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),x.assert(s==null||a.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),Y([n,a,l,s,i],"batchNorm");let{varianceEpsilon:u}=o;u==null&&(u=.001);let c=e.data.get(n.dataId).values,p=e.data.get(a.dataId).values,m=e.data.get(l.dataId).values,f=s?e.data.get(s.dataId).values:new Float32Array([1]),h=i?e.data.get(i.dataId).values:new Float32Array([0]),d=new Float32Array(c.length),g=h.length,y=f.length,b=m.length,w=p.length,C=0,I=0,$=0,A=0;for(let _=0;_<c.length;++_)d[_]=h[C++]+(c[_]-p[I++])*f[$++]/Math.sqrt(m[A++]+u),C>=g&&(C=0),I>=w&&(I=0),$>=y&&($=0),A>=b&&(A=0);return e.makeTensorInfo(n.shape,n.dtype,d)}var c$={kernelName:vi,backendName:"cpu",kernelFunc:G4};function W4(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,crops:i}=o;Y([n],"batchToSpaceND");let a=s.reduce((y,b)=>y*b),l=T.getReshaped(n.shape,s,a),u=T.getPermuted(l.length,s.length),c=T.getReshapedPermuted(n.shape,s,a),p=T.getSliceBeginCoords(i,s.length),m=T.getSliceSize(c,i,s.length),f=_t({inputs:{x:n},backend:e,attrs:{shape:l}}),h=ge({inputs:{x:f},backend:e,attrs:{perm:u}}),d=_t({inputs:{x:h},backend:e,attrs:{shape:c}}),g=Lo({inputs:{x:d},backend:e,attrs:{begin:p,size:m}});return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),g}var p$={kernelName:mi,backendName:"cpu",kernelFunc:W4};function U4(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:i}=o,a=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,u=vp(a,l,s.dtype,s.shape,i);return e.makeTensorInfo([i],s.dtype,u)}var m$={kernelName:du,backendName:"cpu",kernelFunc:U4};function H4(r){let{inputs:t,backend:e}=r,{s0:o,s1:n}=t,s=e.data.get(o.dataId).values,i=e.data.get(n.dataId).values,a=T.assertAndGetBroadcastShape(Array.from(s),Array.from(i));return e.makeTensorInfo([a.length],"int32",Int32Array.from(a))}var f$={kernelName:gu,backendName:"cpu",kernelFunc:H4};var q4=bt(jn,(r,t)=>{let e=t;return r>e.clipValueMax?e.clipValueMax:r<e.clipValueMin?e.clipValueMin:r}),h$={kernelName:jn,backendName:"cpu",kernelFunc:q4};var K4=r=>{let{x:t}=r.inputs,e=r.backend,o=new Float32Array(x.sizeFromShape(t.shape)),n=e.data.get(t.dataId),s=n.complexTensorInfos.real,i=n.complexTensorInfos.imag,a=e.data.get(s.dataId).values,l=e.data.get(i.dataId).values;for(let u=0;u<a.length;u++){let c=a[u],p=l[u];o[u]=Math.hypot(c,p)}return e.makeOutput(o,t.shape,"float32")},d$={kernelName:fi,backendName:"cpu",kernelFunc:K4};function Fn(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.data.get(o.dataId).complexTensorInfos.imag,s=e.data.get(n.dataId).values;return e.makeTensorInfo(n.shape,n.dtype,s)}var g$={kernelName:Ou,backendName:"cpu",kernelFunc:Fn};function La(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o,s=x.parseAxisParam(n,t[0].shape)[0],i=T.computeOutShape(t.map(d=>d.shape),s);if(x.sizeFromShape(i)===0)return e.makeTensorInfo(i,t[0].dtype,[]);let a=t.filter(d=>x.sizeFromShape(d.shape)>0);if(a.length===1)return pr({inputs:{x:a[0]},backend:e});let l=a.map(d=>d.shape);if(T.assertParamsConsistent(l,s),a[0].dtype==="complex64"){let d=a.map(C=>Ro({inputs:{input:C},backend:e})),g=a.map(C=>Fn({inputs:{input:C},backend:e})),y=La({inputs:d,backend:e,attrs:{axis:s}}),b=La({inputs:g,backend:e,attrs:{axis:s}}),w=He({inputs:{real:y,imag:b},backend:e});return d.forEach(C=>e.disposeIntermediateTensorInfo(C)),g.forEach(C=>e.disposeIntermediateTensorInfo(C)),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(b),w}let u=a.map(d=>{let g=x.sizeFromShape(d.shape.slice(s));return _t({inputs:{x:d},backend:e,attrs:{shape:[-1,g]}})}),c=u.map(d=>({vals:e.data.get(d.dataId).values,shape:d.shape}));i=T.computeOutShape(u.map(d=>d.shape),1);let p=u[0].shape[0]===1,m=dx(c,i,t[0].dtype,p),f=T.computeOutShape(a.map(d=>d.shape),s),h=e.makeTensorInfo(f,t[0].dtype,m);return u.forEach(d=>e.disposeIntermediateTensorInfo(d)),h}var x$={kernelName:hi,backendName:"cpu",kernelFunc:La};function kC(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dataFormat:l,dilations:u,dimRoundingMode:c}=o;Y([n,s],"conv2d");let p=T.convertConv2DDataFormat(l),m=T.computeConv2DInfo(n.shape,s.shape,i,u,a,c,!1,p),f=m.filterHeight,h=m.filterWidth,d=m.dilationHeight,g=m.dilationWidth,y=m.padInfo.left,b=m.padInfo.top,w=m.dataFormat==="channelsLast",C=new Ut(m.outShape,n.dtype),I=x.computeStrides(n.shape),$=x.computeStrides(s.shape),A=I[0],_=w?I[1]:I[2],O=w?I[2]:1,P=w?1:I[1],B=C.strides[0],V=w?C.strides[1]:C.strides[2],G=w?C.strides[2]:1,H=w?1:C.strides[1],W=e.data.get(n.dataId).values,X=e.data.get(s.dataId).values,Z=C.values;for(let K=0;K<m.batchSize;++K){let J=K*A,rt=K*B;for(let ot=0;ot<m.outHeight;++ot){let lt=rt+ot*V,it=ot*m.strideHeight-b;for(let ct=0;ct<f;++ct){let at=it+ct*d;if(at<0||at>=m.inHeight)continue;let mt=ct*$[0],xt=J+at*_;for(let Nt=0;Nt<m.outWidth;++Nt){let Tt=lt+Nt*G,Pt=Nt*m.strideWidth-y;for(let Mt=0;Mt<h;++Mt){let ne=Pt+Mt*g;if(ne<0||ne>=m.inWidth)continue;let me=mt+Mt*$[1],ye=xt+ne*O,ve=me;for(let ae=0;ae<m.inChannels;++ae){let Fe=W[ye+ae*P];for(let Oe=0;Oe<m.outChannels;++Oe)Z[Tt+Oe*H]+=Fe*X[ve+Oe];ve+=m.outChannels}}}}}}return e.makeTensorInfo(C.shape,C.dtype,Z)}var y$={kernelName:di,backendName:"cpu",kernelFunc:kC};function j4(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,pad:a,dataFormat:l,dimRoundingMode:u,filterShape:c}=o;Y([n,s],"conv2dBackpropFilter");let p=T.convertConv2DDataFormat(l),m=T.computeConv2DInfo(n.shape,c,i,1,a,u,!1,p),{strideHeight:f,strideWidth:h,filterHeight:d,filterWidth:g}=m,y=m.dataFormat==="channelsLast",b=new Ut(m.filterShape,"float32"),w=m.padInfo.left,C=m.padInfo.top,I=e.data.get(n.dataId).values,$=e.data.get(s.dataId).values,A=new Ut(n.shape,n.dtype,I),_=new Ut(s.shape,s.dtype,$);for(let O=0;O<d;++O){let P=Math.max(0,Math.ceil((C-O)/f)),B=Math.min(m.outHeight,(m.inHeight+C-O)/f);for(let V=0;V<g;++V){let G=Math.max(0,Math.ceil((w-V)/h)),H=Math.min(m.outWidth,(m.inWidth+w-V)/h);for(let W=0;W<m.inChannels;++W)for(let X=0;X<m.outChannels;++X){let Z=0;for(let K=0;K<m.batchSize;++K)for(let J=P;J<B;++J){let rt=O+J*f-C;for(let ot=G;ot<H;++ot){let lt=V+ot*h-w;y?Z+=A.get(K,rt,lt,W)*_.get(K,J,ot,X):Z+=A.get(K,W,rt,lt)*_.get(K,X,J,ot)}}b.set(Z,O,V,W,X)}}}return e.makeTensorInfo(b.shape,b.dtype,b.values)}var b$={kernelName:yu,backendName:"cpu",kernelFunc:j4};function X4(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{inputShape:i,strides:a,pad:l,dataFormat:u,dimRoundingMode:c}=o;Y([n,s],"conv2dBackpropInput");let p=x.computeStrides(s.shape),m=x.computeStrides(n.shape),f=T.convertConv2DDataFormat(u),h=T.computeConv2DInfo(i,s.shape,a,1,l,c,!1,f),d=new Ut(h.inShape,"float32"),g=d.values,y=e.data.get(n.dataId).values,b=e.data.get(s.dataId).values,[w,C,I]=p,{batchSize:$,filterHeight:A,filterWidth:_,inChannels:O,inHeight:P,inWidth:B,outChannels:V,outHeight:G,outWidth:H,strideHeight:W,strideWidth:X}=h;f=h.dataFormat;let Z=A-1-h.padInfo.top,K=_-1-h.padInfo.left,J=f==="channelsLast",rt=d.strides[0],ot=J?d.strides[1]:d.strides[2],lt=J?d.strides[2]:1,it=J?1:d.strides[1],ct=m[0],at=J?m[1]:m[2],mt=J?m[2]:1,xt=J?1:m[1];for(let Nt=0;Nt<$;++Nt)for(let Tt=0;Tt<O;++Tt)for(let Pt=0;Pt<P;++Pt){let Mt=Pt-Z,ne=Math.max(0,Math.ceil(Mt/W)),me=Math.min(G,(A+Mt)/W);for(let ye=0;ye<B;++ye){let ve=ye-K,ae=Math.max(0,Math.ceil(ve/X)),Fe=Math.min(H,(_+ve)/X),Oe=0;for(let nr=ne;nr<me;++nr){let ei=nr*W-Mt;for(let to=ae;to<Fe;++to){let Ha=to*X-ve,Mo=ct*Nt+at*nr+mt*to,Ln=w*(A-1-ei)+C*(_-1-Ha)+I*Tt;for(let ri=0;ri<V;++ri){let oi=y[Mo+xt*ri],ni=b[Ln+ri];Oe+=oi*ni}}}let On=rt*Nt+ot*Pt+lt*ye+it*Tt;g[On]=Oe}}return e.makeTensorInfo(d.shape,d.dtype,d.values)}var w$={kernelName:gi,backendName:"cpu",kernelFunc:X4};function Y4(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l}=o;Y([n,s],"conv3d");let u=T.computeConv3DInfo(n.shape,s.shape,i,l,a),{filterDepth:c,filterHeight:p,filterWidth:m,dilationDepth:f,dilationHeight:h,dilationWidth:d,padInfo:g}=u,y=g.front,b=g.left,w=g.top,C=new Ut(u.outShape,n.dtype),I=e.data.get(n.dataId).values,$=e.data.get(s.dataId).values,A=C.values,_=x.computeStrides(n.shape),O=x.computeStrides(s.shape);for(let P=0;P<u.batchSize;++P){let B=P*_[0],V=P*C.strides[0];for(let G=0;G<u.outDepth;++G){let H=V+G*C.strides[1],W=G*u.strideDepth-y;for(let X=0;X<c;++X){let Z=W+X*f;if(Z<0||Z>=u.inDepth)continue;let K=X*O[0],J=B+Z*_[1];for(let rt=0;rt<u.outHeight;++rt){let ot=H+rt*C.strides[2],lt=rt*u.strideHeight-w;for(let it=0;it<p;++it){let ct=lt+it*h;if(ct<0||ct>=u.inHeight)continue;let at=K+it*O[1],mt=J+ct*_[2];for(let xt=0;xt<u.outWidth;++xt){let Nt=ot+xt*u.outChannels,Tt=xt*u.strideWidth-b;for(let Pt=0;Pt<m;++Pt){let Mt=Tt+Pt*d;if(Mt<0||Mt>=u.inWidth)continue;let ne=at+Pt*O[2],me=mt+Mt*u.inChannels,ye=ne;for(let ve=0;ve<u.inChannels;++ve){let ae=I[me+ve];for(let Fe=0;Fe<u.outChannels;++Fe)A[Nt+Fe]+=ae*$[ye+Fe];ye+=u.outChannels}}}}}}}}return e.makeTensorInfo(C.shape,C.dtype,C.values)}var C$={kernelName:xi,backendName:"cpu",kernelFunc:Y4};function Z4(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,pad:a,filterShape:l}=o;Y([n,s],"conv3dBackpropFilterV2");let u=x.computeStrides(n.shape),c=x.computeStrides(s.shape),p=T.computeConv3DInfo(n.shape,l,i,1,a),m=p.strideDepth,f=p.strideHeight,h=p.strideWidth,d=p.filterDepth,g=p.filterHeight,y=p.filterWidth,b=new Ut(p.filterShape,"float32"),w=b.values,[C,I,$,A]=b.strides,_=e.data.get(s.dataId).values,[O,P,B,V]=c,G=e.data.get(n.dataId).values,[H,W,X,Z]=u,K=p.padInfo.front,J=p.padInfo.left,rt=p.padInfo.top;for(let ot=0;ot<d;++ot){let lt=Math.max(0,Math.ceil((K-ot)/m)),it=Math.min(p.outDepth,(p.inDepth+K-ot)/m),ct=ot*C;for(let at=0;at<g;++at){let mt=Math.max(0,Math.ceil((rt-at)/f)),xt=Math.min(p.outHeight,(p.inHeight+rt-at)/f),Nt=at*I+ct;for(let Tt=0;Tt<y;++Tt){let Pt=Math.max(0,Math.ceil((J-Tt)/h)),Mt=Math.min(p.outWidth,(p.inWidth+J-Tt)/h),ne=Tt*$+Nt;for(let me=0;me<p.inChannels;++me){let ye=me*A+ne;for(let ve=0;ve<p.outChannels;++ve){let ae=0;for(let Fe=0;Fe<p.batchSize;++Fe){let Oe=Fe*H,On=Fe*O;for(let nr=lt;nr<it;++nr){let to=(ot+nr*m-K)*W+Oe,Ha=nr*P+On;for(let Mo=mt;Mo<xt;++Mo){let ri=(at+Mo*f-rt)*X+to,oi=Mo*B+Ha;for(let ni=Pt;ni<Mt;++ni){let Cb=(Tt+ni*h-J)*Z+ri,vb=ni*V+oi;ae+=G[Cb+me]*_[vb+ve]}}}}w[ye+ve]=ae}}}}}return e.makeTensorInfo(b.shape,b.dtype,b.values)}var v$={kernelName:bu,backendName:"cpu",kernelFunc:Z4};function J4(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{pad:i,strides:a,inputShape:l}=o;Y([n],"conv3dBackpropInputV2");let u=x.computeStrides(n.shape),c=x.computeStrides(s.shape),p=T.computeConv3DInfo(l,s.shape,a,1,i),m=new Ut(p.inShape,"float32"),f=m.values,[h,d,g,y]=m.strides,b=e.data.get(n.dataId).values,[w,C,I,$]=u,A=e.data.get(s.dataId).values,[_,O,P,B]=c,{batchSize:V,filterDepth:G,filterHeight:H,filterWidth:W,inChannels:X,inDepth:Z,inHeight:K,inWidth:J,outChannels:rt,outDepth:ot,outHeight:lt,outWidth:it,strideDepth:ct,strideHeight:at,strideWidth:mt}=p,xt=G-1-p.padInfo.front,Nt=H-1-p.padInfo.top,Tt=W-1-p.padInfo.left;for(let Pt=0;Pt<V;++Pt)for(let Mt=0;Mt<X;++Mt)for(let ne=0;ne<Z;++ne){let me=ne-xt,ye=Math.max(0,Math.ceil(me/ct)),ve=Math.min(ot,(G+me)/ct);for(let ae=0;ae<K;++ae){let Fe=ae-Nt,Oe=Math.max(0,Math.ceil(Fe/at)),On=Math.min(lt,(H+Fe)/at);for(let nr=0;nr<J;++nr){let ei=nr-Tt,to=Math.max(0,Math.ceil(ei/mt)),Ha=Math.min(it,(W+ei)/mt),Mo=0;for(let Ln=ye;Ln<ve;++Ln){let ri=Ln*ct-me;for(let oi=Oe;oi<On;++oi){let ni=oi*at-Fe;for(let Gp=to;Gp<Ha;++Gp){let Cb=Gp*mt-ei,vb=w*Pt+C*Ln+I*oi+$*Gp,BO=_*(G-1-ri)+O*(H-1-ni)+P*(W-1-Cb)+B*Mt;for(let uh=0;uh<rt;++uh){let VO=b[vb+uh],GO=A[BO+uh];Mo+=VO*GO}}}}f[h*Pt+d*ne+g*ae+y*nr+Mt]=Mo}}}return e.makeTensorInfo(m.shape,m.dtype,m.values)}var N$={kernelName:wu,backendName:"cpu",kernelFunc:J4};var Q4=bt(Xn,r=>Math.cos(r)),S$={kernelName:Xn,backendName:"cpu",kernelFunc:Q4};var tH=bt(Yn,r=>Math.cosh(r)),I$={kernelName:Yn,backendName:"cpu",kernelFunc:tH};function eH(r){let{inputs:t,backend:e,attrs:o}=r,{image:n,boxes:s,boxInd:i}=t,{cropSize:a,method:l,extrapolationValue:u}=o,[c,p,m,f]=n.shape,h=s.shape[0],[d,g]=a,y=pt([h,d,g,f],"float32"),b=e.data.get(s.dataId).values,w=e.data.get(i.dataId).values,C=e.data.get(n.dataId).values,I=x.computeStrides(n.shape),$=x.computeStrides(y.shape);for(let A=0;A<h;A++){let _=A*4,O=b[_],P=b[_+1],B=b[_+2],V=b[_+3],G=w[A];if(G>=c)continue;let H=d>1?(B-O)*(p-1)/(d-1):0,W=g>1?(V-P)*(m-1)/(g-1):0;for(let X=0;X<d;X++){let Z=d>1?O*(p-1)+X*H:.5*(O+B)*(p-1);if(Z<0||Z>p-1){for(let K=0;K<g;K++)for(let J=0;J<f;J++){let rt=J+K*$[2]+X*$[1]+A*$[0];y.values[rt]=u}continue}if(l==="bilinear"){let K=Math.floor(Z),J=Math.ceil(Z),rt=Z-K;for(let ot=0;ot<g;ot++){let lt=g>1?P*(m-1)+ot*W:.5*(P+V)*(m-1);if(lt<0||lt>m-1){for(let mt=0;mt<f;mt++){let xt=mt+ot*$[2]+X*$[1]+A*$[0];y.values[xt]=u}continue}let it=Math.floor(lt),ct=Math.ceil(lt),at=lt-it;for(let mt=0;mt<f;mt++){let xt=mt+it*I[2]+K*I[1]+G*I[0],Nt=C[xt];xt=mt+ct*I[2]+K*I[1]+G*I[0];let Tt=C[xt];xt=mt+it*I[2]+J*I[1]+G*I[0];let Pt=C[xt];xt=mt+ct*I[2]+J*I[1]+G*I[0];let Mt=C[xt],ne=Nt+(Tt-Nt)*at,me=Pt+(Mt-Pt)*at;xt=mt+ot*$[2]+X*$[1]+A*$[0],y.values[xt]=ne+(me-ne)*rt}}}else for(let K=0;K<g;++K){let J=g>1?P*(m-1)+K*W:.5*(P+V)*(m-1);if(J<0||J>m-1){for(let lt=0;lt<f;lt++){let it=lt+K*$[2]+X*$[1]+A*$[0];y.values[it]=u}continue}let rt=Math.round(J),ot=Math.round(Z);for(let lt=0;lt<f;lt++){let it=lt+rt*I[2]+ot*I[1]+G*I[0],ct=lt+K*$[2]+X*$[1]+A*$[0];y.values[ct]=C[it]}}}}return e.makeTensorInfo(y.shape,y.dtype,y.values)}var T$={kernelName:vu,backendName:"cpu",kernelFunc:eH};function rH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;Y(n,"cumprod");let l=T.getAxesPermutation([s],n.shape.length),u=n;l!=null&&(u=ge({inputs:{x:n},backend:e,attrs:{perm:l}}));let c=T.getInnerMostAxes(1,n.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);let p=Re(u.dtype,"int32"),m=x.makeOnesTypedArray(x.sizeFromShape(u.shape),p),f=e.data.get(u.dataId).values,h=u.shape[u.shape.length-1],d=a?(y,b)=>y+h-b-1:(y,b)=>y+b;for(let y=0;y<f.length;y+=h)for(let b=0;b<h;b++){let w=d(y,b);if(b===0)m[w]=i?1:f[w];else{let C=d(y,b-1);m[w]=i?f[C]*m[C]:f[w]*m[C]}}let g=e.makeTensorInfo(u.shape,p,m);if(l!=null){let y=T.getUndoAxesPermutation(l),b=ge({inputs:{x:g},backend:e,attrs:{perm:y}});return e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(u),b}return g}var k$={kernelName:Cu,backendName:"cpu",kernelFunc:rH};function oH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;Y(n,"cumsum");let l=T.getAxesPermutation([s],n.shape.length),u=n;l!=null&&(u=ge({inputs:{x:n},backend:e,attrs:{perm:l}}));let c=T.getInnerMostAxes(1,n.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);let p=Re(u.dtype,"int32"),m=x.makeZerosTypedArray(x.sizeFromShape(u.shape),p),f=e.data.get(u.dataId).values,h=u.shape[u.shape.length-1],d=a?(y,b)=>y+h-b-1:(y,b)=>y+b;for(let y=0;y<f.length;y+=h)for(let b=0;b<h;b++){let w=d(y,b);if(b===0)m[w]=i?0:f[w];else{let C=d(y,b-1);m[w]=i?f[C]+m[C]:f[w]+m[C]}}let g=e.makeTensorInfo(u.shape,p,m);if(l!=null){let y=T.getUndoAxesPermutation(l),b=ge({inputs:{x:g},backend:e,attrs:{perm:y}});return e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(u),b}return g}var E$={kernelName:yi,backendName:"cpu",kernelFunc:oH};function nH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:i,binaryOutput:a}=o;if(n.shape.length===1){let l=e.data.get(n.dataId).values,u=e.data.get(s.dataId).values,c=vp(l,u,s.dtype,s.shape,i);return e.makeTensorInfo([i],s.dtype,c)}else if(n.shape.length===2){let l=e.bufferSync(n),u=e.bufferSync(s),c=hx(l,u,i,a);return e.makeTensorInfo(c.shape,s.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`)}var $$={kernelName:Nu,backendName:"cpu",kernelFunc:nH};function sH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockSize:s,dataFormat:i}=o;x.assert(i==="NHWC",()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);let a=n.shape[0],l=n.shape[1],u=n.shape[2],c=n.shape[3],p=l*s,m=u*s,f=c/(s*s),h=e.data.get(n.dataId).values,d=new Float32Array(a*p*m*f),g=0;for(let y=0;y<a;++y)for(let b=0;b<p;++b){let w=Math.floor(b/s),C=b%s;for(let I=0;I<m;++I){let $=Math.floor(I/s),A=I%s,_=(C*s+A)*f;for(let O=0;O<f;++O){let B=O+_+c*($+u*(w+l*y));d[g++]=h[B]}}}return e.makeTensorInfo([a,p,m,f],n.dtype,d)}var A$={kernelName:Su,backendName:"cpu",kernelFunc:sH};function EC(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l,dimRoundingMode:u}=o;Y([n,s],"depthwiseConv2DNative");let c=x.computeStrides(n.shape),p=x.computeStrides(s.shape),m=l;m==null&&(m=[1,1]),x.assert(T.eitherStridesOrDilationsAreOne(i,m),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${m}'`);let f=T.computeConv2DInfo(n.shape,s.shape,i,m,a,u,!0),{filterHeight:h,filterWidth:d,dilationHeight:g,dilationWidth:y,padInfo:b}=f,w=b.left,C=b.top,I=f.outChannels/f.inChannels,$=new Ut(f.outShape,n.dtype),A=e.data.get(n.dataId).values,_=e.data.get(s.dataId).values,O=$.values;for(let P=0;P<f.batchSize;++P){let B=P*c[0],V=P*$.strides[0];for(let G=0;G<f.outHeight;++G){let H=V+G*$.strides[1],W=G*f.strideHeight-C;for(let X=0;X<h;++X){let Z=W+X*g;if(Z<0||Z>=f.inHeight)continue;let K=X*p[0],J=B+Z*c[1];for(let rt=0;rt<f.outWidth;++rt){let ot=H+rt*$.strides[2],lt=rt*f.strideWidth-w;for(let it=0;it<d;++it){let ct=lt+it*y;if(ct<0||ct>=f.inWidth)continue;let at=K+it*p[1],mt=J+ct*f.inChannels,xt=ot,Nt=at;for(let Tt=0;Tt<f.inChannels;++Tt){let Pt=A[mt+Tt];for(let Mt=0;Mt<I;++Mt)O[xt+Mt]+=Pt*_[Nt+Mt];xt+=I,Nt+=I}}}}}}return e.makeTensorInfo($.shape,$.dtype,$.values)}var D$={kernelName:bi,backendName:"cpu",kernelFunc:EC};function iH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,filterShape:c}=o;Y([n,s],"depthwiseConv2dNativeBackpropFilter");let p=T.computeConv2DInfo(n.shape,c,i,a,l,u,!0),{strideHeight:m,strideWidth:f,filterHeight:h,filterWidth:d}=p,g=new Ut(p.filterShape,"float32"),y=p.padInfo.left,b=p.padInfo.top,w=p.outChannels/p.inChannels,C=e.data.get(n.dataId).values,I=new Ut(n.shape,n.dtype,C),$=e.data.get(s.dataId).values,A=new Ut(s.shape,s.dtype,$);for(let _=0;_<h;++_){let O=Math.max(0,Math.ceil((b-_)/m)),P=Math.min(p.outHeight,(p.inHeight+b-_)/m);for(let B=0;B<d;++B){let V=Math.max(0,Math.ceil((y-B)/f)),G=Math.min(p.outWidth,(p.inWidth+y-B)/f);for(let H=0;H<p.outChannels;++H){let W=Math.trunc(H/w),X=H%w,Z=0;for(let K=0;K<p.batchSize;++K)for(let J=O;J<P;++J){let rt=_+J*m-b;for(let ot=V;ot<G;++ot){let lt=B+ot*f-y;Z+=I.get(K,rt,lt,W)*A.get(K,J,ot,H)}}g.set(Z,_,B,W,X)}}}return e.makeTensorInfo(g.shape,g.dtype,g.values)}var F$={kernelName:Iu,backendName:"cpu",kernelFunc:iH};function aH(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,inputShape:c}=o;Y([n,s],"depthwiseConv2DNativeBackpropInput");let p=x.computeStrides(n.shape),m=x.computeStrides(s.shape),f=T.computeConv2DInfo(c,s.shape,i,a,l,u,!0),h=new Ut(f.inShape,"float32"),d=h.values,[g,y,b]=h.strides,w=e.data.get(n.dataId).values,[C,I,$]=p,A=e.data.get(s.dataId).values,[_,O,P]=m,{batchSize:B,filterHeight:V,filterWidth:G,inChannels:H,inHeight:W,inWidth:X,outChannels:Z,outHeight:K,outWidth:J,strideHeight:rt,strideWidth:ot}=f,lt=V-1-f.padInfo.top,it=G-1-f.padInfo.left,ct=Z/H;for(let at=0;at<B;++at)for(let mt=0;mt<H;++mt)for(let xt=0;xt<W;++xt){let Nt=xt-lt,Tt=Math.max(0,Math.ceil(Nt/rt)),Pt=Math.min(K,(V+Nt)/rt);for(let Mt=0;Mt<X;++Mt){let ne=Mt-it,me=Math.max(0,Math.ceil(ne/ot)),ye=Math.min(J,(G+ne)/ot),ve=0;for(let ae=Tt;ae<Pt;++ae){let Fe=ae*rt-Nt;for(let Oe=me;Oe<ye;++Oe){let On=Oe*ot-ne,nr=C*at+I*ae+$*Oe,ei=_*(V-1-Fe)+O*(G-1-On)+P*mt;for(let to=0;to<ct;++to){let Ha=mt*ct+to,Mo=w[nr+Ha],Ln=A[ei+to];ve+=Mo*Ln}}}d[g*at+y*xt+b*Mt+mt]=ve}}return e.makeTensorInfo(h.shape,h.dtype,h.values)}var R$={kernelName:Tu,backendName:"cpu",kernelFunc:aH};function lH(r){let{inputs:t,backend:e}=r,{x:o}=t,n=x.sizeFromShape(o.shape),s=e.data.get(o.dataId).values,i=pt([n,n],o.dtype),a=i.values;for(let u=0;u<s.length;u++)a[u*n+u]=s[u];let l=[...o.shape,...o.shape];return e.makeTensorInfo(l,i.dtype,i.values)}var _$={kernelName:ku,backendName:"cpu",kernelFunc:lH};var O$={kernelName:wi,backendName:"cpu",kernelFunc:({inputs:r,backend:t,attrs:e})=>{let{x:o,filter:n}=r,{strides:s,pad:i,dilations:a}=e,l=t,u=l.data.get(o.dataId).values,c=o.shape.length,p=l.data.get(n.dataId).values,m=n.shape.length,{batchSize:f,inHeight:h,inWidth:d,inChannels:g,outHeight:y,outWidth:b,padInfo:w,strideHeight:C,strideWidth:I,filterHeight:$,filterWidth:A,dilationHeight:_,dilationWidth:O,outShape:P}=T.computeDilation2DInfo(o.shape,n.shape,s,i,"NHWC",a),B=x.sizeFromShape(P),V=P.length,G=x.getArrayFromDType(o.dtype,B);for(let W=0;W<f;++W)for(let X=0;X<y;++X){let Z=X*C-w.top;for(let K=0;K<b;++K){let J=K*I-w.left;for(let rt=0;rt<g;++rt){let ot=Number.MIN_SAFE_INTEGER;for(let it=0;it<$;++it){let ct=Z+it*_;if(ct>=0&&ct<h)for(let at=0;at<A;++at){let mt=J+at*O;if(mt>=0&&mt<d){let xt=x.locToIndex([W,ct,mt,rt],c,x.computeStrides(o.shape)),Nt=x.locToIndex([it,at,rt],m,x.computeStrides(n.shape)),Tt=u[xt]+p[Nt];Tt>ot&&(ot=Tt)}}}let lt=x.locToIndex([W,X,K,rt],V,x.computeStrides(P));G[lt]=ot}}}return{dataId:l.write(x.toTypedArray(G,o.dtype),P,o.dtype),shape:P,dtype:o.dtype}}};var L$={kernelName:Yp,backendName:"cpu",kernelFunc:({inputs:r,backend:t,attrs:e})=>{let{x:o,filter:n,dy:s}=r,{strides:i,pad:a,dilations:l}=e,u=t,c=x.toNestedArray(o.shape,u.data.get(o.dataId).values),p=x.toNestedArray(n.shape,u.data.get(n.dataId).values),{batchSize:m,inHeight:f,inWidth:h,inChannels:d,outHeight:g,outWidth:y,padInfo:b,strideHeight:w,strideWidth:C,filterHeight:I,filterWidth:$,dilationHeight:A,dilationWidth:_,outShape:O}=T.computeDilation2DInfo(o.shape,n.shape,i,a,"NHWC",l);x.assert(s.rank===O.length,()=>`Error in ${Yp}, dy must have the same rank as output ${O.length}, but got ${s.rank}`);let P=x.toNestedArray(O,u.data.get(s.dataId).values),B=x.makeZerosNestedTypedArray(n.shape,n.dtype);for(let G=0;G<m;++G)for(let H=0;H<g;++H){let W=H*w-b.top;for(let X=0;X<y;++X){let Z=X*C-b.left;for(let K=0;K<d;++K){let J=Number.MIN_SAFE_INTEGER,rt=0,ot=0;for(let lt=0;lt<I;++lt){let it=W+lt*A;if(it>=0&&it<f)for(let ct=0;ct<$;++ct){let at=Z+ct*_;if(at>=0&&at<h){let mt=c[G][it][at][K]+p[lt][ct][K];mt>J&&(J=mt,rt=lt,ot=ct)}}}B[rt][ot][K]+=P[G][H][X][K]}}}return{dataId:u.write(x.toTypedArray(B,o.dtype),n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}};var P$={kernelName:Xp,backendName:"cpu",kernelFunc:({inputs:r,backend:t,attrs:e})=>{let{x:o,filter:n,dy:s}=r,{strides:i,pad:a,dilations:l}=e,u=t,c=x.toNestedArray(o.shape,u.data.get(o.dataId).values),p=x.toNestedArray(n.shape,u.data.get(n.dataId).values),{batchSize:m,inHeight:f,inWidth:h,inChannels:d,outHeight:g,outWidth:y,padInfo:b,strideHeight:w,strideWidth:C,filterHeight:I,filterWidth:$,dilationHeight:A,dilationWidth:_,outShape:O}=T.computeDilation2DInfo(o.shape,n.shape,i,a,"NHWC",l);x.assert(s.rank===O.length,()=>`Error in ${Xp}, dy must have the same rank as output ${O.length}, but got ${s.rank}`);let P=x.toNestedArray(O,u.data.get(s.dataId).values),B=x.makeZerosNestedTypedArray(o.shape,o.dtype);for(let G=0;G<m;++G)for(let H=0;H<g;++H){let W=H*w-b.top;for(let X=0;X<y;++X){let Z=X*C-b.left;for(let K=0;K<d;++K){let J=Number.MIN_SAFE_INTEGER,rt=W<0?0:W,ot=Z<0?0:Z;for(let lt=0;lt<I;++lt){let it=W+lt*A;if(it>=0&&it<f)for(let ct=0;ct<$;++ct){let at=Z+ct*_;if(at>=0&&at<h){let mt=c[G][it][at][K]+p[lt][ct][K];mt>J&&(J=mt,rt=it,ot=at)}}}B[G][rt][ot][K]+=P[G][H][X][K]}}}return{dataId:u.write(x.toTypedArray(B,o.dtype),o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};function Ys(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;Y(n,"sum");let a;n.dtype==="bool"?a=_o({inputs:{x:n},backend:e,attrs:{dtype:"int32"}}):a=pr({inputs:{x:n},backend:e});let l=a.shape.length,u=x.parseAxisParam(s,a.shape),c=T.getAxesPermutation(u,l),p=u,m=a;c!=null&&(m=ge({inputs:{x:a},backend:e,attrs:{perm:c}}),p=T.getInnerMostAxes(p.length,l)),T.assertAxesAreInnerMostDims("sum",p,m.shape.length);let[f,h]=T.computeOutAndReduceShapes(m.shape,p),d=T.upcastType(m.dtype,"int32"),g=wp(e,f,d),y=x.sizeFromShape(h),b=e.data.get(g.dataId).values,w=e.data.get(m.dataId).values;for(let C=0;C<b.length;++C){let I=C*y,$=0;for(let A=0;A<y;++A)$+=w[I+A];b[C]=$}if(i){let C=T.expandShapeToKeepDim(g.shape,u),I=g;g=_t({inputs:{x:g},backend:e,attrs:{shape:C}}),e.disposeIntermediateTensorInfo(I)}return e.disposeIntermediateTensorInfo(a),c!=null&&e.disposeIntermediateTensorInfo(m),g}var z$={kernelName:Hi,backendName:"cpu",kernelFunc:Ys};function uH(r){let{inputs:t,backend:e,attrs:o}=r,{equation:n}=o,s=t,{allDims:i,summedDims:a,idDims:l}=T.decodeEinsumEquation(n,s.length);T.checkEinsumDimSizes(i.length,l,s);let{path:u,steps:c}=T.getEinsumComputePath(a,l),p=c.length,m=null,f=i.length,h=[];for(let d=0;d<p;++d){for(let g of c[d]){let{permutationIndices:y,expandDims:b}=T.getEinsumPermutation(f,l[g]),w;T.isIdentityPermutation(y)?w=s[g]:(w=ge({inputs:{x:s[g]},backend:e,attrs:{perm:y}}),h.push(w));let C=w.shape.slice();for(let I=0;I<b.length;++I)C.splice(b[I],0,1);x.arraysEqual(w.shape,C)||(w=_t({inputs:{x:w},backend:e,attrs:{shape:C}}),h.push(w)),m===null?m=w:(m=Hl({inputs:{a:w,b:m},backend:e}),h.push(m))}d<p-1&&(u[d]>=0&&(m=Ys({inputs:{x:m},backend:e,attrs:{axis:u[d]-(i.length-f),keepDims:!1}}),h.push(m)),f--)}for(let d of h)d!==m&&e.disposeIntermediateTensorInfo(d);return m}var M$={kernelName:Eu,backendName:"cpu",kernelFunc:uH};function cH(r){let{inputs:t,backend:e}=r,{dy:o,y:n}=t;Y([o,n],"eluGrad");let s=new Float32Array(x.sizeFromShape(n.shape)),i=e.data.get(n.dataId).values,a=e.data.get(o.dataId).values;for(let l=0;l<i.length;++l){let u=i[l];u>=1?s[l]=a[l]:s[l]=a[l]*(u+1)}return e.makeTensorInfo(n.shape,"float32",s)}var B$={kernelName:$u,backendName:"cpu",kernelFunc:cH};var pH=T.ERF_P,mH=T.ERF_A1,fH=T.ERF_A2,hH=T.ERF_A3,dH=T.ERF_A4,gH=T.ERF_A5,xH=bt(Qn,r=>{let t=Math.sign(r),e=Math.abs(r),o=1/(1+pH*e);return t*(1-((((gH*o+dH)*o+hH)*o+fH)*o+mH)*o*Math.exp(-e*e))}),V$={kernelName:Qn,backendName:"cpu",kernelFunc:xH};function Tp(r){let{inputs:t,backend:e,attrs:o}=r,{input:n}=t,{dim:s}=o,i=n.shape.length,a=n.shape.slice(),l=s;return s<0&&(x.assert(-(i+1)<=s,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+s+1),a.splice(l,0,1),_t({inputs:{x:n},backend:e,attrs:{shape:a}})}var G$={kernelName:Ci,backendName:"cpu",kernelFunc:Tp};var yH=zt((r,t)=>r/t),Hf=Vt(Zn,yH),qf={kernelName:Zn,backendName:"cpu",kernelFunc:Hf};function Rx(r,t,e){let o=r.shape,n=o[0],s=o[1],i=e.data.get(r.dataId),a=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[n,s],c=x.sizeFromShape(u),p=x.getTypedArrayFromDType("float32",c),m=x.getTypedArrayFromDType("float32",c);for(let g=0;g<n;g++){let y=Lo({inputs:{x:a},backend:e,attrs:{begin:[g,0],size:[1,s]}}),b=Lo({inputs:{x:l},backend:e,attrs:{begin:[g,0],size:[1,s]}}),w=He({inputs:{real:y,imag:b},backend:e}),{real:C,imag:I}=bH(w,t,e),$=T.mergeRealAndImagArrays(C,I);for(let A=0;A<s;A++){let _=T.getComplexWithIndex($,A);p[g*s+A]=_.real,m[g*s+A]=_.imag}e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(b),e.disposeIntermediateTensorInfo(w)}let f=e.makeTensorInfo(u,"float32",p),h=e.makeTensorInfo(u,"float32",m),d=He({inputs:{real:f,imag:h},backend:e});return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),d}function bH(r,t,e){let o=x.sizeFromShape(r.shape),n=e.data.get(r.dataId),s=e.data.get(n.complexTensorInfos.real.dataId).values,i=e.data.get(n.complexTensorInfos.imag.dataId).values;if(wH(o)){let a=$C(s,i,o,t,e),l=[r.shape[0],r.shape[1]];if(t){let u=e.makeTensorInfo(l,"float32",a.real),c=e.makeTensorInfo(l,"float32",a.imag),p=e.makeTensorInfo([],"float32",x.createScalarValue(o,"float32")),m=pr({inputs:{x:p},backend:e}),f=qf.kernelFunc({inputs:{a:u,b:p},backend:e}),h=qf.kernelFunc({inputs:{a:c,b:m},backend:e}),d=e.data.get(f.dataId).values,g=e.data.get(h.dataId).values;return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),{real:d,imag:g}}return a}else{let a=T.mergeRealAndImagArrays(s,i),l=CH(a,o,t);return T.splitRealAndImagArrays(l)}}function wH(r){return(r&r-1)===0}function $C(r,t,e,o,n){if(e===1)return{real:r,imag:t};let s=T.mergeRealAndImagArrays(r,t),i=e/2,a=T.complexWithEvenIndex(s),l=a.real,u=a.imag,c=[l.length],p=n.makeTensorInfo(c,"float32",l),m=n.makeTensorInfo(c,"float32",u),f=He({inputs:{real:p,imag:m},backend:n}),h=T.complexWithOddIndex(s),d=h.real,g=h.imag,y=[d.length],b=n.makeTensorInfo(y,"float32",d),w=n.makeTensorInfo(y,"float32",g),C=He({inputs:{real:b,imag:w},backend:n}),I=$C(l,u,i,o,n),$=I.real,A=I.imag,_=[$.length],O=n.makeTensorInfo(_,"float32",$),P=n.makeTensorInfo(_,"float32",A),B=He({inputs:{real:O,imag:P},backend:n}),V=$C(d,g,i,o,n),G=V.real,H=V.imag,W=[G.length],X=n.makeTensorInfo(W,"float32",G),Z=n.makeTensorInfo(W,"float32",H),K=He({inputs:{real:X,imag:Z},backend:n}),J=T.exponents(e,o),rt=[J.real.length],ot=n.makeTensorInfo(rt,"float32",J.real),lt=n.makeTensorInfo(rt,"float32",J.imag),it=He({inputs:{real:ot,imag:lt},backend:n}),ct=Hl({inputs:{a:it,b:K},backend:n}),at=Dn({inputs:{a:B,b:ct},backend:n}),mt=Wf({inputs:{a:B,b:ct},backend:n}),xt=Ro({inputs:{input:at},backend:n}),Nt=Ro({inputs:{input:mt},backend:n}),Tt=Fn({inputs:{input:at},backend:n}),Pt=Fn({inputs:{input:mt},backend:n}),Mt=La({inputs:[xt,Nt],backend:n,attrs:{axis:0}}),ne=La({inputs:[Tt,Pt],backend:n,attrs:{axis:0}}),me=n.data.get(Mt.dataId).values,ye=n.data.get(ne.dataId).values;return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(C),n.disposeIntermediateTensorInfo(O),n.disposeIntermediateTensorInfo(P),n.disposeIntermediateTensorInfo(B),n.disposeIntermediateTensorInfo(X),n.disposeIntermediateTensorInfo(Z),n.disposeIntermediateTensorInfo(K),n.disposeIntermediateTensorInfo(ot),n.disposeIntermediateTensorInfo(lt),n.disposeIntermediateTensorInfo(it),n.disposeIntermediateTensorInfo(ct),n.disposeIntermediateTensorInfo(at),n.disposeIntermediateTensorInfo(mt),n.disposeIntermediateTensorInfo(xt),n.disposeIntermediateTensorInfo(Tt),n.disposeIntermediateTensorInfo(Nt),n.disposeIntermediateTensorInfo(Pt),n.disposeIntermediateTensorInfo(Mt),n.disposeIntermediateTensorInfo(ne),{real:me,imag:ye}}function CH(r,t,e){let o=new Float32Array(t*2);for(let n=0;n<t;n++){let s=0,i=0;for(let a=0;a<t;a++){let l=T.exponent(n*a,t,e),u=T.getComplexWithIndex(r,a);s+=u.real*l.real-u.imag*l.imag,i+=u.real*l.imag+u.imag*l.real}e&&(s/=t,i/=t),T.assignToTypedArray(o,s,i,n)}return o}function vH(r){let{inputs:t,backend:e}=r,{input:o}=t,n=x.sizeFromShape(o.shape),s=o.shape[o.shape.length-1],i=n/s,a=_t({inputs:{x:o},backend:e,attrs:{shape:[i,s]}}),l=Rx(a,!1,e),u=_t({inputs:{x:l},backend:e,attrs:{shape:o.shape}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(l),u}var W$={kernelName:Au,backendName:"cpu",kernelFunc:vH};function Kf(r){let{backend:t,attrs:e}=r,{shape:o,value:n,dtype:s}=e,i=s||x.inferDtype(n),a=x.getArrayFromDType(i,x.sizeFromShape(o));return NH(a,n,i),t.makeTensorInfo(o,i,a)}var U$={kernelName:Du,backendName:"cpu",kernelFunc:Kf};function NH(r,t,e){r.fill(t)}var H$={kernelName:Fu,backendName:"cpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{image:o}=r,n=e,s=x.getTypedArrayFromDType(o.dtype,x.sizeFromShape(o.shape)),[i,a,l,u]=o.shape,c=n.data.get(o.dataId).values;for(let m=0;m<i;m++){let f=m*l*a*u;for(let h=0;h<a;h++){let d=h*(l*u);for(let g=0;g<l;g++){let y=g*u;for(let b=0;b<u;b++){let w=Math.round(l-g-1),C=f+d+y+b,I=c[C];if(w>=0&&w<l){let $=w*u,A=f+d+$+b;I=c[A]}s[C]=I}}}}return{dataId:n.write(s,o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};var SH=zt((r,t)=>Math.floor(r/t)),IH=Vt(os,SH,null,"int32"),q$={kernelName:os,backendName:"cpu",kernelFunc:IH};function TH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:h}=o,d=kC({inputs:{x:n,filter:s},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m}});if(i){let g=d;if(c==="NCHW"&&i.shape.length===1&&i.shape[0]!==1){let y=_t({inputs:{x:i},backend:e,attrs:{shape:[i.shape[0],1,1]}});d=Dn({inputs:{a:d,b:y},backend:e}),e.disposeIntermediateTensorInfo(y)}else d=Dn({inputs:{a:d,b:i},backend:e});e.disposeIntermediateTensorInfo(g)}if(f){let g=d;if(c==="NCHW"&&f==="prelu"&&a.shape.length===1&&a.shape[0]!==1){let y=_t({inputs:{x:a},backend:e,attrs:{shape:[a.shape[0],1,1]}});d=ql(e,d,f,y,h),e.disposeIntermediateTensorInfo(y)}else d=ql(e,d,f,a,h);e.disposeIntermediateTensorInfo(g)}return d}var K$={kernelName:sl,backendName:"cpu",kernelFunc:TH};function kH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:h}=o,d=EC({inputs:{x:n,filter:s},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m}});if(i){let g=d;d=Dn({inputs:{a:d,b:i},backend:e}),e.disposeIntermediateTensorInfo(g)}if(f){let g=d;d=ql(e,d,f,a,h),e.disposeIntermediateTensorInfo(g)}return d}var j$={kernelName:il,backendName:"cpu",kernelFunc:kH};function EH(r){let{inputs:t,backend:e}=r,{params:o,indices:n}=t,s=x.sizeFromShape(o.shape),i=n.shape,a=i[i.length-1],[l,u,c,p]=T.prepareAndValidate(o,n);if(u===0)return e.makeTensorInfo(l,o.dtype,[]);let m=e.data.get(n.dataId).values,f=e.bufferSync(o),h=gx(m,f,o.dtype,u,a,c,p,o.shape,s);return e.makeTensorInfo(l,o.dtype,h.values)}var X$={kernelName:Ru,backendName:"cpu",kernelFunc:EH};function $H(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,indices:s}=t,{axis:i,batchDims:a}=o;Y([n,s],"gatherV2");let l=x.parseAxisParam(i,n.shape)[0],u=e.data.get(s.dataId).values,c=n.shape[l];for(let C=0;C<u.length;++C){let I=u[C];x.assert(I<=c-1&&I>=0,()=>`GatherV2: the index value ${I} is not in [0, ${c-1}]`)}let p=a;a==null&&(p=0);let m=x.sizeFromShape(s.shape),f=T.segment_util.collectGatherOpShapeInfo(n,s,l,p),h=_t({inputs:{x:n},backend:e,attrs:{shape:[f.batchSize,f.outerSize,f.dimSize,f.sliceSize]}}),d=_t({inputs:{x:s},backend:e,attrs:{shape:[f.batchSize,m/f.batchSize]}}),g=[f.batchSize,f.outerSize,m/f.batchSize,f.sliceSize],y=e.bufferSync(d),b=e.bufferSync(h),w=xx(b,y,g);return e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.makeTensorInfo(f.outputShape,w.dtype,w.values)}var Y$={kernelName:Ni,backendName:"cpu",kernelFunc:$H};function AH(r){let{inputs:t,backend:e}=r,{input:o}=t,n=x.sizeFromShape(o.shape),s=o.shape[o.shape.length-1],i=n/s,a=_t({inputs:{x:o},backend:e,attrs:{shape:[i,s]}}),l=Rx(a,!0,e),u=_t({inputs:{x:l},backend:e,attrs:{shape:o.shape}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(l),u}var Z$={kernelName:_u,backendName:"cpu",kernelFunc:AH};var DH=bt(ss,r=>Number.isFinite(r)?1:0,"bool"),J$={kernelName:ss,backendName:"cpu",kernelFunc:DH};var FH=bt(is,r=>Math.abs(r)===1/0?1:0,"bool"),Q$={kernelName:is,backendName:"cpu",kernelFunc:FH};var RH=bt(as,r=>Number.isNaN(r)?1:0,"bool"),tA={kernelName:as,backendName:"cpu",kernelFunc:RH};function _H(r){let{backend:t,attrs:e}=r,{start:o,stop:n,num:s}=e,i=yx(o,n,s);return t.makeTensorInfo([i.length],"float32",i)}var eA={kernelName:Lu,backendName:"cpu",kernelFunc:_H};var OH=bt(us,r=>Math.log1p(r)),rA={kernelName:us,backendName:"cpu",kernelFunc:OH};var LH=zt((r,t)=>r&&t),PH=Vt(tl,LH,null,"bool"),oA={kernelName:tl,backendName:"cpu",kernelFunc:PH};var zH=bt(el,r=>r?0:1,"bool"),nA={kernelName:el,backendName:"cpu",kernelFunc:zH};var MH=zt((r,t)=>r||t),BH=Vt(rl,MH,null,"bool"),sA={kernelName:rl,backendName:"cpu",kernelFunc:BH};function VH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{depthRadius:s,bias:i,alpha:a,beta:l}=o;Y(n,"LRN");let u=n.shape[3],c=u-1,p=e.data.get(n.dataId).values,m=x.sizeFromShape(n.shape),f=new Float32Array(m);function h(d){let g=d%u,y=d-g+Math.max(0,g-s),b=d-g+Math.min(g+s,c),w=0;for(;y<=b;y++){let C=p[y];w+=C*C}return w}for(let d=0;d<m;d++){let g=h(d),y=p[d]*Math.pow(i+a*g,-l);f[d]=y}return e.makeTensorInfo(n.shape,n.dtype,f)}var iA={kernelName:Ii,backendName:"cpu",kernelFunc:VH};function GH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,y:s,dy:i}=t,{depthRadius:a,bias:l,alpha:u,beta:c}=o;Y(i,"LRNGrad");let p=x.sizeFromShape(i.shape),m=i.shape[3],f=e.data.get(i.dataId).values,h=e.data.get(n.dataId).values,d=e.data.get(s.dataId).values,g=new Float32Array(p),y=p;for(let b=0;b<y;b++){let w=b%m,C=b-w+Math.max(0,w-a),I=b-w+Math.min(m,w+a+1),$=0;for(let A=C;A<I;A++)$+=Math.pow(h[A],2);$=u*$+l;for(let A=C;A<I;A++){let _=-2*u*c*h[A]*d[b]/$;b===A&&(_+=Math.pow($,-c)),_*=f[b],g[A]+=_}}return e.makeTensorInfo(i.shape,n.dtype,g)}var aA={kernelName:Pu,backendName:"cpu",kernelFunc:GH};function AC(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reductionIndices:s,keepDims:i}=o,a=e,l=n.shape,u=l.length,c=x.parseAxisParam(s,l),p=c,m=T.getAxesPermutation(p,u),f=a.data.get(n.dataId).values;if(m!=null){let C=new Array(u);for(let I=0;I<C.length;I++)C[I]=l[m[I]];f=Np(f,l,n.dtype,m,C),p=T.getInnerMostAxes(p.length,u),l=C}Y(n,"max"),T.assertAxesAreInnerMostDims("max",p,u);let[h,d]=T.computeOutAndReduceShapes(l,p),g=x.sizeFromShape(d),y=bx(f,g,h,n.dtype),b=a.write(y,h,n.dtype),w=h;return i&&(w=T.expandShapeToKeepDim(h,c)),{dataId:b,shape:w,dtype:n.dtype}}var lA={kernelName:Ti,backendName:"cpu",kernelFunc:AC};function WH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;Y(n,"maxPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;x.assert(T.eitherStridesOrDilationsAreOne(i,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=T.computePool2DInfo(n.shape,s,i,u,a,l),p;if(c.filterWidth===1&&c.filterHeight===1&&x.arraysEqual(c.inShape,c.outShape))p=pr({inputs:{x:n},backend:e});else{let m=e.data.get(n.dataId).values,f=x.computeStrides(n.shape),h=Ip(m,n.shape,n.dtype,f,c,"max");p=e.makeTensorInfo(c.outShape,n.dtype,h.values)}return p}var uA={kernelName:ki,backendName:"cpu",kernelFunc:WH};function UH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=o;Y(n,"maxPool3d");let c=T.computePool3DInfo(n.shape,s,i,1,a,l,u),p=e.data.get(n.dataId).values,m=Fx(p,n.shape,n.dtype,x.computeStrides(n.shape),c,"max");return e.makeTensorInfo(m.shape,"float32",m.values)}var cA={kernelName:Ei,backendName:"cpu",kernelFunc:UH};function HH(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,{filterSize:i,strides:a,pad:l,dimRoundingMode:u}=o;Y([n,s],"maxPool3DGrad");let c=T.computePool3DInfo(s.shape,i,a,1,l,u),p=e.bufferSync(s),m=s$(p,c),f=c.strideDepth,h=c.strideHeight,d=c.strideWidth,g=c.dilationDepth,y=c.dilationHeight,b=c.dilationWidth,w=c.effectiveFilterDepth,C=c.effectiveFilterHeight,I=c.effectiveFilterWidth,$=w-1-c.padInfo.front,A=I-1-c.padInfo.left,_=C-1-c.padInfo.top,O=pt(s.shape,"float32"),P=e.bufferSync(n);for(let B=0;B<c.batchSize;++B)for(let V=0;V<c.inChannels;++V)for(let G=0;G<c.inDepth;++G)for(let H=0;H<c.inHeight;++H)for(let W=0;W<c.inWidth;++W){let X=G-$,Z=H-_,K=W-A,J=0;for(let rt=0;rt<w;rt+=g){let ot=(X+rt)/f;if(!(ot<0||ot>=c.outDepth||Math.floor(ot)!==ot))for(let lt=0;lt<C;lt+=y){let it=(Z+lt)/h;if(!(it<0||it>=c.outHeight||Math.floor(it)!==it))for(let ct=0;ct<I;ct+=b){let at=(K+ct)/d;if(at<0||at>=c.outWidth||Math.floor(at)!==at)continue;let mt=w*C*I-1-m.get(B,ot,it,at,V),xt=rt*C*I+lt*I+ct,Nt=mt===xt?1:0;if(Nt===0)continue;J+=P.get(B,ot,it,at,V)*Nt}}}O.set(J,B,G,H,W,V)}return e.makeTensorInfo(O.shape,O.dtype,O.values)}var pA={kernelName:Mu,backendName:"cpu",kernelFunc:HH};function qH(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s,output:i}=t,a=s;Y([s,i],"maxPoolGrad");let{filterSize:l,strides:u,pad:c,dimRoundingMode:p}=o,m=T.computePool2DInfo(a.shape,l,u,1,c,p),f=e.data.get(a.dataId).values,h=pt(m.outShape,a.dtype,Dx(f,a.shape,a.dtype,m).values),d=m.strideHeight,g=m.strideWidth,y=m.dilationHeight,b=m.dilationWidth,w=m.effectiveFilterHeight,C=m.effectiveFilterWidth,I=C-1-m.padInfo.left,$=w-1-m.padInfo.top,A=pt(a.shape,"float32"),_=e.data.get(n.dataId).values,O=pt(n.shape,"float32",_);for(let P=0;P<m.batchSize;++P)for(let B=0;B<m.inChannels;++B)for(let V=0;V<m.inHeight;++V)for(let G=0;G<m.inWidth;++G){let H=V-$,W=G-I,X=0;for(let Z=0;Z<w;Z+=y){let K=(H+Z)/d;if(!(K<0||K>=m.outHeight||Math.floor(K)!==K))for(let J=0;J<C;J+=b){let rt=(W+J)/g;if(rt<0||rt>=m.outWidth||Math.floor(rt)!==rt)continue;let ot=w*C-1-h.get(P,K,rt,B),lt=Z*C+J,it=ot===lt?1:0;if(it===0)continue;X+=O.get(P,K,rt,B)*it}}A.set(X,P,V,G,B)}return e.makeTensorInfo(A.shape,A.dtype,A.values)}var mA={kernelName:zu,backendName:"cpu",kernelFunc:qH};function fA(r,t,e,o,n){let s=x.computeStrides(t),i=Ip(r,t,e,s,n,"max"),a=Dx(r,t,e,n,!0,o);return[i.values,a.values]}var hA={kernelName:Bu,backendName:"cpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o}=r,{filterSize:n,strides:s,pad:i,includeBatchInIndex:a}=t,l=e;Y(o,"MaxPoolWithArgmax");let u=l.data.get(o.dataId).values,c=T.computePool2DInfo(o.shape,n,s,[1,1],i),[p,m]=fA(u,o.shape,o.dtype,a,c),f=l.write(p,c.outShape,o.dtype),h=l.write(m,c.outShape,o.dtype);return[{dataId:f,shape:c.outShape,dtype:o.dtype},{dataId:h,shape:c.outShape,dtype:"int32"}]}};function KH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=x.parseAxisParam(s,n.shape),u=T.computeOutAndReduceShapes(n.shape,a)[1],c=x.sizeFromShape(u),p=[],m=e.makeTensorInfo([],"float32",new Float32Array([c]));p.push(m);let f=_o({inputs:{x:n},backend:e,attrs:{dtype:"float32"}});p.push(f);let h=Hf({inputs:{a:f,b:m},backend:e});p.push(h);let d=Ys({inputs:{x:h},backend:e,attrs:{axis:s,keepDims:i}});return p.forEach(g=>e.disposeIntermediateTensorInfo(g)),d}var dA={kernelName:$i,backendName:"cpu",kernelFunc:KH};function jH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;Y(n,"min");let a=x.parseAxisParam(s,n.shape),l=a,u=T.getAxesPermutation(l,n.shape.length),c=n;u!=null&&(c=ge({inputs:{x:n},backend:e,attrs:{perm:u}}),l=T.getInnerMostAxes(l.length,n.shape.length)),T.assertAxesAreInnerMostDims("min",l,c.shape.length);let[p,m]=T.computeOutAndReduceShapes(c.shape,l),f=x.sizeFromShape(m),h=x.makeZerosTypedArray(x.sizeFromShape(p),c.dtype),d=e.data.get(c.dataId).values;for(let y=0;y<h.length;++y){let b=y*f,w=d[b];for(let C=0;C<f;++C){let I=d[b+C];(Number.isNaN(I)||I<w)&&(w=I)}h[y]=w}u!=null&&e.disposeIntermediateTensorInfo(c);let g=e.makeTensorInfo(p,c.dtype,h);if(i){let y=T.expandShapeToKeepDim(p,a),b=_t({inputs:{x:g},backend:e,attrs:{shape:y}});return e.disposeIntermediateTensorInfo(g),b}return g}var gA={kernelName:Ai,backendName:"cpu",kernelFunc:jH};function XH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{paddings:s,mode:i}=o;Y(n,"mirrorPad");let a=s.map((w,C)=>w[0]+n.shape[C]+w[1]),l=s.map(w=>w[0]),u=s.map((w,C)=>w[0]+n.shape[C]),c=i==="reflect"?0:1,p=e.data.get(n.dataId).values,m=n.shape.length,f=x.computeStrides(n.shape),h=x.sizeFromShape(a),d=a.length,g=x.computeStrides(a),y=x.getTypedArrayFromDType(n.dtype,h);for(let w=0;w<h;w++){let C=x.indexToLoc(w,d,g);for(let $=0;$<d;$++)C[$]<l[$]?C[$]=l[$]*2-C[$]-c:C[$]>=u[$]&&(C[$]=(u[$]-1)*2-C[$]+c);C=C.map(($,A)=>$-l[A]);let I=x.locToIndex(C,m,f);y[w]=p[I]}return{dataId:e.write(y,a,n.dtype),shape:a,dtype:n.dtype}}var xA={kernelName:Di,backendName:"cpu",kernelFunc:XH};var YH=zt((r,t)=>{let e=r%t;return r<0&&t<0||r>=0&&t>=0?e:(e+t)%t}),ZH=Vt(ms,YH),yA={kernelName:ms,backendName:"cpu",kernelFunc:ZH};var wA=Wp(cm());function DC(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{dim:s}=o,i=n.shape.length,a=s;if(a===-1&&(a=i-1),a!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${a}`);let l=x.parseAxisParam([a],n.shape),u=AC({inputs:{x:n},backend:e,attrs:{reductionIndices:l,keepDims:!1}}),c=T.expandShapeToKeepDim(u.shape,l),p=_t({inputs:{x:u},backend:e,attrs:{shape:c}}),m=Wf({inputs:{a:n,b:p},backend:e}),f=rC({inputs:{x:m},backend:e}),h=Ys({inputs:{x:f},backend:e,attrs:{axis:l,keepDims:!1}}),d=_t({inputs:{x:h},backend:e,attrs:{shape:c}}),g=Hf({inputs:{a:f,b:d},backend:e});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),g}var bA={kernelName:ji,backendName:"cpu",kernelFunc:DC};function JH(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{numSamples:s,seed:i,normalized:a}=o;Y(n,"multinomial");let l=a?n:DC({inputs:{logits:n},backend:e,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],p=e.data.get(l.dataId).values,m=[u,s],f=x.makeZerosTypedArray(x.sizeFromShape(m),"int32");for(let h=0;h<u;++h){let d=h*c,g=new Float32Array(c-1);g[0]=p[d];for(let w=1;w<g.length;++w)g[w]=g[w-1]+p[d+w];let y=wA.alea(i.toString()),b=h*s;for(let w=0;w<s;++w){let C=y();f[b+w]=g.length;for(let I=0;I<g.length;I++)if(C<g[I]){f[b+w]=I;break}}}return a||e.disposeIntermediateTensorInfo(l),e.makeTensorInfo(m,"int32",f)}var CA={kernelName:Vu,backendName:"cpu",kernelFunc:JH};var QH=ur.nonMaxSuppressionV3Impl;function tq(r){let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l}=o;Y(n,"NonMaxSuppression");let u=e.data.get(n.dataId).values,c=e.data.get(s.dataId).values,{selectedIndices:p}=QH(u,c,i,a,l);return e.makeTensorInfo([p.length],"int32",new Int32Array(p))}var vA={kernelName:Gu,backendName:"cpu",kernelFunc:tq};var eq=ur.nonMaxSuppressionV4Impl;function rq(r){let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,padToMaxOutputSize:u}=o;Y(n,"NonMaxSuppressionPadded");let c=e.data.get(n.dataId).values,p=e.data.get(s.dataId).values,{selectedIndices:m,validOutputs:f}=eq(c,p,i,a,l,u);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([],"int32",new Int32Array([f]))]}var NA={kernelName:Wu,backendName:"cpu",kernelFunc:rq};var oq=ur.nonMaxSuppressionV5Impl;function nq(r){let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,softNmsSigma:u}=o;Y(n,"NonMaxSuppressionWithScore");let c=e.data.get(n.dataId).values,p=e.data.get(s.dataId).values,m=i,f=a,h=l,d=u,{selectedIndices:g,selectedScores:y}=oq(c,p,m,f,h,d);return[e.makeTensorInfo([g.length],"int32",new Int32Array(g)),e.makeTensorInfo([y.length],"float32",new Float32Array(y))]}var SA={kernelName:Uu,backendName:"cpu",kernelFunc:nq};function sq(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n}=t,{depth:s,onValue:i,offValue:a}=o;Y(n,"oneHot");let l=x.sizeFromShape(n.shape),u=new Float32Array(l*s);u.fill(a);let c=e.data.get(n.dataId).values;for(let p=0;p<l;++p)c[p]>=0&&c[p]<s&&(u[p*s+c[p]]=i);return e.makeTensorInfo([...n.shape,s],"int32",u)}var IA={kernelName:_i,backendName:"cpu",kernelFunc:sq};function jf(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="string")throw new Error("zerosLike is not supported for string tensors");if(o.dtype==="complex64"){let n=Ro({inputs:{input:o},backend:e}),s=jf({inputs:{x:n},backend:e}),i=Fn({inputs:{input:o},backend:e}),a=jf({inputs:{x:i},backend:e}),l=He({inputs:{real:s,imag:a},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}else return Kf({backend:e,attrs:{shape:o.shape,value:0,dtype:o.dtype}})}var TA={kernelName:Zi,backendName:"cpu",kernelFunc:jf};function kA(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="string")throw new Error("onesLike is not supported for string tensors");if(o.dtype==="complex64"){let n=Ro({inputs:{input:o},backend:e}),s=kA({inputs:{x:n},backend:e}),i=Fn({inputs:{input:o},backend:e}),a=jf({inputs:{x:i},backend:e}),l=He({inputs:{real:s,imag:a},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}else return Kf({backend:e,attrs:{shape:o.shape,value:1,dtype:o.dtype}})}var EA={kernelName:Ri,backendName:"cpu",kernelFunc:kA};function FC(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o;if(t.length===1)return Tp({inputs:{input:t[0]},backend:e,attrs:{dim:n}});let s=t[0].shape,i=t[0].dtype;t.forEach(c=>{x.assertShapesMatch(s,c.shape,"All tensors passed to stack must have matching shapes"),x.assert(i===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});let a=[],l=t.map(c=>{let p=Tp({inputs:{input:c},backend:e,attrs:{dim:n}});return a.push(p),p}),u=La({inputs:l,backend:e,attrs:{axis:n}});return a.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}var $A={kernelName:Oi,backendName:"cpu",kernelFunc:FC};function iq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{paddings:s,constantValue:i}=o;Y(n,"pad");let a=s.map((b,w)=>b[0]+n.shape[w]+b[1]),l=s.map(b=>b[0]),u=e.data.get(n.dataId).values,c=x.sizeFromShape(n.shape),p=n.shape.length,m=x.computeStrides(n.shape),f=x.sizeFromShape(a),h=a.length,d=x.computeStrides(a),g=x.getTypedArrayFromDType(n.dtype,f);i!==0&&g.fill(i);for(let b=0;b<c;b++){let C=x.indexToLoc(b,p,m).map(($,A)=>$+l[A]),I=x.locToIndex(C,h,d);g[I]=u[b]}return{dataId:e.write(g,a,n.dtype),shape:a,dtype:n.dtype}}var _x={kernelName:Li,backendName:"cpu",kernelFunc:iq};var aq=zt((r,t)=>Math.pow(r,t)),lq=Vt(hs,aq),AA={kernelName:hs,backendName:"cpu",kernelFunc:lq};function uq(r){let{backend:t,attrs:e}=r,{start:o,stop:n,dtype:s,step:i}=e,a=wx(o,n,i,s);return t.makeTensorInfo([a.length],s,a)}var DA={kernelName:Hu,backendName:"cpu",kernelFunc:uq};var cq=bt(ds,r=>1/r),FA={kernelName:ds,backendName:"cpu",kernelFunc:cq};function pq(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o;Y(n,"resizeBilinear");let l=x.computeStrides(n.shape),[u,c]=a,[p,m,f,h]=n.shape,d=e.data.get(n.dataId).values,g=new Float32Array(x.sizeFromShape([p,u,c,h])),y=[s&&u>1?m-1:m,s&&c>1?f-1:f],b=[s&&u>1?u-1:u,s&&c>1?c-1:c],w=0,C=y[0]/b[0],I=y[1]/b[1];for(let $=0;$<p;$++)for(let A=0;A<u;A++){let _;i?_=C*(A+.5)-.5:_=C*A;let O=Math.max(0,Math.floor(_)),P=_-O,B=Math.min(m-1,Math.ceil(_)),V=$*l[0]+O*l[1],G=$*l[0]+B*l[1];for(let H=0;H<c;H++){let W;i?W=I*(H+.5)-.5:W=I*H;let X=Math.max(0,Math.floor(W)),Z=W-X,K=Math.min(f-1,Math.ceil(W)),J=V+X*l[2],rt=G+X*l[2],ot=V+K*l[2],lt=G+K*l[2];for(let it=0;it<h;it++){let ct=d[J+it],at=d[rt+it],mt=d[ot+it],xt=d[lt+it],Nt=ct+(mt-ct)*Z,Tt=at+(xt-at)*Z,Pt=Nt+(Tt-Nt)*P;g[w++]=Pt}}}return e.makeTensorInfo([p,u,c,h],"float32",g)}var RA={kernelName:Vi,backendName:"cpu",kernelFunc:pq};function mq(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:i}=o;Y([s,n],"resizeBilinearGrad");let a=x.computeStrides(n.shape),[l,u,c,p]=n.shape,[,m,f]=s.shape,h=new Float32Array(l*u*c*p),d=[i&&m>1?u-1:u,i&&f>1?c-1:c],g=[i&&m>1?m-1:m,i&&f>1?f-1:f],y=d[0]/g[0],b=d[1]/g[1],w=e.data.get(s.dataId).values,C=0;for(let I=0;I<l;I++){let $=I*a[0];for(let A=0;A<m;A++){let _=A*y,O=Math.floor(_),P=Math.min(Math.ceil(_),u-1),B=$+O*a[1],V=$+P*a[1],G=_-O,H=1-G;for(let W=0;W<f;W++){let X=W*b,Z=Math.floor(X),K=Math.min(Math.ceil(X),c-1),J=X-Z,rt=1-J,ot=B+Z*a[2],lt=B+K*a[2],it=V+Z*a[2],ct=V+K*a[2],at=H*rt,mt=H*J,xt=G*rt,Nt=G*J;for(let Tt=0;Tt<p;Tt++){let Pt=w[C++];h[ot+Tt]+=Pt*at,h[lt+Tt]+=Pt*mt,h[it+Tt]+=Pt*xt,h[ct+Tt]+=Pt*Nt}}}}return e.makeTensorInfo([l,c,u,p],"float32",h)}var _A={kernelName:ju,backendName:"cpu",kernelFunc:mq};function fq(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o;Y(n,"resizeNearestNeighbor");let l=x.computeStrides(n.shape),[u,c]=a,[p,m,f,h]=n.shape,d=e.data.get(n.dataId).values,g=new Float32Array(p*u*c*h),y=[s&&u>1?m-1:m,s&&c>1?f-1:f],b=[s&&u>1?u-1:u,s&&c>1?c-1:c],w=y[0]/b[0],C=y[1]/b[1],I=0;for(let $=0;$<p;$++){let A=$*l[0];for(let _=0;_<u;_++){let O=i?w*(_+.5):w*_,P=Math.min(m-1,s?Math.round(O):Math.floor(O));i&&(P=Math.max(0,P));let B=A+P*l[1];for(let V=0;V<c;V++){let G=i?C*(V+.5):C*V,H=Math.min(f-1,s?Math.round(G):Math.floor(G));i&&(H=Math.max(0,H));let W=B+H*l[2];for(let X=0;X<h;X++){let Z=d[W+X];g[I++]=Z}}}}return e.makeTensorInfo([p,u,c,h],n.dtype,g)}var OA={kernelName:Bi,backendName:"cpu",kernelFunc:fq};function hq(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:i}=o;Y([s,n],"resizeNearestNeighborGrad");let a=x.computeStrides(n.shape),l=x.computeStrides(s.shape),[u,c,p,m]=n.shape,[,f,h]=s.shape,d=new Float32Array(u*c*p*m),g=e.data.get(s.dataId).values,y=[i&&f>1?c-1:c,i&&h>1?p-1:p],b=[i&&f>1?f-1:f,i&&h>1?h-1:h],w=y[0]/b[0],C=y[1]/b[1],I=1/w,$=1/C,A=Math.ceil(I)*2+2,_=Math.ceil($)*2+2;for(let O=0;O<u;O++){let P=O*a[0];for(let B=0;B<c;B++){let V=P+B*a[1],G=Math.floor(B*I),H=Math.floor(G-A/2);for(let W=0;W<p;W++){let X=V+W*a[2],Z=Math.floor(W*$),K=Math.floor(Z-_/2);for(let J=0;J<m;J++){let rt=0;for(let ot=0;ot<A;ot++){let lt=ot+H;if(lt<0||lt>=f)continue;let it=P+lt*l[1],ct=lt*w,at=Math.min(c-1,i?Math.round(ct):Math.floor(ct));if(B===at)for(let mt=0;mt<_;mt++){let xt=mt+K;if(xt<0||xt>=h)continue;let Nt=it+xt*l[2],Tt=xt*C,Pt=Math.min(p-1,i?Math.round(Tt):Math.floor(Tt));W===Pt&&(rt+=g[Nt+J])}}d[X+J]=rt}}}}return e.makeTensorInfo(n.shape,n.dtype,d)}var LA={kernelName:Ku,backendName:"cpu",kernelFunc:hq};function dq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dims:s}=o;Y(n,"reverse");let i=n.shape.length,a=x.parseAxisParam(s,n.shape);if(i===0)return pr({inputs:{x:n},backend:e});let l=new Ut(n.shape,n.dtype),u=e.bufferSync(n);for(let c=0;c<l.size;c++){let p=l.indexToLoc(c),m=p.slice();a.forEach(f=>m[f]=n.shape[f]-1-m[f]),l.set(u.get(...m),...p)}return e.makeTensorInfo(l.shape,l.dtype,l.values)}var PA={kernelName:Gi,backendName:"cpu",kernelFunc:dq};var zA={kernelName:cc,backendName:"cpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{image:o}=r,{radians:n,fillValue:s,center:i}=t,a=e,l=x.getTypedArrayFromDType(o.dtype,x.sizeFromShape(o.shape)),[u,c,p,m]=o.shape,[f,h]=T.getImageCenter(i,c,p),d=255,g=Math.sin(n),y=Math.cos(n),b=a.data.get(o.dataId).values;for(let C=0;C<u;C++){let I=C*p*c*m;for(let $=0;$<c;$++){let A=$*(p*m);for(let _=0;_<p;_++){let O=_*m;for(let P=0;P<m;P++){let B=[u,$,_,P],V=B[2],G=B[1],H=(V-f)*y-(G-h)*g,W=(V-f)*g+(G-h)*y;H=Math.round(H+f),W=Math.round(W+h);let X=s;if(typeof s!="number"&&(P===3?X=d:X=s[P]),H>=0&&H<p&&W>=0&&W<c){let K=W*(p*m),J=H*m,rt=I+K+J+P;X=b[rt]}let Z=I+A+O+P;l[Z]=X}}}}return{dataId:a.write(l,o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};var gq=bt(ys,r=>{let t=Math.floor(r);return r-t<.5?Math.floor(r):r-t>.5?Math.ceil(r):t%2===0?t:t+1}),MA={kernelName:ys,backendName:"cpu",kernelFunc:gq};function xq(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n,updates:s}=t,{shape:i}=o,{sliceRank:a,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=T.calculateShapes(s,n,i),m=!0,f=e.bufferSync(n),h=e.bufferSync(s),d=Xs(f,h,i,p,u,l,a,c,0,m);return e.makeTensorInfo(i,d.dtype,d.values)}var BA={kernelName:Xu,backendName:"cpu",kernelFunc:xq};function yq(r,t){let e=0,o=r.length,n=0;for(;e<o;)n=Math.floor((e+o)/2),r[n]<t?e=n+1:o=n;return o}function bq(r,t){let e=0,o=r.length,n=0;for(;e<o;)n=Math.floor((e+o)/2),r[n]<=t?e=n+1:o=n;return o}function VA(r,t,e,o,n,s){let i=x.getArrayFromDType("int32",e*n);for(let a=0;a<e;++a){let l=r.slice(a*o,(a+1)*o),u=a*n;for(let c=0;c<n;++c)i[u+c]=s==="left"?yq(l,t[c+u]):bq(l,t[c+u])}return i}function wq(r){let{inputs:t,backend:e,attrs:o}=r,{sortedSequence:n,values:s}=t,{side:i}=o,a=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,u=VA(a,l,n.shape[0],n.shape[1],s.shape[1],i);return e.makeTensorInfo(s.shape,"int32",u)}var GA={kernelName:Yu,backendName:"cpu",kernelFunc:wq};function Cq(r){let{inputs:t,backend:e}=r,{condition:o,t:n,e:s}=t;Y([o,n,s],"select");let i=o.shape.length,a=e.data.get(o.dataId).values,l=e.data.get(n.dataId).values,u=e.data.get(s.dataId).values,c=Re(n.dtype,s.dtype),p=x.makeZerosTypedArray(x.sizeFromShape(n.shape),c),m=0,f=i===0||i>1||n.shape.length===1?1:x.sizeFromShape(n.shape.slice(1));for(let h=0;h<a.length;h++)for(let d=0;d<f;d++)a[h]===1?p[m++]=l[h]:p[m++]=u[h];return e.makeTensorInfo(n.shape,c,p)}var WA={kernelName:Wi,backendName:"cpu",kernelFunc:Cq};var vq=T.SELU_SCALEALPHA,Nq=T.SELU_SCALE,Sq=bt(ws,r=>r>=0?Nq*r:vq*(Math.exp(r)-1)),UA={kernelName:ws,backendName:"cpu",kernelFunc:Sq};var Iq=bt(Ns,r=>r<0?-1:r>0?1:0),HA={kernelName:Ns,backendName:"cpu",kernelFunc:Iq};var Tq=bt(Cs,r=>Math.sin(r)),qA={kernelName:Cs,backendName:"cpu",kernelFunc:Tq};var kq=bt(vs,r=>Math.sinh(r)),KA={kernelName:vs,backendName:"cpu",kernelFunc:kq};var Eq=11920928955078125e-23,jA=Math.log(Eq)+2,$q=bt(Is,r=>{let t=r>-jA,e=r<jA,o=Math.exp(r),n;return e?n=o:t?n=r:n=Math.log(1+o),n}),XA={kernelName:Is,backendName:"cpu",kernelFunc:$q};function Aq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,paddings:i}=o;Y([n],"spaceToBatchND");let a=x.sizeFromShape(s),l=[[0,0]];l.push(...i);for(let $=1+s.length;$<n.shape.length;++$)l.push([0,0]);let u=_x.kernelFunc({inputs:{x:n},backend:e,attrs:{paddings:l,constantValue:0}}),c=T.getReshaped(u.shape,s,a,!1),p=T.getPermuted(c.length,s.length,!1),m=T.getReshapedPermuted(u.shape,s,a,!1),d=_t({inputs:{x:u},backend:e,attrs:{shape:c}}),b=ge({inputs:{x:d},backend:e,attrs:{perm:p}}),I=_t({inputs:{x:b},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(b),I}var YA={kernelName:qi,backendName:"cpu",kernelFunc:Aq};function Dq(r){let{inputs:t,backend:e}=r,{indices:o,values:n,denseShape:s,defaultValue:i}=t;if(s.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
        ${s.shape}`);if(o.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
        ${o.shape}`);if(n.shape.length!==1)throw new Error(`Values must be a vector, saw:
        ${n.shape}`);if(i.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);let a=e.data.get(o.dataId).values,l=e.data.get(n.dataId).values,u=e.data.get(s.dataId).values,c=e.data.get(i.dataId).values[0],[p,m,f,h,d]=Cx(a,o.shape,o.dtype,l,n.dtype,u,c);return[e.makeTensorInfo(m,o.dtype,p),e.makeTensorInfo([m[0]],n.dtype,f),e.makeTensorInfo([h.length],"bool",new Uint8Array(h.map(g=>Number(g)))),e.makeTensorInfo([d.length],o.dtype,new Int32Array(d))]}var ZA={kernelName:Zu,backendName:"cpu",kernelFunc:Dq};function Fq(r){let{inputs:t,backend:e}=r,{inputIndices:o,inputShape:n,newShape:s}=t;if(o.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape
        ${o.shape}`);if(n.shape.length!==1)throw new Error(`Input shape should be a vector but received shape
        ${n.shape}`);if(s.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);let i=Array.from(e.data.get(n.dataId).values),a=e.data.get(o.dataId).values,l=Array.from(e.data.get(s.dataId).values),[u,c,p]=vx(a,o.shape,o.dtype,i,l);return[e.makeTensorInfo(c,o.dtype,u),e.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}var JA={kernelName:Ju,backendName:"cpu",kernelFunc:Fq};function Rq(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
          ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
          ${s.shape}`);if(n.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");let i=e.data.get(o.dataId).values,a=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,[u,c]=Sp(i,o.shape,o.dtype,a,l,!0);return e.makeTensorInfo(c,o.dtype,u)}var QA={kernelName:Qu,backendName:"cpu",kernelFunc:Rq};function _q(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
         ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
         ${s.shape}`);if(n.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");let i=e.data.get(o.dataId).values,a=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,[u,c]=Sp(i,o.shape,o.dtype,a,l);return e.makeTensorInfo(c,o.dtype,u)}var t2={kernelName:tc,backendName:"cpu",kernelFunc:_q};function Oq(r){let{inputs:t,backend:e,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:i}=t,{outputShape:a}=o,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:m}=T.calculateShapes(s,n,a),f=!1,h=e.bufferSync(n),d;switch(s.dtype){case"bool":{let g=e.bufferSync(s),y=Boolean(e.data.get(i.dataId).values[0]);d=Xs(h,g,a,m,c,u,l,p,y,f);break}case"float32":{let g=e.bufferSync(s),y=e.data.get(i.dataId).values[0];d=Xs(h,g,a,m,c,u,l,p,y,f);break}case"int32":{let g=e.bufferSync(s),y=e.data.get(i.dataId).values[0];d=Xs(h,g,a,m,c,u,l,p,y,f);break}case"string":{let g=e.bufferSync(s),y=x.decodeString(e.data.get(i.dataId).values[0]);d=Xs(h,g,a,m,c,u,l,p,y,f);break}default:throw new Error(`Unsupported type ${s.dtype}`)}return e.makeTensorInfo(a,d.dtype,d.values)}var e2={kernelName:ec,backendName:"cpu",kernelFunc:Oq};function Lq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{numOrSizeSplits:s,axis:i}=o,a=x.parseAxisParam(i,n.shape)[0],l=T.prepareSplitSize(n,s,a),u=new Array(n.shape.length).fill(0),c=n.shape.slice();return l.map(p=>{let m=[...c];m[a]=p;let f=Lo({inputs:{x:n},backend:e,attrs:{begin:u,size:m}});return u[a]+=p,f})}var r2={kernelName:Ki,backendName:"cpu",kernelFunc:Lq};var o2={kernelName:rc,backendName:"cpu",kernelFunc:({inputs:r,backend:t})=>{let{x:e}=r,o=t;Y(e,"square");let n=o.data.get(e.dataId).values,s=new Float32Array(n.length);for(let a=0;a<n.length;++a){let l=n[a];s[a]=l*l}return{dataId:o.write(s,e.shape,e.dtype),shape:e.shape,dtype:e.dtype}}};var Pq=bt(Ds,(r,t)=>{let e=t;return isNaN(r)?NaN:r>0?1:e.alpha}),n2={kernelName:Ds,backendName:"cpu",kernelFunc:Pq};function zq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,end:i,strides:a,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:m}=o;Y(n,"stridedSlice");let{finalShapeSparse:f,finalShape:h,isIdentity:d,sliceDim0:g,isSimpleSlice:y,begin:b,end:w,strides:C}=qe.sliceInfo(n.shape,s,i,a,l,u,c,p,m),I;if(d)I=_t({inputs:{x:n},backend:e,attrs:{shape:h}});else if(g||y){x.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let $=qe.computeOutShape(b,w,C),A=Lo({inputs:{x:n},backend:e,attrs:{begin:b,size:$}});I=_t({inputs:{x:A},backend:e,attrs:{shape:h}}),e.disposeIntermediateTensorInfo(A)}else{let $=e.bufferSync(n),A=Nx(f,$,C,b);I=e.makeTensorInfo(h,A.dtype,A.values)}return I}var s2={kernelName:oc,backendName:"cpu",kernelFunc:zq};function Mq(r){let{inputs:t,backend:e,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:i,rightPad:a,padWidth:l,preserveShortSequences:u}=o,{data:c,dataSplits:p}=t,m=e.data.get(c.dataId).values,f=e.data.get(p.dataId).values,[h,d]=Sx(m,f,n,s,i,a,l,u);return[e.makeTensorInfo([h.length],"string",h),e.makeTensorInfo(p.shape,"int32",d)]}var i2={kernelName:nc,backendName:"cpu",kernelFunc:Mq};function Bq(r){let{inputs:t,backend:e,attrs:o}=r,{skipEmpty:n}=o,{input:s,delimiter:i}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(s.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(i.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);let a=e.data.get(s.dataId).values,l=e.data.get(i.dataId).values[0],[u,c,p]=Ix(a,l,n),m=c.length;return[e.makeTensorInfo([m,2],"int32",u),e.makeTensorInfo([m],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(p))]}var a2={kernelName:sc,backendName:"cpu",kernelFunc:Bq};function Vq(r){let{inputs:t,backend:e,attrs:o}=r,{numBuckets:n}=o,{input:s}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(n<=0)throw new Error("Number of buckets must be at least 1");let i=e.data.get(s.dataId).values,a=Tx(i,n);return e.makeTensorInfo(s.shape,"int32",a)}var l2={kernelName:ic,backendName:"cpu",kernelFunc:Vq};var Gq=bt($s,r=>Math.tan(r)),u2={kernelName:$s,backendName:"cpu",kernelFunc:Gq};var Wq=bt(As,r=>Math.tanh(r)),c2={kernelName:As,backendName:"cpu",kernelFunc:Wq};function Uq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reps:s}=o;Y(n,"tile");let i=kx(e.bufferSync(n),s);return e.makeTensorInfo(i.shape,i.dtype,i.values)}var p2={kernelName:ln,backendName:"cpu",kernelFunc:Uq};function Hq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{k:s,sorted:i}=o;Y(n,"topk");let a=e.data.get(n.dataId).values,[l,u]=Ex(a,n.shape,n.dtype,s,i);return[e.makeTensorInfo(l.shape,l.dtype,l.values),e.makeTensorInfo(u.shape,u.dtype,u.values)]}var m2={kernelName:ac,backendName:"cpu",kernelFunc:Hq};function qq(r){let{inputs:t,attrs:e,backend:o}=r,{image:n,transforms:s}=t,{interpolation:i,fillMode:a,fillValue:l,outputShape:u}=e,[c,p,m,f]=n.shape,[h,d]=u!=null?u:[p,m],g=[c,h,d,f],y=x.computeStrides(n.shape),b=y[0],w=y[1],C=y[2],I=x.getTypedArrayFromDType(n.dtype,x.sizeFromShape(g));I.fill(l);let $=o.data.get(n.dataId).values,A=o.data.get(s.dataId).values;for(let O=0;O<c;++O){let P=s.shape[0]===1?A:A.subarray(O*8,O*8+8);for(let B=0;B<h;++B)for(let V=0;V<d;++V)for(let G=0;G<f;++G){let H,W=P[6]*V+P[7]*B+1;if(W===0)continue;let X=(P[0]*V+P[1]*B+P[2])/W,Z=(P[3]*V+P[4]*B+P[5])/W,K=f2(X,m,a),J=f2(Z,p,a);switch(i){case"nearest":H=Zq($,p,m,b,w,C,O,J,K,G,l);break;case"bilinear":H=Jq($,p,m,b,w,C,O,J,K,G,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}let rt=O*b+B*w+V*C+G;I[rt]=H}return o.makeTensorInfo(g,n.dtype,I)}return{dataId:o.write(I,g,n.dtype),shape:n.shape,dtype:n.dtype}}var h2={kernelName:lc,backendName:"cpu",kernelFunc:qq};function f2(r,t,e){switch(e){case"reflect":return Kq(r,t);case"wrap":return jq(r,t);case"nearest":return Yq(r,t);case"constant":default:return Xq(r,t)}}function Kq(r,t){let e=r;if(e<0)if(t<=1)e=0;else{let o=2*t;e<o&&(e=o*Math.trunc(-e/o)+e),e=e<-t?e+o:-e-1}else if(e>t-1)if(t<=1)e=0;else{let o=2*t;e-=o*Math.trunc(e/o),e>=t&&(e=o-e-1)}return x.clamp(0,e,t-1)}function jq(r,t){let e=r;if(e<0)if(t<=1)e=0;else{let o=t-1;e+=t*(Math.trunc(-e/o)+1)}else if(e>t-1)if(t<=1)e=0;else{let o=t-1;e-=t*Math.trunc(e/o)}return x.clamp(0,e,t-1)}function Xq(r,t){return r}function Yq(r,t){return x.clamp(0,r,t-1)}function Xf(r,t,e,o,n,s,i,a,l,u,c){let p=i*o+a*n+l*s+u;return 0<=a&&a<t&&0<=l&&l<e?r[p]:c}function Zq(r,t,e,o,n,s,i,a,l,u,c){let p=Math.round(a),m=Math.round(l);return Xf(r,t,e,o,n,s,i,p,m,u,c)}function Jq(r,t,e,o,n,s,i,a,l,u,c){let p=Math.floor(a),m=Math.floor(l),f=p+1,h=m+1,d=(h-l)*Xf(r,t,e,o,n,s,i,p,m,u,c)+(l-m)*Xf(r,t,e,o,n,s,i,p,h,u,c),g=(h-l)*Xf(r,t,e,o,n,s,i,f,m,u,c)+(l-m)*Xf(r,t,e,o,n,s,i,f,h,u,c);return(f-a)*d+(a-p)*g}function Qq(r){let{inputs:t,attrs:e,backend:o}=r,{axis:n}=e,{x:s}=t;Y(s,"unique");let i=o.data.get(s.dataId).values,{outputValues:a,outputShape:l,indices:u}=$x(i,n,s.shape,s.dtype);return[o.makeTensorInfo(l,s.dtype,a),o.makeTensorInfo([u.length],"int32",u)]}var d2={kernelName:uc,backendName:"cpu",kernelFunc:Qq};function tK(r){let{inputs:t,backend:e,attrs:o}=r,{value:n}=t,{axis:s}=o;s<0&&(s+=n.shape.length);let i=n.shape.length,a=n.shape[s],l=new Array(i-1),u=0;for(let f=0;f<i;f++)f!==s&&(l[u++]=n.shape[f]);let c=new Array(i).fill(0),p=n.shape.slice();p[s]=1;let m=new Array(a);for(let f=0;f<m.length;f++){c[s]=f;let h=Lo({inputs:{x:n},backend:e,attrs:{begin:c,size:p}});m[f]=_t({inputs:{x:h},backend:e,attrs:{shape:l}}),e.disposeIntermediateTensorInfo(h)}return m}var g2={kernelName:Xi,backendName:"cpu",kernelFunc:tK};function eK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,segmentIds:s}=t,{numSegments:i}=o;Y(n,"unsortedSegmentSum");let a=n.shape.length,l=s.shape.length,u=[],c=[],p=a-l,m=s;for(let h=0;h<p;++h){let d=Tp({inputs:{input:m},backend:e,attrs:{dim:h+1}});m=d,c.push(d)}for(let h=0;h<i;++h){let d=x.createScalarValue(h,"int32"),g=e.makeTensorInfo([],"int32",d),y=tC({inputs:{a:g,b:m},backend:e}),b=_o({inputs:{x:y},backend:e,attrs:{dtype:"float32"}}),w=Hl({inputs:{a:b,b:n},backend:e}),C=Ys({inputs:{x:w},backend:e,attrs:{axis:0,keepDims:!1}});u.push(C),c.push(g),c.push(y),c.push(b),c.push(w),c.push(C)}let f=FC({inputs:u,backend:e,attrs:{axis:0}});return c.forEach(h=>e.disposeIntermediateTensorInfo(h)),f}var x2={kernelName:Yi,backendName:"cpu",kernelFunc:eK};var rK=[qE,aE,KE,jE,mE,XE,YE,ZE,JE,QE,t$,e$,r$,o$,n$,i$,a$,l$,u$,HE,c$,p$,m$,f$,pE,fE,h$,lE,d$,x$,y$,b$,w$,C$,v$,N$,S$,I$,T$,k$,E$,$$,A$,D$,F$,R$,_$,O$,L$,P$,M$,ME,B$,hE,V$,dE,G$,gE,W$,U$,H$,xE,q$,K$,j$,X$,Y$,yE,bE,uE,Z$,g$,J$,Q$,tA,BE,wE,CE,eA,vE,rA,oA,nA,sA,iA,aA,lA,NE,uA,cA,pA,mA,hA,dA,gA,SE,xA,yA,CA,IE,TE,vA,NA,SA,kE,IA,EA,$A,_x,AA,VE,$E,DA,cE,qf,FA,GE,WE,UE,RA,_A,OA,LA,PA,zA,MA,AE,BA,GA,WA,UA,FE,HA,qA,KA,RE,bA,XA,YA,ZA,JA,QA,t2,e2,r2,OE,o2,LE,n2,s2,i2,a2,l2,PE,z$,u2,c2,p2,m2,h2,EE,d2,g2,x2,TA];for(let r of rK)fh(r);var Kl={},RC={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function _C(r,t){Kl[r]=t}function Jr(r,t){if(!(r in Kl)||t!=null){let o=nK(r,t);if(o!==null)Kl[r]=o;else return console.log("Could not get context for WebGL version",r),null}let e=Kl[r];return e==null||e.isContextLost()?(delete Kl[r],Jr(r)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Kl[r])}function oK(r){if(typeof OffscreenCanvas!="undefined"&&r===2)return new OffscreenCanvas(300,150);if(typeof document!="undefined")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}function nK(r,t){if(r!==1&&r!==2)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");let e=t==null?oK(r):t;return e.addEventListener("webglcontextlost",o=>{o.preventDefault(),delete Kl[r]},!1),r===1?e.getContext("webgl",RC)||e.getContext("experimental-webgl",RC):e.getContext("webgl2",RC)}var Pa;(function(r){r[r.DENSE=0]="DENSE",r[r.SHARED_BATCH=1]="SHARED_BATCH"})(Pa||(Pa={}));var mr;(function(r){r[r.RENDER=0]="RENDER",r[r.UPLOAD=1]="UPLOAD",r[r.PIXELS=2]="PIXELS",r[r.DOWNLOAD=3]="DOWNLOAD"})(mr||(mr={}));var or;(function(r){r[r.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",r[r.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",r[r.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",r[r.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",r[r.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"})(or||(or={}));function jl(r,t){return[t,r]}function y2(r,t){return r*t}function Yf(r){let t=x.sizeFromShape(r),e=Math.ceil(t/4);return x.sizeToSquarishShape(e)}function Rn(r,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(r/2))]}function b2(r,t){let[e,o]=Rn(r,t);return e*o*4}function Zf(r,t){let e=r,o,n,s,i,a,l,u,c,p,m;return M().getNumber("WEBGL_VERSION")===2?(o=e.R32F,n=e.R16F,s=e.RGBA16F,i=e.RGBA32F,a=e.RED,u=4,c=1,p=e.HALF_FLOAT,m=e.FLOAT,l=e.RGBA8):(o=r.RGBA,n=r.RGBA,s=r.RGBA,i=e.RGBA,a=r.RGBA,u=4,c=4,p=t!=null?t.HALF_FLOAT_OES:null,m=r.FLOAT,l=r.RGBA),{internalFormatFloat:o,internalFormatHalfFloat:n,internalFormatPackedHalfFloat:s,internalFormatPackedFloat:i,textureFormatFloat:a,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:p,textureTypeFloat:m}}function ht(r,t){let e=t();return M().getBool("DEBUG")&&sK(r),e}function sK(r){let t=r.getError();if(t!==r.NO_ERROR)throw new Error("WebGL Error: "+lK(r,t))}var iK=596e-10,aK=65504;function w2(r){return!!(M().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||r===0||iK<Math.abs(r)&&Math.abs(r)<aK)}function lK(r,t){switch(t){case r.NO_ERROR:return"NO_ERROR";case r.INVALID_ENUM:return"INVALID_ENUM";case r.INVALID_VALUE:return"INVALID_VALUE";case r.INVALID_OPERATION:return"INVALID_OPERATION";case r.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case r.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case r.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}function Jf(r,t){return Zs(r,()=>r.getExtension(t),'Extension "'+t+'" not supported on this browser.')}function C2(r,t){let e=Zs(r,()=>r.createShader(r.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(ht(r,()=>r.shaderSource(e,t)),ht(r,()=>r.compileShader(e)),r.getShaderParameter(e,r.COMPILE_STATUS)===!1)throw console.log(r.getShaderInfoLog(e)),new Error("Failed to compile vertex shader.");return e}function v2(r,t){let e=Zs(r,()=>r.createShader(r.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(ht(r,()=>r.shaderSource(e,t)),ht(r,()=>r.compileShader(e)),M().get("ENGINE_COMPILE_ONLY"))return e;if(r.getShaderParameter(e,r.COMPILE_STATUS)===!1)throw MC(t,r.getShaderInfoLog(e)),new Error("Failed to compile fragment shader.");return e}var uK=/ERROR: [0-9]+:([0-9]+):/g;function MC(r,t){let e=uK.exec(t);if(e==null){console.log(`Couldn't parse line number in error: ${t}`),console.log(r);return}let o=+e[1],n=r.split(`
`),s=n.length.toString().length+2,i=n.map((p,m)=>x.rightPad((m+1).toString(),s)+p),a=0;for(let p=0;p<i.length;p++)a=Math.max(i[p].length,a);let l=i.slice(0,o-1),u=i.slice(o-1,o),c=i.slice(o);console.log(l.join(`
`)),console.log(t.split(`
`)[0]),console.log(`%c ${x.rightPad(u[0],a)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join(`
`))}function N2(r){return Zs(r,()=>r.createProgram(),"Unable to create WebGLProgram.")}function S2(r,t){if(ht(r,()=>r.linkProgram(t)),!M().get("ENGINE_COMPILE_ONLY")&&r.getProgramParameter(t,r.LINK_STATUS)===!1)throw console.log(r.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}function Lx(r,t){if(ht(r,()=>r.validateProgram(t)),r.getProgramParameter(t,r.VALIDATE_STATUS)===!1)throw console.log(r.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function I2(r,t){let e=Zs(r,()=>r.createBuffer(),"Unable to create WebGLBuffer");return ht(r,()=>r.bindBuffer(r.ARRAY_BUFFER,e)),ht(r,()=>r.bufferData(r.ARRAY_BUFFER,t,r.STATIC_DRAW)),e}function T2(r,t){let e=Zs(r,()=>r.createBuffer(),"Unable to create WebGLBuffer");return ht(r,()=>r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,e)),ht(r,()=>r.bufferData(r.ELEMENT_ARRAY_BUFFER,t,r.STATIC_DRAW)),e}function k2(r){return Zs(r,()=>r.createTexture(),"Unable to create WebGLTexture.")}function E2(r,t){let e=M().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(r<=0||t<=0){let o=`[${r}x${t}]`;throw new Error("Requested texture size "+o+" is invalid.")}if(r>e||t>e){let o=`[${r}x${t}]`,n=`[${e}x${e}]`;throw new Error("Requested texture size "+o+" greater than WebGL maximum on this browser / GPU "+n+".")}}function $2(r){return Zs(r,()=>r.createFramebuffer(),"Unable to create WebGLFramebuffer.")}function BC(r,t,e,o,n,s,i){let a=r.getAttribLocation(t,e);return a===-1?!1:(ht(r,()=>r.bindBuffer(r.ARRAY_BUFFER,o)),ht(r,()=>r.vertexAttribPointer(a,n,r.FLOAT,!1,s,i)),ht(r,()=>r.enableVertexAttribArray(a)),!0)}function cK(r,t,e){mK(r,e),ht(r,()=>r.activeTexture(r.TEXTURE0+e)),ht(r,()=>r.bindTexture(r.TEXTURE_2D,t))}function A2(r,t,e){return Zs(r,()=>r.getUniformLocation(t,e),'uniform "'+e+'" not present in program.')}function D2(r,t,e){return r.getUniformLocation(t,e)}function F2(r,t,e,o){ht(r,()=>cK(r,t,o)),ht(r,()=>r.uniform1i(e,o))}function Px(r,t,e){ht(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,e)),ht(r,()=>r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,t,0))}function VC(r,t){ht(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,t)),ht(r,()=>r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,null,0))}function Qf(r){let t=r.checkFramebufferStatus(r.FRAMEBUFFER);if(t!==r.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+pK(r,t))}function pK(r,t){switch(t){case r.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case r.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case r.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case r.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}function Zs(r,t,e){let o=ht(r,()=>t());if(o==null)throw new Error(e);return o}function mK(r,t){let e=r.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,o=t+r.TEXTURE0;if(o<r.TEXTURE0||o>e){let n=`[gl.TEXTURE0, gl.TEXTURE${e}]`;throw new Error(`textureUnit must be in ${n}.`)}}function za(r,t=2){return x.sizeFromShape(r.slice(0,r.length-t))}function Ma(r){if(r.length===0)throw Error("Cannot get rows and columns of an empty shape array.");return[r.length>1?r[r.length-2]:1,r[r.length-1]]}function zx(r){let t=[1,1,1];return r.length===0||r.length===1&&r[0]===1||(t=[za(r),...Ma(r)]),t}function R2(r,t=!1){let e=M().getNumber("WEBGL_MAX_TEXTURE_SIZE");t&&(e=e*2,r=r.map((n,s)=>s>=r.length-2?x.nearestLargerEven(r[s]):r[s]),r.length===1&&(r=[2,r[0]])),r.length!==2&&(r=x.squeezeShape(r).newShape);let o=x.sizeFromShape(r);if(r.length<=1&&o<=e)return[1,o];if(r.length===2&&r[0]<=e&&r[1]<=e)return r;if(r.length===3&&r[0]*r[1]<=e&&r[2]<=e)return[r[0]*r[1],r[2]];if(r.length===3&&r[0]<=e&&r[1]*r[2]<=e)return[r[0],r[1]*r[2]];if(r.length===4&&r[0]*r[1]*r[2]<=e&&r[3]<=e)return[r[0]*r[1]*r[2],r[3]];if(r.length===4&&r[0]<=e&&r[1]*r[2]*r[3]<=e)return[r[0],r[1]*r[2]*r[3]];if(t){let n=za(r),s=2,i=2;return r.length&&([s,i]=Ma(r)),o=n*(s/2)*(i/2),x.sizeToSquarishShape(o).map(a=>a*2)}return x.sizeToSquarishShape(o)}function Ox(r){return r%2===0}function Xl(r,t){if(r=r.slice(-2),t=t.slice(-2),x.arraysEqual(r,t)||!r.length||!t.length||r[0]===0||r[1]===0||t[0]===0||t[1]===0)return!0;if(r.length!==t.length){let e=r.slice(-1)[0],o=t.slice(-1)[0];if(e===o||Ox(e)&&Ox(o)&&(r[0]===1||t[0]===1))return!0}return r[1]===t[1]&&Ox(r[0])&&Ox(t[0])}var LC,PC;function _2(r){if(LC==null){let t=Jr(r);LC=t.getParameter(t.MAX_TEXTURE_SIZE)}return LC}function O2(r){if(PC==null){let t=Jr(r);PC=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,PC)}function L2(r){if(r===0)return 0;let t,e=Jr(r);return co(e,"EXT_disjoint_timer_query_webgl2")&&r===2?t=2:co(e,"EXT_disjoint_timer_query")?t=1:t=0,t}function co(r,t){return r.getExtension(t)!=null}function GC(r){try{if(Jr(r)!=null)return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function P2(r){if(r===0)return!1;let t=Jr(r);if(r===1){if(!co(t,"OES_texture_float"))return!1}else if(!co(t,"EXT_color_buffer_float"))return!1;return zC(t)}function z2(r){if(r===0)return!1;let t=Jr(r);if(r===1){if(!co(t,"OES_texture_float")||!co(t,"WEBGL_color_buffer_float"))return!1}else{if(co(t,"EXT_color_buffer_float"))return zC(t);let o="EXT_color_buffer_half_float";if(co(t,o)){let n=t.getExtension(o);return fK(t,n)}return!1}return zC(t)}function zC(r){let t=Zf(r),e=r.createTexture();r.bindTexture(r.TEXTURE_2D,e);let o=1,n=1;r.texImage2D(r.TEXTURE_2D,0,t.internalFormatFloat,o,n,0,t.textureFormatFloat,t.textureTypeFloat,null);let s=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,s),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,e,0);let i=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(e),r.deleteFramebuffer(s),i}function fK(r,t){let e=Zf(r,t),o=r.createTexture();r.bindTexture(r.TEXTURE_2D,o);let n=1,s=1;r.texImage2D(r.TEXTURE_2D,0,e.internalFormatHalfFloat,n,s,0,e.textureFormatFloat,e.textureTypeHalfFloat,null);let i=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,i),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,o,0);let a=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(o),r.deleteFramebuffer(i),a}function M2(r){return r!==2?!1:Jr(r).fenceSync!=null}function _n(r,t){Array.isArray(r)||(r=[r]),r.forEach(e=>{e!=null&&x.assert(e.dtype!=="complex64",()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}var wt=M();wt.registerFlag("HAS_WEBGL",()=>wt.getNumber("WEBGL_VERSION")>0);wt.registerFlag("WEBGL_VERSION",()=>GC(2)?2:GC(1)?1:0);wt.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1);wt.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>wt.get("WEBGL_VERSION")===2);wt.registerFlag("WEBGL_CPU_FORWARD",()=>!0);wt.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1);wt.registerFlag("WEBGL_PACK",()=>wt.getBool("HAS_WEBGL"));wt.registerFlag("WEBGL_PACK_NORMALIZATION",()=>wt.getBool("WEBGL_PACK"));wt.registerFlag("WEBGL_PACK_CLIP",()=>wt.getBool("WEBGL_PACK"));wt.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>wt.getBool("WEBGL_PACK"));wt.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>wt.getBool("WEBGL_PACK"));wt.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>wt.getBool("WEBGL_PACK"));wt.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>wt.getBool("WEBGL_PACK"));wt.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>wt.getBool("WEBGL_PACK"));wt.registerFlag("WEBGL_PACK_REDUCE",()=>wt.getBool("WEBGL_PACK"));wt.registerFlag("WEBGL_LAZILY_UNPACK",()=>wt.getBool("WEBGL_PACK"));wt.registerFlag("WEBGL_CONV_IM2COL",()=>wt.getBool("WEBGL_PACK"));wt.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>_2(wt.getNumber("WEBGL_VERSION")));wt.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>O2(wt.getNumber("WEBGL_VERSION")));wt.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{let r=wt.getNumber("WEBGL_VERSION");return r===0?0:L2(r)});wt.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>wt.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!ta.isMobile());wt.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>P2(wt.getNumber("WEBGL_VERSION")));wt.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>wt.getBool("WEBGL_FORCE_F16_TEXTURES")?!1:wt.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));wt.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>z2(wt.getNumber("WEBGL_VERSION")));wt.registerFlag("WEBGL_FENCE_API_ENABLED",()=>M2(wt.getNumber("WEBGL_VERSION")));wt.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>wt.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0);wt.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,r=>{if(r<0&&r!==-1)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${r}.`)});wt.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>ta.isMobile()?1:-1,r=>{if(r<0&&r!==-1)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${r}.`)});wt.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128);wt.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1);wt.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5);wt.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128);function xe(){let r,t,e,o,n,s,i,a,l,u;return M().getNumber("WEBGL_VERSION")===2?(r="#version 300 es",t="in",e="out",o="in",n="texture",s="outputColor",i="out vec4 outputColor;",a=`
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `,l="",u=`
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `):(r="",t="attribute",e="varying",o="varying",n="texture2D",s="gl_FragColor",i="",a=`
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `,l=`
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `,u=`
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `),{version:r,attribute:t,varyingVs:e,varyingFs:o,texture2D:n,output:s,defineOutput:i,defineSpecialNaN:a,defineSpecialInf:l,defineRound:u}}function en(r,t,e="index"){let o=x.computeStrides(t);return o.map((n,s)=>{let i=`int ${r[s]} = ${e} / ${n}`,a=s===o.length-1?`int ${r[s+1]} = ${e} - ${r[s]} * ${n}`:`index -= ${r[s]} * ${n}`;return`${i}; ${a};`}).join("")}function Yl(r,t,e="index"){let o=x.computeStrides(t);return o.map((n,s)=>{let i=`int ${r[s]} = ${e} / outShapeStrides[${s}]`,a=s===o.length-1?`int ${r[s+1]} = ${e} - ${r[s]} * outShapeStrides[${s}]`:`index -= ${r[s]} * outShapeStrides[${s}]`;return`${i}; ${a};`}).join("")}function hK(r,t){let e=r.length,o=r.map(s=>`${t}[${s}]`),n=new Array(e-1);n[e-2]=o[e-1];for(let s=e-3;s>=0;--s)n[s]=`(${n[s+1]} * ${o[s+1]})`;return n}function B2(r,t,e="index"){let o=r.map((s,i)=>i),n=hK(o,t);return n.map((s,i)=>{let a=`int ${r[i]} = ${e} / ${n[i]}`,l=i===n.length-1?`int ${r[i+1]} = ${e} - ${r[i]} * ${n[i]}`:`index -= ${r[i]} * ${n[i]}`;return`${a}; ${l};`}).join("")}function kp(r){let t=x.computeStrides(r).map(e=>e.toString());return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;
  }
`}function Ep(){return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`}var Mx=`
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;var{getBroadcastDims:V2}=T;function G2(r,t,e){let o=[];if(r.forEach(f=>{let h=x.sizeFromShape(f.shapeInfo.logicalShape);if(f.shapeInfo.isUniform?o.push(`uniform float ${f.name}${h>1?`[${h}]`:""};`):(o.push(`uniform sampler2D ${f.name};`),o.push(`uniform int offset${f.name};`)),e.enableShapeUniforms){let{uniformShape:d}=Bx(e.packedInputs,f.shapeInfo.logicalShape,f.shapeInfo.texShape);switch(d.length){case 1:o.push(`uniform int ${f.name}Shape;`);break;case 2:o.push(`uniform ivec2 ${f.name}Shape;`);break;case 3:o.push(`uniform ivec3 ${f.name}Shape;`);break;case 4:o.push(`uniform ivec4 ${f.name}Shape;`);break;default:break}o.push(`uniform ivec2 ${f.name}TexShape;`)}}),e.enableShapeUniforms){switch(t.logicalShape.length){case 1:o.push("uniform int outShape;");break;case 2:o.push("uniform ivec2 outShape;"),o.push("uniform int outShapeStrides;");break;case 3:o.push("uniform ivec3 outShape;"),o.push("uniform ivec2 outShapeStrides;");break;case 4:o.push("uniform ivec4 outShape;"),o.push("uniform ivec3 outShapeStrides;");break;default:break}o.push("uniform ivec2 outTexShape;")}e.customUniforms&&e.customUniforms.forEach(f=>{o.push(`uniform ${f.type} ${f.name}${f.arrayIndex?`[${f.arrayIndex}]`:""};`)});let n=o.join(`
`),s=r.map(f=>dK(f,t,e.packedInputs,e.enableShapeUniforms)).join(`
`),i=t.texShape,a=xe(),l=yK(a),u,c,p=CK(a);return t.isPacked?(u=gK(t.logicalShape,i,e.enableShapeUniforms),c=wK(a)):(u=xK(t.logicalShape,i,e.enableShapeUniforms),c=bK(a)),e.packedInputs&&(p+=IK),[p,l,c,n,u,s,e.userCode].join(`
`)}function Ap(r,t=!1){let e=r.shapeInfo.logicalShape;switch(e.length){case 0:return PK(r,t);case 1:return MK(r,t);case 2:return VK(r,t);case 3:return WK(r,t);case 4:return HK(r,t);case 5:return qK(r);case 6:return KK(r);default:throw new Error(`${e.length}-D input sampling is not yet supported`)}}function W2(r,t){switch(r.shapeInfo.logicalShape.length){case 0:return LK(r);case 1:return zK(r,t);case 2:return BK(r,t);case 3:return GK(r,t);default:return UK(r,t)}}function dK(r,t,e=!1,o){let n="";e?n+=W2(r,o):n+=Ap(r,o);let s=r.shapeInfo.logicalShape,i=t.logicalShape;return s.length<=i.length&&(e?n+=jK(r,t):n+=XK(r,t)),n}function gK(r,t,e){switch(r.length){case 0:return U2();case 1:return TK(r,t,e);case 2:return _K(r,t,e);case 3:return EK(r,t,e);default:return AK(r,t,e)}}function xK(r,t,e){switch(r.length){case 0:return U2();case 1:return kK(r,t,e);case 2:return OK(r,t,e);case 3:return $K(r,t,e);case 4:return DK(r,t,e);case 5:return FK(r,t);case 6:return RK(r,t);default:throw new Error(`${r.length}-D output sampling is not yet supported`)}}function yK(r){return`
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${r.texture2D}(textureSampler, uv).r;
    }
  `}function bK(r){return`
    void setOutput(float val) {
      ${r.output} = vec4(val, 0, 0, 0);
    }
  `}function wK(r){return`
    void setOutput(vec4 val) {
      ${r.output} = val;
    }
  `}function CK(r){return`${r.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${r.varyingFs} vec2 resultUV;
    ${r.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${r.defineSpecialNaN}
    ${r.defineSpecialInf}
    ${r.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${vK}
    ${NK}
    ${SK}
  `}var vK=`
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,NK=`
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,SK=`
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,IK=`
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;function U2(){return`
    int getOutputCoords() {
      return 0;
    }
  `}function TK(r,t,e){let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return o[0]===1?e?`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${o[1]}.0);
      }
    `:o[1]===1?e?`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${o[0]}.0);
      }
    `:e?`
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      return 2 * (resTexRC.x * ${o[1]} + resTexRC.y);
    }
  `}function kK(r,t,e){return t[0]===1?e?`
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.x * ${t[1]}.0);
      }
    `:t[1]===1?e?`
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.y * ${t[0]}.0);
      }
    `:e?`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      return resTexRC.x * ${t[1]} + resTexRC.y;
    }
  `}function EK(r,t,e){if(e)return`
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],n=Math.ceil(r[2]/2),s=n*Math.ceil(r[1]/2);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec3(b, r, c);
    }
  `}function $K(r,t,e){if(e)return`
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${Yl(["r","c","d"],r)}
    return ivec3(r, c, d);
  }
`;let o=en(["r","c","d"],r);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${o}
      return ivec3(r, c, d);
    }
  `}function AK(r,t,e){if(e)return`
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],n=Math.ceil(r[r.length-1]/2),s=n*Math.ceil(r[r.length-2]/2),i=s,a="",l="b, r, c";for(let u=2;u<r.length-1;u++)i*=r[r.length-u-1],a=`
      int b${u} = index / ${i};
      index -= b${u} * ${i};
    `+a,l=`b${u}, `+l;return`
    ivec${r.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      ${a}

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec${r.length}(${l});
    }
  `}function DK(r,t,e){if(e)return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${Yl(["r","c","d","d2"],r)}
      return ivec4(r, c, d, d2);
    }
  `;let o=en(["r","c","d","d2"],r);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${o}
      return ivec4(r, c, d, d2);
    }
  `}function FK(r,t){let e=en(["r","c","d","d2","d3"],r);return`
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},
                             ${t[1]}));

      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `}function RK(r,t){let e=en(["r","c","d","d2","d3","d4"],r);return`
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `}function _K(r,t,e){let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(x.arraysEqual(r,t))return e?`
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${o[0]}, ${o[1]}));
      }
    `;let n=Math.ceil(r[1]/2);return e?`
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));

      int index = resTexRC.x * ${o[1]} + resTexRC.y;
      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec2(r, c);
    }
  `}function OK(r,t,e){return x.arraysEqual(r,t)?e?`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));
      }
    `:r[1]===1?e?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `:r[0]===1?e?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `:e?`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      int r = index / ${r[1]};
      int c = index - r * ${r[1]};
      return ivec2(r, c);
    }
  `}function Zl(r){return`offset${r}`}function LK(r){let t=r.name,e="get"+t.charAt(0).toUpperCase()+t.slice(1),o=xe();return`
    vec4 ${e}() {
      return ${o.texture2D}(${t}, halfCR);
    }
  `}function PK(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1);if(r.shapeInfo.isUniform)return`float ${o}() {return ${e};}`;let[n,s]=r.shapeInfo.texShape;if(n===1&&s===1)return`
      float ${o}() {
        return sampleTexture(${e}, halfCR);
      }
    `;let i=Zl(e);if(t)return`
    float ${o}() {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${i});
      return sampleTexture(${e}, uv);
    }
  `;let[a,l]=r.shapeInfo.texShape;return`
    float ${o}() {
      vec2 uv = uvFromFlat(${a}, ${l}, ${i});
      return sampleTexture(${e}, uv);
    }
  `}function zK(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),n=r.shapeInfo.texShape,s=xe();if(t)return`
    vec4 ${o}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${s.texture2D}(${e}, uv);
    }
  `;let i=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)];return`
    vec4 ${o}(int index) {
      vec2 uv = packedUVfrom1D(
        ${i[0]}, ${i[1]}, index);
      return ${s.texture2D}(${e}, uv);
    }
  `}function MK(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1);if(r.shapeInfo.isUniform)return`
      float ${o}(int index) {
        ${Dp(r)}
      }
    `;let n=r.shapeInfo.texShape,s=n[0],i=n[1];if(i===1&&s===1)return`
      float ${o}(int index) {
        return sampleTexture(${e}, halfCR);
      }
    `;let a=Zl(e);return i===1?t?`
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / float(${e}TexShape[0]));
        return sampleTexture(${e}, uv);
      }
    `:`
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / ${s}.0);
        return sampleTexture(${e}, uv);
      }
    `:s===1?t?`
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / float(${e}TexShape[1]), 0.5);
        return sampleTexture(${e}, uv);
      }
    `:`
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / ${i}.0, 0.5);
        return sampleTexture(${e}, uv);
      }
    `:t?`
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${a});
      return sampleTexture(${e}, uv);
    }
  `:`
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${s}, ${i}, index + ${a});
      return sampleTexture(${e}, uv);
    }
  `}function BK(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape,i=s[0],a=s[1],l=xe();if(s!=null&&x.arraysEqual(e,s))return t?`
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);

        return ${l.texture2D}(${o}, uv);
      }
    `:`
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}.0, ${i}.0);

        return ${l.texture2D}(${o}, uv);
      }
    `;if(t)return`
    vec4 ${n}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${o}, uv);
    }
  `;let u=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],c=Math.ceil(e[1]/2);return`
    vec4 ${n}(int row, int col) {
      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);
      return ${l.texture2D}(${o}, uv);
    }
  `}function VK(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape;if(s!=null&&x.arraysEqual(e,s)){if(t)return`
      float ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `;let m=s[0],f=s[1];return`
    float ${n}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${f}.0, ${m}.0);
      return sampleTexture(${o}, uv);
    }
  `}let{newShape:i,keptDims:a}=x.squeezeShape(e),l=i;if(l.length<e.length){let m=Fp(r,l),f=["row","col"];return`
      ${Ap(m,t)}
      float ${n}(int row, int col) {
        return ${n}(${Rp(f,a)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));
        ${Dp(r)}
      }
    `;let u=s[0],c=s[1],p=Zl(o);return c===1?t?`
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${o}TexShape[0]));
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);
      return sampleTexture(${o}, uv);
    }
  `:u===1?t?`
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${o}TexShape[1]), 0.5);
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);
      return sampleTexture(${o}, uv);
    }
  `:t?`
      float ${n}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${o}Shape[1] + col + ${p};
        vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
        return sampleTexture(${o}, uv);
      }
    `:`
  float ${n}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${e[1]} + col + ${p};
    vec2 uv = uvFromFlat(${u}, ${c}, index);
    return sampleTexture(${o}, uv);
  }
`}function GK(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape,i=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(e[0]===1){let m=e.slice(1),f=[1,2],h=Fp(r,m),d=["b","row","col"];return`
        ${W2(h,t)}
        vec4 ${n}(int b, int row, int col) {
          return ${n}(${Rp(d,f)});
        }
      `}let a=xe();if(t)return`
    vec4 ${n}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${a.texture2D}(${o}, uv);
    }
  `;let l=i[0],u=i[1],c=Math.ceil(e[2]/2),p=c*Math.ceil(e[1]/2);return`
    vec4 ${n}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${l}, ${u}, ${p}, ${c}, b, row, col);
      return ${a.texture2D}(${o}, uv);
    }
  `}function WK(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=e[1]*e[2],i=e[2],{newShape:a,keptDims:l}=x.squeezeShape(e),u=a;if(u.length<e.length){let d=Fp(r,u),g=["row","col","depth"];return`
        ${Ap(d,t)}
        float ${n}(int row, int col, int depth) {
          return ${n}(${Rp(g,l)});
        }
      `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${s}, ${i}, 1)));
        ${Dp(r)}
      }
    `;let c=r.shapeInfo.texShape,p=c[0],m=c[1],f=r.shapeInfo.flatOffset;if(m===s&&f==null)return t?`
      float ${n}(int row, int col, int depth) {
        int stride1 = ${o}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
        float ${n}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${i}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${m}.0, ${p}.0);
          return sampleTexture(${o}, uv);
        }
      `;if(m===i&&f==null)return t?`
      float ${n}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${o}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${m}.0, ${p}.0);
      return sampleTexture(${o}, uv);
    }
  `;let h=Zl(o);return t?`
    float ${n}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${o}Shape[1] * ${o}Shape[2];
      int stride1 = ${o}Shape[2];
      int index = row * ${s} + col * ${i} + depth + ${h};
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
      return sampleTexture(${o}, uv);
    }
    `:`
      float ${n}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s} + col * ${i} + depth + ${h};
        vec2 uv = uvFromFlat(${p}, ${m}, index);
        return sampleTexture(${o}, uv);
      }
  `}function UK(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),n=xe();if(t)return`
    vec4 ${o}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${e}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${n.texture2D}(${e}, uv);
    }
  `;let s=r.shapeInfo.logicalShape,i=s.length,a=r.shapeInfo.texShape,l=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],u=l[0],c=l[1],p=Math.ceil(s[i-1]/2),m=p*Math.ceil(s[i-2]/2),f="int b, int row, int col",h=`b * ${m} + (row / 2) * ${p} + (col / 2)`;for(let d=2;d<i-1;d++)f=`int b${d}, `+f,m*=s[i-d-1],h=`b${d} * ${m} + `+h;return`
    vec4 ${o}(${f}) {
      int index = ${h};
      int texR = index / ${c};
      int texC = index - texR * ${c};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});
      return ${n.texture2D}(${e}, uv);
    }
  `}function HK(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=e[3],i=e[2]*s,a=e[1]*i,{newShape:l,keptDims:u}=x.squeezeShape(e);if(l.length<e.length){let b=Fp(r,l),w=["row","col","depth","depth2"];return`
      ${Ap(b,t)}
      float ${n}(int row, int col, int depth, int depth2) {
        return ${n}(${Rp(w,u)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${a}, ${i}, ${s}, 1)));
        ${Dp(r)}
      }
    `;let c=r.shapeInfo.flatOffset,p=r.shapeInfo.texShape,m=p[0],f=p[1],h=`int stride2 = ${o}Shape[3];`,d=`int stride1 = ${o}Shape[2] * stride2;`,g=`int stride0 = ${o}Shape[1] * stride1;`;if(f===a&&c==null)return t?`
      float ${n}(int row, int col, int depth, int depth2) {
        ${h}
        ${d}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${i}, ${s}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;if(f===s&&c==null)return t?`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${o}Shape[1] * ${o}Shape[2], ${o}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${e[1]*e[2]}, ${e[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;let y=Zl(o);return t?`
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${h}
      ${d}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index + ${y});
      return sampleTexture(${o}, uv);
    }
  `:`
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} +
          depth * ${s} + depth2;
      vec2 uv = uvFromFlat(${m}, ${f}, index + ${y});
      return sampleTexture(${o}, uv);
    }
  `}function qK(r){let t=r.shapeInfo.logicalShape,e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),n=t[4],s=t[3]*n,i=t[2]*s,a=t[1]*i,{newShape:l,keptDims:u}=x.squeezeShape(t);if(l.length<t.length){let d=Fp(r,l),g=["row","col","depth","depth2","depth3"];return`
      ${Ap(d)}
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        return ${o}(${Rp(g,u)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${a}, ${i}, ${s}, ${n})) +
          depth3;
        ${Dp(r)}
      }
    `;let c=r.shapeInfo.flatOffset,p=r.shapeInfo.texShape,m=p[0],f=p[1];if(f===a&&c==null)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${i}, ${s}, ${n}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${m}.0);
        return sampleTexture(${e}, uv);
      }
    `;if(f===n&&c==null)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${t[1]*t[2]*t[3]},
               ${t[2]*t[3]}, ${t[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${m}.0);
        return sampleTexture(${e}, uv);
      }
    `;let h=Zl(e);return`
    float ${o}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} + depth * ${s} +
          depth2 * ${n} + depth3 + ${h};
      vec2 uv = uvFromFlat(${m}, ${f}, index);
      return sampleTexture(${e}, uv);
    }
  `}function KK(r){let t=r.shapeInfo.logicalShape,e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),{newShape:n,keptDims:s}=x.squeezeShape(t);if(n.length<t.length){let g=Fp(r,n),y=["row","col","depth","depth2","depth3","depth4"];return`
      ${Ap(g)}
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${o}(${Rp(y,s)});
      }
    `}let i=t[5],a=t[4]*i,l=t[3]*a,u=t[2]*l,c=t[1]*u;if(r.shapeInfo.isUniform)return`
      float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${c}, ${u}, ${l}, ${a})) +
          dot(
            vec2(depth3, depth4),
            vec2(${i}, 1)));
        ${Dp(r)}
      }
    `;let p=r.shapeInfo.flatOffset,m=r.shapeInfo.texShape,f=m[0],h=m[1];if(h===c&&p==null)return`
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${u}, ${l}, ${a}, ${i})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${h}.0, ${f}.0);
        return sampleTexture(${e}, uv);
      }
    `;if(h===i&&p==null)return`
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${t[1]*t[2]*t[3]*t[4]},
               ${t[2]*t[3]*t[4]},
               ${t[3]*t[4]},
               ${t[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${h}.0, ${f}.0);
        return sampleTexture(${e}, uv);
      }
    `;let d=Zl(e);return`
    float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${c} + col * ${u} + depth * ${l} +
          depth2 * ${a} + depth3 * ${i} + depth4 + ${d};
      vec2 uv = uvFromFlat(${f}, ${h}, index);
      return sampleTexture(${e}, uv);
    }
  `}function Dp(r){let t=r.name,e=x.sizeFromShape(r.shapeInfo.logicalShape);return e<2?`return ${t};`:`
    for (int i = 0; i < ${e}; i++) {
      if (i == index) {
        return ${t}[i];
      }
    }
  `}function jK(r,t){let e=r.name,o=e.charAt(0).toUpperCase()+e.slice(1),n="get"+o+"AtOutCoords",s=r.shapeInfo.logicalShape.length,i=t.logicalShape.length,a=V2(r.shapeInfo.logicalShape,t.logicalShape),l=$t(i),u=i-s,c,p=["x","y","z","w","u","v"];s===0?c="":i<2&&a.length>=1?c="coords = 0;":c=a.map(b=>`coords.${p[b+u]} = 0;`).join(`
`);let m="";i<2&&s>0?m="coords":m=r.shapeInfo.logicalShape.map((b,w)=>`coords.${p[w+u]}`).join(", ");let f="return outputValue;",d=x.sizeFromShape(r.shapeInfo.logicalShape)===1,y=x.sizeFromShape(t.logicalShape)===1;if(s===1&&!d&&!y)f=`
      return vec4(outputValue.xy, outputValue.xy);
    `;else if(d&&!y)i===1?f=`
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `:f=`
        return vec4(outputValue.x);
      `;else if(a.length){let b=s-2,w=s-1;a.indexOf(b)>-1&&a.indexOf(w)>-1?f="return vec4(outputValue.x);":a.indexOf(b)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":a.indexOf(w)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}return`
    vec4 ${n}() {
      ${l} coords = getOutputCoords();
      ${c}
      vec4 outputValue = get${o}(${m});
      ${f}
    }
  `}function XK(r,t){let e=r.name,o=e.charAt(0).toUpperCase()+e.slice(1),n="get"+o+"AtOutCoords",s=t.texShape,i=r.shapeInfo.texShape,a=r.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!r.shapeInfo.isUniform&&a===l&&r.shapeInfo.flatOffset==null&&x.arraysEqual(i,s))return`
      float ${n}() {
        return sampleTexture(${e}, resultUV);
      }
    `;let u=$t(l),c=V2(r.shapeInfo.logicalShape,t.logicalShape),p=l-a,m,f=["x","y","z","w","u","v"];a===0?m="":l<2&&c.length>=1?m="coords = 0;":m=c.map(d=>`coords.${f[d+p]} = 0;`).join(`
`);let h="";return l<2&&a>0?h="coords":h=r.shapeInfo.logicalShape.map((d,g)=>`coords.${f[g+p]}`).join(", "),`
    float ${n}() {
      ${u} coords = getOutputCoords();
      ${m}
      return get${o}(${h});
    }
  `}function $t(r){if(r<=1)return"int";if(r===2)return"ivec2";if(r===3)return"ivec3";if(r===4)return"ivec4";if(r===5)return"ivec5";if(r===6)return"ivec6";throw Error(`GPU for rank ${r} is not yet supported`)}function Bx(r,t,e){let{newShape:o,keptDims:n}=x.squeezeShape(t),s=t.length,i=r&&s===3&&t[0]===1,a=i?t.slice(1):o,l=!r&&s>1&&!x.arraysEqual(t,e)&&o.length<s||i;return{useSqueezeShape:l,uniformShape:l?a:t,keptDims:n}}function Fp(r,t){let e=JSON.parse(JSON.stringify(r));return e.shapeInfo.logicalShape=t,e}function Rp(r,t){return t.map(e=>r[e]).join(", ")}function q2(r,t,e,o){let n=e.map((c,p)=>{let m={logicalShape:c.shape,texShape:c.isUniform?null:c.texData.texShape,isUniform:c.isUniform,isPacked:c.isUniform?!1:c.texData.isPacked,flatOffset:null};return c.texData!=null&&c.texData.slice!=null&&c.texData.slice.flatOffset>0&&(m.flatOffset=c.texData.slice.flatOffset),{name:t.variableNames[p],shapeInfo:m}}),s=n.map(c=>c.shapeInfo),i={logicalShape:o.shape,texShape:o.texData.texShape,isUniform:!1,isPacked:o.texData.isPacked,flatOffset:null},a=G2(n,i,t),l=v2(r.gl,a),u=r.createProgram(l);return M().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:a,webGLProgram:u,inShapeInfos:s,outShapeInfo:i,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:l,source:a,webGLProgram:u,inShapeInfos:s,outShapeInfo:i},WC(r,t,u))}function WC(r,t,e){let o={},n={},s={},i=[],a,l,u,c=null,p=null;p=r.getUniformLocation(e,"NAN",!1),M().getNumber("WEBGL_VERSION")===1&&(c=r.getUniformLocation(e,"INFINITY",!1));let m=!1;for(let f=0;f<t.variableNames.length;f++){let h=t.variableNames[f];o[h]=r.getUniformLocation(e,h,m),o[`offset${h}`]=r.getUniformLocation(e,`offset${h}`,m),t.enableShapeUniforms&&(n[`${h}Shape`]=r.getUniformLocation(e,`${h}Shape`,m),s[`${h}TexShape`]=r.getUniformLocation(e,`${h}TexShape`,m))}return t.enableShapeUniforms&&(a=r.getUniformLocation(e,"outShape",m),u=r.getUniformLocation(e,"outShapeStrides",m),l=r.getUniformLocation(e,"outTexShape",m)),t.customUniforms&&t.customUniforms.forEach((f,h)=>{i[h]=r.getUniformLocation(e,f.name,m)}),{uniformLocations:o,customUniformLocations:i,infLoc:c,nanLoc:p,inShapesLocations:n,inTexShapesLocations:s,outShapeLocation:a,outShapeStridesLocation:u,outTexShapeLocation:l}}function H2(r,t){if(r.length!==t.length)throw Error(`Binary was compiled with ${r.length} inputs, but was executed with ${t.length} inputs`);r.forEach((e,o)=>{let n=e.logicalShape,s=t[o],i=s.shape;if(!x.arraysEqual(n,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${n} and ${i} must match`);if(e.isUniform&&s.isUniform)return;let a=e.texShape,l=s.isUniform?null:s.texData.texShape;if(!x.arraysEqual(a,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${a} and ${l} must match`)})}function K2(r,t,e,o,n){t.program.enableShapeUniforms||(H2(t.inShapeInfos,e),H2([t.outShapeInfo],[o]));let s=o.texData.texture,i=o.texData.texShape;o.texData.isPacked?r.setOutputPackedMatrixTexture(s.texture,i[0],i[1]):r.setOutputMatrixTexture(s.texture,i[0],i[1]),r.setProgram(t.webGLProgram),M().getNumber("WEBGL_VERSION")===1&&t.infLoc!==null&&r.gl.uniform1f(t.infLoc,1/0),t.nanLoc!==null&&r.gl.uniform1f(t.nanLoc,NaN),e.forEach((l,u)=>{let c=t.program.variableNames[u],p=t.uniformLocations[c],m=t.uniformLocations[`offset${c}`],f=t.inShapesLocations[`${c}Shape`],h=t.inTexShapesLocations[`${c}TexShape`];if(f){let{uniformShape:d}=Bx(t.program.packedInputs,l.shape,l.texData.texShape);switch(d.length){case 1:r.gl.uniform1iv(f,new Int32Array(d));break;case 2:r.gl.uniform2iv(f,new Int32Array(d));break;case 3:r.gl.uniform3iv(f,new Int32Array(d));break;case 4:r.gl.uniform4iv(f,new Int32Array(d));break;default:break}}if(h&&r.gl.uniform2i(h,l.texData.texShape[0],l.texData.texShape[1]),p!=null){if(l.isUniform){if(x.sizeFromShape(l.shape)<2)r.gl.uniform1f(p,l.uniformValues[0]);else{let d=l.uniformValues;d instanceof Float32Array||(d=new Float32Array(d)),r.gl.uniform1fv(p,d)}return}l.texData.slice!=null&&m!=null&&r.gl.uniform1i(m,l.texData.slice.flatOffset),r.setInputMatrixTexture(l.texData.texture.texture,p,u)}});let a=t.outShapeLocation;if(a)switch(o.shape.length){case 1:r.gl.uniform1iv(a,new Int32Array(o.shape));break;case 2:r.gl.uniform2iv(a,new Int32Array(o.shape));break;case 3:r.gl.uniform3iv(a,new Int32Array(o.shape));break;case 4:r.gl.uniform4iv(a,new Int32Array(o.shape));break;default:break}if(t.outShapeStridesLocation){let l=x.computeStrides(o.shape);switch(o.shape.length){case 2:r.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(l));break;case 3:r.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(l));break;case 4:r.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(l));break;default:break}}t.outTexShapeLocation&&r.gl.uniform2i(t.outTexShapeLocation,o.texData.texShape[0],o.texData.texShape[1]),t.program.customUniforms&&n&&t.program.customUniforms.forEach((l,u)=>{let c=t.customUniformLocations[u],p=n[u];if(l.type==="float")r.gl.uniform1fv(c,p);else if(l.type==="vec2")r.gl.uniform2fv(c,p);else if(l.type==="vec3")r.gl.uniform3fv(c,p);else if(l.type==="vec4")r.gl.uniform4fv(c,p);else if(l.type==="int")r.gl.uniform1iv(c,p);else if(l.type==="ivec2")r.gl.uniform2iv(c,p);else if(l.type==="ivec3")r.gl.uniform3iv(c,p);else if(l.type==="ivec4")r.gl.uniform4iv(c,p);else throw Error(`uniform type ${l.type} is not supported yet.`)}),r.executeProgram()}function j2(r,t,e){let o="";t.concat(e).forEach(i=>{let a=i.texData!=null&&i.texData.slice!=null&&i.texData.slice.flatOffset>0;if(r.enableShapeUniforms&&!i.isUniform){let l=i.texData.texShape,{useSqueezeShape:u,uniformShape:c,keptDims:p}=Bx(r.packedInputs,i.shape,l),m="",f="",h="";if(c.length===1&&r.packedInputs){let I=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)];m=`${I[0]>1}_${I[1]>1}`}else if(c.length===2&&!r.packedInputs)f=`${c[0]>1}_${c[1]>1}`;else if(c.length>2&&!r.packedInputs){let I=x.computeStrides(c);h=`${I[0]===l[1]}_${I[I.length-1]===l[1]}`}let d=i.shape.length,g=c.length===2&&x.arraysEqual(i.shape,l),y=x.sizeFromShape(i.shape)===1,b=T.getBroadcastDims(i.shape,e.shape),w=!r.packedInputs&&d===e.shape.length&&x.arraysEqual(l,e.texData.texShape),C=r.packedInputs||c.length>2?"":`${l[0]>1}_${l[1]>1}`;o+=`${d}_${w}_${u?p:""}_${c.length}_${y}_${b}_${g}_${m}_${f}_${h}_${C}_${a}`}else{let l=i.isUniform?"uniform":i.texData.texShape;o+=`${i.shape}_${l}_${a}`}});let n=r.userCode,s=r.constructor.name;return s+="_"+o+"_"+n+`${M().getNumber("WEBGL_VERSION")}`,s}function ie(r){return M().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&r<=4}var Vx=class{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Pa.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let e=xe();this.outputShape=t,this.enableShapeUniforms=ie(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?Yl(["r","c","d"],t):en(["r","c","d"],t)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${e.output} = result;
      }
    `}};var Gx=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Pa.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let e=xe();this.outputShape=t,this.enableShapeUniforms=ie(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?Yl(["r","c","d"],t):en(["r","c","d"],t)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${e.output} = result;
      }
    `}};var Wx=class{constructor(t){this.variableNames=["A"],this.outTexUsage=mr.DOWNLOAD;let e=xe();this.outputShape=t,this.userCode=`
      ${Mx}

      void main() {
        float x = getAAtOutCoords();
        ${e.output} = encode_float(x);
      }
    `}};var Ux=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=mr.DOWNLOAD;let e=xe();this.outputShape=t,this.userCode=`
      ${Mx}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${e.output} = encode_float(x);
      }
    `}};var Hx=class{constructor(t,e=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];let o=xe();this.outputShape=t,this.enableShapeUniforms=ie(this.outputShape.length);let n="result";e&&(n="floor(result * 255. + 0.5)"),this.userCode=`
      ${this.enableShapeUniforms?Ep():kp(t)}

      void main() {
        ivec3 coords = getOutputCoords();

        int flatIndex = getFlatIndex(coords);
        int offset = imod(flatIndex, 4);

        flatIndex = idiv(flatIndex, 4, 1.);

        int r = flatIndex / texShape[1];
        int c = imod(flatIndex, texShape[1]);
        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
        vec4 values = ${o.texture2D}(A, uv);

        float result;

        if(offset == 0) {
          result = values[0];
        } else if(offset == 1) {
          result = values[1];
        } else if(offset == 2) {
          result = values[2];
        } else {
          result = values[3];
        }

        ${o.output} = vec4(${n}, 0., 0., 0.);
      }
    `}};var qx=class{constructor(t,e=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];let o=xe();this.outputShape=t,this.enableShapeUniforms=ie(this.outputShape.length);let n="",s="result";e&&(s="floor(result * 255. + 0.5)");for(let i=0;i<=1;i++)for(let a=0;a<=1;a++){let l=i*2+a;n+=`
          localCoords = coords;
          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":`${t[2]}`}) {
          localCoords[2] += ${a};
          if (localCoords[1] + ${i} < ${this.enableShapeUniforms?"outShape[1]":`${t[1]}`}) {
            localCoords[1] += ${i};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${o.texture2D}(A, uv);

            if (offset == 0) {
              result[${l}] = values[0];
            } else if (offset == 1) {
              result[${l}] = values[1];
            } else if (offset == 2) {
              result[${l}] = values[2];
            } else {
              result[${l}] = values[3];
            }
          }
        }
        `}this.userCode=`
        ${this.enableShapeUniforms?Ep():kp(t)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${n}

          ${o.output} = ${s};
        }
    `}};function X2(r){let t=xe(),e=`${t.version}
    precision highp float;
    ${t.attribute} vec3 clipSpacePos;
    ${t.attribute} vec2 uv;
    ${t.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;return C2(r,e)}function Y2(r){let t=new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]);return I2(r,t)}function Z2(r){let t=new Uint16Array([0,1,2,2,1,3]);return T2(r,t)}function eh(r,t,e,o,n,s){E2(t,e);let i=k2(r),a=r.TEXTURE_2D;return ht(r,()=>r.bindTexture(a,i)),ht(r,()=>r.texParameteri(a,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE)),ht(r,()=>r.texParameteri(a,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE)),ht(r,()=>r.texParameteri(a,r.TEXTURE_MIN_FILTER,r.NEAREST)),ht(r,()=>r.texParameteri(a,r.TEXTURE_MAG_FILTER,r.NEAREST)),M().getNumber("WEBGL_VERSION")===1?ht(r,()=>r.texImage2D(a,0,o,t,e,0,n,s,null)):ht(r,()=>r.texStorage2D(a,1,o,t,e)),ht(r,()=>r.bindTexture(r.TEXTURE_2D,null)),{texture:i,texShape:[e,t]}}function UC(r){return r.internalFormatFloat}function J2(r,t,e,o){let[n,s]=jl(t,e);return eh(r,n,s,UC(o),o.textureFormatFloat,r.FLOAT)}function HC(r){return r.internalFormatHalfFloat}function Q2(r,t,e,o){let[n,s]=jl(t,e);return eh(r,n,s,HC(o),o.textureFormatFloat,o.textureTypeHalfFloat)}function qC(r){return r.downloadTextureFormat}function tD(r,t,e,o){let[n,s]=jl(t,e);return eh(r,n,s,qC(o),r.RGBA,r.UNSIGNED_BYTE)}function KC(r){return r.internalFormatPackedFloat}function eD(r,t,e,o){let[n,s]=Rn(t,e);return eh(r,n,s,KC(o),r.RGBA,r.FLOAT)}function jC(r){return r.internalFormatPackedHalfFloat}function rD(r,t,e,o){let[n,s]=Rn(t,e);return eh(r,n,s,jC(o),r.RGBA,o.textureTypeHalfFloat)}function oD(r,t,e){return ht(r,()=>r.bindBuffer(r.ARRAY_BUFFER,e)),BC(r,t,"clipSpacePos",e,3,20,0)&&BC(r,t,"uv",e,2,20,12)}function nD(r,t,e,o,n,s){ht(r,()=>r.bindTexture(r.TEXTURE_2D,t));let i,a,l;n instanceof Uint8Array?(i=new Uint8Array(e*o*4),a=r.UNSIGNED_BYTE,l=r.RGBA):(i=new Float32Array(e*o*4),a=r.FLOAT,l=s.internalFormatPackedFloat),i.set(n),M().getNumber("WEBGL_VERSION")===2?ht(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,e,o,r.RGBA,a,i)):ht(r,()=>r.texImage2D(r.TEXTURE_2D,0,l,e,o,0,r.RGBA,a,i)),ht(r,()=>r.bindTexture(r.TEXTURE_2D,null))}function sD(r,t,e){ht(r,()=>r.bindTexture(r.TEXTURE_2D,t)),e.data instanceof Uint8Array?M().getNumber("WEBGL_VERSION")===2?ht(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,e.width,e.height,r.RGBA,r.UNSIGNED_BYTE,e.data)):ht(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,e.width,e.height,0,r.RGBA,r.UNSIGNED_BYTE,e.data)):M().getNumber("WEBGL_VERSION")===2?ht(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,r.RGBA,r.UNSIGNED_BYTE,e)):ht(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,e)),ht(r,()=>r.bindTexture(r.TEXTURE_2D,null))}function iD(r,t,e,o){let n=r.createBuffer();ht(r,()=>r.bindBuffer(r.PIXEL_PACK_BUFFER,n));let a=4*4*t*e;return ht(r,()=>r.bufferData(r.PIXEL_PACK_BUFFER,a,r.STREAM_READ)),ht(r,()=>r.readPixels(0,0,e,t,r.RGBA,r.FLOAT,0)),ht(r,()=>r.bindBuffer(r.PIXEL_PACK_BUFFER,null)),n}function aD(r,t,e){let o=r,n=new Float32Array(e);return o.bindBuffer(o.PIXEL_PACK_BUFFER,t),o.getBufferSubData(o.PIXEL_PACK_BUFFER,0,n),o.bindBuffer(o.PIXEL_PACK_BUFFER,null),n}function lD(r,t,e,o){let[n,s]=jl(t,e),i=4,a=new Uint8Array(y2(t*e,i));return ht(r,()=>r.readPixels(0,0,n,s,o.downloadTextureFormat,r.UNSIGNED_BYTE,a)),new Float32Array(a.buffer)}function uD(r,t,e,o,n,s,i,a){let l=r,u=new Float32Array(b2(s,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}function cD(r,t,e){let o=new Float32Array(t*e*4);return ht(r,()=>r.readPixels(0,0,e,t,r.RGBA,r.FLOAT,o)),o}var Jl=class{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];let e=M().getNumber("WEBGL_VERSION");t!=null?(this.gl=t,_C(e,t)):this.gl=Jr(e);let o="WEBGL_color_buffer_float",n="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),M().getNumber("WEBGL_VERSION")===1){let s="OES_texture_float",i="OES_texture_half_float";if(this.textureFloatExtension=Jf(this.gl,s),co(this.gl,i))this.textureHalfFloatExtension=Jf(this.gl,i);else if(M().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(o),co(this.gl,n))this.colorBufferHalfFloatExtension=Jf(this.gl,n);else if(M().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(o="EXT_color_buffer_float",co(this.gl,o))this.colorBufferFloatExtension=this.gl.getExtension(o);else if(co(this.gl,n))this.colorBufferHalfFloatExtension=this.gl.getExtension(n);else throw new Error("GL context does not support color renderable floats");this.vertexBuffer=Y2(this.gl),this.indexBuffer=Z2(this.gl),this.framebuffer=$2(this.gl),this.textureConfig=Zf(this.gl,this.textureHalfFloatExtension)}get debug(){return M().getBool("DEBUG")}dispose(){if(this.disposed)return;this.program!=null&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),this.outputTexture!=null&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");let t=this.gl;ht(t,()=>t.finish()),ht(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),ht(t,()=>t.deleteFramebuffer(this.framebuffer)),ht(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),ht(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),ht(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),J2(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),Q2(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),tD(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),sD(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,o,n){this.throwIfDisposed(),nD(this.gl,t,e,o,n,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),rD(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),eD(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(VC(this.gl,this.framebuffer),this.outputTexture=null),ht(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,o){return this.downloadMatrixDriver(t,()=>lD(this.gl,e,o,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,o,n,s,i){return uD(this.gl,t,e,o,n,s,i,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return aD(this.gl,t,e)}createBufferFromTexture(t,e,o){this.bindTextureToFrameBuffer(t);let n=iD(this.gl,e,o,this.textureConfig);return this.unbindTextureToFrameBuffer(),n}createAndWaitForFence(){let t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,o;if(M().getBool("WEBGL_FENCE_API_ENABLED")){let n=t,s=n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),o=()=>{let i=n.clientWaitSync(s,0,0);return i===n.ALREADY_SIGNALED||i===n.CONDITION_SATISFIED},e=s}else M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),o=()=>this.isQueryAvailable(e,M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):o=()=>!0;return{query:e,isFencePassed:o}}downloadMatrixFromPackedTexture(t,e,o){return this.downloadMatrixDriver(t,()=>cD(this.gl,e,o))}createProgram(t){this.throwIfDisposed();let e=this.gl;this.vertexShader==null&&(this.vertexShader=X2(e));let o=N2(e);return ht(e,()=>e.attachShader(o,this.vertexShader)),ht(e,()=>e.attachShader(o,t)),S2(e,o),this.debug&&Lx(e,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=oD(e,this.program,this.vertexBuffer)),o}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),t!=null&&ht(this.gl,()=>this.gl.deleteProgram(t))}setProgram(t){this.throwIfDisposed(),this.program=t,this.program!=null&&this.debug&&Lx(this.gl,this.program),ht(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,o=!0){return this.throwIfDisposed(),o?A2(this.gl,t,e):D2(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),ht(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,o){this.throwIfDisposed(),this.throwIfNoProgram(),F2(this.gl,t,e,o)}setOutputMatrixTexture(t,e,o){this.setOutputMatrixTextureDriver(t,o,e)}setOutputPackedMatrixTexture(t,e,o){this.throwIfDisposed();let[n,s]=Rn(e,o);this.setOutputMatrixTextureDriver(t,n,s)}setOutputMatrixWriteRegion(t,e,o,n){this.setOutputMatrixWriteRegionDriver(o,t,n,e)}setOutputPackedMatrixWriteRegion(t,e,o,n){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){this.program!=null&&Lx(this.gl,this.program),Qf(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();let t=this.gl;this.debug&&this.debugValidate(),ht(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),ht(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return this.disjointQueryTimerExtension==null&&(this.disjointQueryTimerExtension=Jf(this.gl,M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){let o=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=o.createQuery();return o.beginQuery(n.TIME_ELAPSED_EXT,s),s}let t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){let e=this.gl,o=this.getQueryTimerExtensionWebGL2();e.endQuery(o.TIME_ELAPSED_EXT);return}let t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await x.repeatedTry(()=>this.disposed||this.isQueryAvailable(t,M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(t,M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(e===0)return null;if(e===2){let o=this.gl;return o.getQueryParameter(t,o.QUERY_RESULT)/1e6}else{let o=this.getQueryTimerExtensionWebGL1();return o.getQueryObjectEXT(t,o.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(e===0)return!0;if(e===2){let o=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=o.getQueryParameter(t,o.QUERY_RESULT_AVAILABLE);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}else{let o=this.getQueryTimerExtensionWebGL1(),n=o.getQueryObjectEXT(t,o.QUERY_RESULT_AVAILABLE_EXT);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(o.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){let t=JK(this.itemsToPoll.map(e=>e.isDoneFn));for(let e=0;e<=t;++e){let{resolveFn:o}=this.itemsToPoll[e];o()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),!(this.itemsToPoll.length>1)&&x.repeatedTry(()=>(this.pollItems(),this.itemsToPoll.length===0))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),Px(this.gl,t,this.framebuffer),this.debug&&Qf(this.gl)}unbindTextureToFrameBuffer(){this.outputTexture!=null?(Px(this.gl,this.outputTexture,this.framebuffer),this.debug&&Qf(this.gl)):VC(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);let o=e();return this.unbindTextureToFrameBuffer(),o}setOutputMatrixTextureDriver(t,e,o){this.throwIfDisposed();let n=this.gl;Px(n,t,this.framebuffer),this.debug&&Qf(n),this.outputTexture=t,ht(n,()=>n.viewport(0,0,e,o)),ht(n,()=>n.scissor(0,0,e,o))}setOutputMatrixWriteRegionDriver(t,e,o,n){this.throwIfDisposed(),ht(this.gl,()=>this.gl.scissor(t,e,o,n))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(this.program==null)throw new Error("No GPU program is currently set.")}};function JK(r){let t=0;for(;t<r.length&&r[t]();++t);return t-1}var{addImpl:mD,bincountImpl:Kx,bincountReduceImpl:fD,ceilImpl:hD,concatImpl:dD,equalImpl:gD,expImpl:xD,expm1Impl:yD,floorImpl:bD,gatherNdImpl:wD,gatherV2Impl:CD,greaterImpl:vD,greaterEqualImpl:ND,lessImpl:SD,lessEqualImpl:ID,linSpaceImpl:TD,logImpl:kD,maxImpl:ED,maximumImpl:$D,minimumImpl:AD,multiplyImpl:DD,negImpl:FD,notEqualImpl:RD,prodImpl:_D,rangeImpl:OD,rsqrtImpl:LD,scatterImpl:PD,sigmoidImpl:zD,simpleAbsImpl:jx,sliceImpl:MD,sparseFillEmptyRowsImpl:BD,sparseReshapeImpl:VD,sparseSegmentReductionImpl:Xx,sqrtImpl:GD,stridedSliceImpl:WD,stringNGramsImpl:UD,stringSplitImpl:HD,stringToHashBucketFastImpl:qD,subImpl:KD,tileImpl:jD,topKImpl:XD,transposeImpl:Ql,uniqueImpl:YD}=Ax;function XC(r,t){return["x","y","z","w","u","v"].slice(0,t).map(e=>`${r}.${e}`)}function Ee(r,t){return t===1?[r]:XC(r,t)}function ZD(r,t){if(r===1)return"rc";let e="";for(let o=0;o<r;o++)e+=t[o],o<r-1&&(e+=",");return e}var Yx=class{constructor(t){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.enableShapeUniforms=ie(this.outputShape.length),this.rank===0)this.userCode=`
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;else{let e=Ee("rc",this.rank),o=$t(this.rank),n=this.getOutOfBoundsCondition(e),s=this.getSetup(e),i=this.getOutput(e);this.userCode=`
        void main() {
          ${o} rc = getOutputCoords();

          if(${n}) {
            setOutput(vec4(0));
          } else {
            ${s}

            setOutput(vec4(${i}));
          }
        }
      `}}getSourceCoordsArr(t){let e=[];for(let o=0;o<=1;o++)for(let n=0;n<=1;n++){let s=`${o===0?"r":"rp1"}, ${n===0?"c":"cp1"}`;for(let i=2;i<this.rank;i++)s=`${t[t.length-1-i]},`+s;e.push(s)}return e}getOutOfBoundsCondition(t){if(this.rank===1)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let e="";for(let o=this.rank-2;o<this.rank;o++)e+=`${t[o]} >= ${this.enableShapeUniforms?`outShape[${o}]`:this.outputShape[o]}`,o<this.rank-1&&(e+="||");return e}getSetup(t){if(this.rank===1)return"";let e=t.slice(-2),o=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],n=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`
      int r = ${e[0]};
      int c = ${e[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${o};
      bool rEdge = rp1 >= ${n};
    `}getOutput(t){let e=this.getSourceCoordsArr(t);return this.rank===1?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${e[0]}),
            cEdge ? 0. : getA(${e[1]}),
            rEdge ? 0. : getA(${e[2]}),
            rEdge || cEdge ? 0. : getA(${e[3]})`}};var _p=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=t,this.enableShapeUniforms=ie(this.outputShape.length);let o="";for(let n=0;n<4;n++){let s="thisRC = rc;";n%2===1&&(s+="thisRC.z += 1;"),n>1&&(s+="thisRC.y += 1;"),o+=`
        ${s}
        ${n>0?"if(thisRC.y < rows && thisRC.z < cols){":""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${n}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${n>0?"}":""}
      `}this.userCode=`
      ${QK(e,this.enableShapeUniforms)}
      ${this.enableShapeUniforms?Ep():kp(t)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms?"outShape[1]":t[1]};
        int cols = ${this.enableShapeUniforms?"outShape[2]":t[2]};

        ${o}

        setOutput(result);
      }
    `}};function QK(r,t){return`
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${t?B2(["r","c","d"],"inputShape"):en(["r","c","d"],r)}
      return ivec3(r, c, d);
    }
  `}var Zx=class{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,o){let n=QD(e,o),s=tF(t,n,o);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);let i=JD(t,n,this.gpgpu.gl,this.gpgpu.textureConfig,o);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=i,this.log();let l=this.freeTextures[s].shift();return this.usedTextures[s].push(l),l}let a;return n===or.PACKED_2X2_FLOAT32?a=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):n===or.PACKED_2X2_FLOAT16?a=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):n===or.UNPACKED_FLOAT32?a=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):n===or.UNPACKED_FLOAT16?a=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):n===or.PACKED_4X1_UNSIGNED_BYTE&&(a=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[s].push(a),this.numUsedTextures++,this._numBytesAllocated+=i,this.log(),a}releaseTexture(t,e,o,n){if(this.freeTextures==null)return;let s=QD(o,n),i=tF(e,s,n);i in this.freeTextures||(this.freeTextures[i]=[]);let a=JD(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n),l=M().get("WEBGL_DELETE_TEXTURE_THRESHOLD");l!==-1&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(t.texture),this._numBytesAllocated-=a):(this.freeTextures[i].push(t),this.numFreeTextures++,this._numBytesFree+=a),this.numUsedTextures--;let u=this.usedTextures[i],c=u.indexOf(t);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(c,1),this.log()}log(){if(!this.logEnabled)return;let t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`);let e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(this.freeTextures!=null){for(let t in this.freeTextures)this.freeTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(let t in this.usedTextures)this.usedTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}};function tj(r,t){let e=r;if(t===e.R32F)return 4;if(t===e.R16F)return 2;if(t===e.RGBA32F)return 16;if(t===r.RGBA)return 16;if(t===e.RGBA16F)return 8;if(t===e.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}function JD(r,t,e,o,n){let s=ej(t,o),i;if(n){let[l,u]=Rn(r[0],r[1]);i=l*u}else{let[l,u]=jl(r[0],r[1]);i=l*u}let a=tj(e,s);return i*a}function ej(r,t){switch(r){case or.PACKED_2X2_FLOAT32:return KC(t);case or.PACKED_2X2_FLOAT16:return jC(t);case or.UNPACKED_FLOAT32:return UC(t);case or.UNPACKED_FLOAT16:return HC(t);case or.PACKED_4X1_UNSIGNED_BYTE:return qC(t);default:throw new Error(`Unknown physical texture type ${r}`)}}function rj(r){return M().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?r?or.PACKED_2X2_FLOAT32:or.UNPACKED_FLOAT32:r?or.PACKED_2X2_FLOAT16:or.UNPACKED_FLOAT16}function QD(r,t){if(r===mr.UPLOAD)return or.PACKED_2X2_FLOAT32;if(r===mr.RENDER||r==null)return rj(t);if(r===mr.DOWNLOAD||r===mr.PIXELS)return or.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${r}`)}function tF(r,t,e){return`${r[0]}_${r[1]}_${t}_${e}`}var br=class{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.enableShapeUniforms=ie(this.outputShape.length),this.userCode=`
      float unaryOperation(float x) {
        ${e}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `}},Ge="if (isnan(x)) return x;",eF="return x;",YC="return abs(x);";var rF="return (x >= 0.0) ? x : (exp(x) - 1.0);",oF=Ge+`
  return (x < 0.0) ? 0.0 : x;
`,nF=Ge+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,tu="return x;",sF="return 1.0 / (1.0 + exp(-1.0 * x));";var aF="return x;",lF=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,uF=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,cF=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,pF="return 1.0 / (1.0 + exp(-1.0 * x));",po=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.enableShapeUniforms=ie(this.outputShape.length),this.userCode=`
      vec4 unaryOperation(vec4 x) {
        ${e}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `}};var Jx=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t,this.enableShapeUniforms=ie(this.outputShape.length);let e=t.length,o=Ee("rc",e),n=$t(e),s=ZD(e,o),i=o.slice(-2),a=e<=1?"rc":`vec2(${i.join(",")})`;this.userCode=`
      void main() {
        ${n} rc = getOutputCoords();
        vec4 packedInput = getA(${s});

        setOutput(getChannel(packedInput, ${a}));
      }
    `}};var nj=ur.whereImpl,sj=1e-7,ij=1e-4,Qx={};function aj(r){return r in Qx||(Qx[r]={}),Qx[r]}var lj=M().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"),uj=600;function cj(){return M().global.screen==null?1024:M().global.screen.height*M().global.screen.width*window.devicePixelRatio*uj/1024/1024}var Ba=class extends Pn{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!M().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let e;if(t!=null){if(t instanceof Jl)e=t;else{let o=Jr(M().getNumber("WEBGL_VERSION"),t);e=new Jl(o)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{let o=Jr(M().getNumber("WEBGL_VERSION"));e=new Jl(o),this.binaryCache=aj(M().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=e,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new Zx(this.gpgpu),this.numMBBeforeWarning=cj(),this.texData=new qa(this,dn())}nextDataId(){return Ba.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(t,e,o){if((M().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||M().getBool("DEBUG"))&&this.checkNumericalProblems(t),o==="complex64"&&t!=null)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let n={id:this.nextDataId()};return this.texData.set(n,{shape:e,dtype:o,values:t,usage:mr.UPLOAD,refCount:1}),n}refCount(t){return this.texData.has(t)?this.texData.get(t).refCount:0}incRef(t){let e=this.texData.get(t);e.refCount++}decRef(t){if(this.texData.has(t)){let e=this.texData.get(t);e.refCount--}}move(t,e,o,n,s){if(M().getBool("DEBUG")&&this.checkNumericalProblems(e),n==="complex64")throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:o,dtype:n,values:e,usage:mr.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(t){this.disposeData(t.dataId)}readSync(t){let e=this.texData.get(t),{values:o,dtype:n,complexTensorInfos:s,slice:i,shape:a,isPacked:l}=e;if(i!=null){let m;l?m=new po(a,tu):m=new br(a,tu);let f=this.runWebGLProgram(m,[{dataId:t,shape:a,dtype:n}],n),h=this.readSync(f.dataId);return this.disposeIntermediateTensorInfo(f),h}if(o!=null)return this.convertAndCacheOnCPU(t);if(n==="string")return o;let u=this.activeTimers!=null,c;u&&(c=x.now());let p;if(n==="complex64"){let m=this.readSync(s.real.dataId),f=this.readSync(s.imag.dataId);p=T.mergeRealAndImagArrays(m,f)}else p=this.getValuesFromTexture(t);return u&&(this.downloadWaitMs+=x.now()-c),this.convertAndCacheOnCPU(t,p)}async read(t){if(this.pendingRead.has(t)){let h=this.pendingRead.get(t);return new Promise(d=>h.push(d))}let e=this.texData.get(t),{values:o,shape:n,slice:s,dtype:i,complexTensorInfos:a,isPacked:l}=e;if(s!=null){let h;l?h=new po(n,tu):h=new br(n,tu);let d=this.runWebGLProgram(h,[{dataId:t,shape:n,dtype:i}],i),g=this.read(d.dataId);return this.disposeIntermediateTensorInfo(d),g}if(o!=null)return this.convertAndCacheOnCPU(t);if(M().getBool("DEBUG")&&!M().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&M().getNumber("WEBGL_VERSION")===2)throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u=null,c;if(i!=="complex64"&&M().get("WEBGL_BUFFER_SUPPORTED")){c=this.decode(t);let h=this.texData.get(c.dataId);u=this.gpgpu.createBufferFromTexture(h.texture.texture,...Yf(n))}this.pendingRead.set(t,[]),i!=="complex64"&&await this.gpgpu.createAndWaitForFence();let p;if(i==="complex64"){let h=await Promise.all([this.read(a.real.dataId),this.read(a.imag.dataId)]),d=h[0],g=h[1];p=T.mergeRealAndImagArrays(d,g)}else if(u==null)p=this.getValuesFromTexture(t);else{let h=x.sizeFromShape(n);p=this.gpgpu.downloadFloat32MatrixFromBuffer(u,h)}if(c!=null&&this.disposeIntermediateTensorInfo(c),u!=null){let h=this.gpgpu.gl;ht(h,()=>h.deleteBuffer(u))}let m=this.convertAndCacheOnCPU(t,p),f=this.pendingRead.get(t);return this.pendingRead.delete(t),f.forEach(h=>h(m)),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t)&&dn().removeDataId(t,this),this.pendingDeletes--),m}readToGPU(t,e={}){let o=this.texData.get(t),{values:n,shape:s,slice:i,dtype:a,isPacked:l,texture:u}=o;if(a==="complex64")throw new Error("Does not support reading texture for complex64 dtype.");if(i!=null){let f;l?f=new po(s,tu):f=new br(s,tu);let h=this.runWebGLProgram(f,[{dataId:t,shape:s,dtype:a}],a),d=this.readToGPU(h,e);return this.disposeIntermediateTensorInfo(h),d}if(u==null)throw n!=null?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");let c=this.decode(t,e.customTexShape),p=dn().makeTensorFromTensorInfo(c),m=this.texData.get(c.dataId);return Object.assign({tensorRef:p},m.texture)}bufferSync(t){let e=this.readSync(t.dataId);if(t.dtype==="string")try{let o=e.map(n=>x.decodeString(n));return pt(t.shape,t.dtype,o)}catch(o){throw new Error("Failed to decode encoded string bytes into utf-8")}return pt(t.shape,t.dtype,e)}checkNumericalProblems(t){if(t!=null)for(let e=0;e<t.length;e++){let o=t[e];if(!w2(o))throw M().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${o} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${o} cannot be represented on this device.`)}}getValuesFromTexture(t){let{shape:e,dtype:o,isPacked:n}=this.texData.get(t),s=x.sizeFromShape(e);if(M().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){let m=this.decode(t),f=this.texData.get(m.dataId),h=this.gpgpu.downloadMatrixFromPackedTexture(f.texture.texture,...Yf(e)).subarray(0,s);return this.disposeIntermediateTensorInfo(m),h}let i=M().getBool("WEBGL_PACK")&&n===!0,a=i?zx(e):e,l=i?new Ux(a):new Wx(a),u=this.runWebGLProgram(l,[{shape:a,dtype:o,dataId:t}],"float32"),c=this.texData.get(u.dataId),p=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture.texture,c.texShape[0],c.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(u),p}timerAvailable(){return M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(t){let e=this.activeTimers,o=[],n=!1;this.programTimersStack==null?(this.programTimersStack=o,n=!0):this.activeTimers.push(o),this.activeTimers=o,t();let s=x.flatten(this.activeTimers.map(l=>l.query)).filter(l=>l!=null),i=x.flatten(this.activeTimers.map(l=>l.name)).filter(l=>l!=null);this.activeTimers=e,n&&(this.programTimersStack=null);let a={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){let l=await Promise.all(s);a.kernelMs=x.sum(l),a.getExtraProfileInfo=()=>l.map((u,c)=>({name:i[c],ms:u})).map(u=>`${u.name}: ${u.ms}`).join(", ")}else a.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,a})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:x.now(),endMs:null}}endTimer(t){return M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=x.now(),t)}async getQueryTime(t){if(M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);let e=t;return e.endMs-e.startMs}disposeData(t,e=!1){if(this.pendingDisposal.has(t))return!1;if(!this.texData.has(t))return!0;if(e?this.texData.get(t).refCount=0:this.texData.get(t).refCount--,!e&&this.texData.get(t).refCount>0)return!1;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),this.pendingDeletes++,!1;this.releaseGPUData(t);let{complexTensorInfos:o}=this.texData.get(t);return o!=null&&(this.disposeData(o.real.dataId,e),this.disposeData(o.imag.dataId,e)),this.texData.delete(t),!0}releaseGPUData(t){let{texture:e,dtype:o,texShape:n,usage:s,isPacked:i,slice:a}=this.texData.get(t),l=a&&a.origDataId||t,u=this.dataRefCount.get(l);u>1?this.dataRefCount.set(l,u-1):(this.dataRefCount.delete(l),e!=null&&(this.numBytesInGPU-=this.computeBytes(n,o),this.textureManager.releaseTexture(e,n,s,i)));let c=this.texData.get(t);c.texture=null,c.texShape=null,c.isPacked=!1,c.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture.texture}getDataInfo(t){return this.texData.get(t)}shouldExecuteOnCPU(t,e=lj){return M().getBool("WEBGL_CPU_FORWARD")&&t.every(o=>this.texData.get(o.dataId).texture==null&&x.sizeFromShape(o.shape)<e)}getGPGPUContext(){return this.gpgpu}where(t){T.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");let e=t.dataSync();return nj(t.shape,e)}packedUnaryOp(t,e,o){let n=new po(t.shape,e),s=this.compileAndRun(n,[t],o);return dn().makeTensorFromTensorInfo(s)}abs(t){if(this.shouldExecuteOnCPU([t])&&t.dtype!=="complex64"){let n=jx(this.texData.get(t.dataId).values);return this.makeOutput(t.shape,t.dtype,n)}if(M().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,YC,t.dtype);let e=new br(t.shape,YC),o=this.compileAndRun(e,[t]);return dn().makeTensorFromTensorInfo(o)}makeTensorInfo(t,e,o){let n;if(e==="string"&&o!=null&&o.length>0&&x.isString(o[0])){let s=o.map(i=>x.encodeString(i));n=this.write(s,t,e)}else n=this.write(o,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}}makeOutput(t,e,o){return dn().makeTensorFromTensorInfo(this.makeTensorInfo(t,e,o),this)}unpackTensor(t){let e=new Jx(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){let e=new Yx(t.shape),o=!0;return this.runWebGLProgram(e,[t],t.dtype,null,o)}packedReshape(t,e){let o=[za(t.shape),...Ma(t.shape)],n={dtype:t.dtype,shape:o,dataId:t.dataId},s=[za(e),...Ma(e)],i=new _p(s,o),a=!0,l=[o],u=this.runWebGLProgram(i,[n],t.dtype,l,a);return{dataId:u.dataId,shape:e,dtype:u.dtype}}decode(t,e){let o=this.texData.get(t),{isPacked:n,shape:s,dtype:i}=o;if(e!=null){let m=x.sizeFromShape(s),f=e[0]*e[1]*4;x.assert(m<=f,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}let a=zx(s),l;n?l=new Gx(a):l=new Vx(a);let u=!0,c=[e!=null?e:Yf(a)],p=this.runWebGLProgram(l,[{shape:a,dtype:i,dataId:t}],i,c,u,e);return{dtype:i,shape:s,dataId:p.dataId}}runWebGLProgram(t,e,o,n,s=!1,i){let a=this.makeTensorInfo(t.outputShape,o),l=this.texData.get(a.dataId);if(t.packedOutput&&(l.isPacked=!0),t.outPackingScheme===Pa.DENSE){let y=i!=null?i:Yf(t.outputShape);l.texShape=y.map(b=>b*2)}if(t.outTexUsage!=null&&(l.usage=t.outTexUsage),x.sizeFromShape(a.shape)===0)return l.values=x.getTypedArrayFromDType(a.dtype,0),a;let u=[],c=e.map(y=>{if(y.dtype==="complex64")throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let b=this.texData.get(y.dataId);if(b.texture==null){if(!t.packedInputs&&x.sizeFromShape(y.shape)<=M().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:y.shape,texData:null,isUniform:!0,uniformValues:b.values};t.packedInputs&&(b.isPacked=!0,b.shape=y.shape)}if(this.uploadToGPU(y.dataId),!!b.isPacked!=!!t.packedInputs)y=b.isPacked?this.unpackTensor(y):this.packTensor(y),u.push(y),b=this.texData.get(y.dataId);else if(b.isPacked&&!Xl(b.shape,y.shape)){let w=y,C=y.shape;y.shape=b.shape,y=this.packedReshape(y,C),u.push(y),b=this.texData.get(y.dataId),w.shape=C}return{shape:y.shape,texData:b,isUniform:!1}});this.uploadToGPU(a.dataId);let p={shape:a.shape,texData:l,isUniform:!1},m=j2(t,c,p),f=this.getAndSaveBinary(m,()=>q2(this.gpgpu,t,c,p)),h=this.activeTimers!=null,d;h&&(d=this.startTimer()),M().get("ENGINE_COMPILE_ONLY")||K2(this.gpgpu,f,c,p,n),u.forEach(y=>this.disposeIntermediateTensorInfo(y)),h&&(d=this.endTimer(d),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(d)}));let g=M().get("WEBGL_FLUSH_THRESHOLD");if(g>0){let y=x.now();y-this.lastGlFlushTime>g&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=y)}if(!M().getBool("WEBGL_LAZILY_UNPACK")&&l.isPacked&&s===!1){let y=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),y}return a}compileAndRun(t,e,o,n,s=!1){return o=o||e[0].dtype,this.runWebGLProgram(t,e,o,n,s)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(M().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}),this.textureManager.dispose(),this.canvas!=null&&typeof HTMLCanvasElement!="undefined"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return this.floatPrecisionValue==null&&(this.floatPrecisionValue=z(()=>{if(!M().get("WEBGL_RENDER_FLOAT32_ENABLED")){let t=M().getBool("DEBUG");M().set("DEBUG",!1);let e=this.abs(nt(1e-8)).dataSync()[0];if(M().set("DEBUG",t),e>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return this.floatPrecision()===32?sj:ij}uploadToGPU(t){let e=this.texData.get(t),{shape:o,dtype:n,values:s,texture:i,usage:a,isPacked:l}=e;if(i!=null)return;let u=this.activeTimers!=null,c;u&&(c=x.now());let p=e.texShape;if(p==null&&(p=R2(o,l),e.texShape=p),s!=null){let m=zx(o),f,h=p[1],d=p[0],g=s instanceof Uint8Array||s instanceof Uint8ClampedArray;(l||!g)&&([h,d]=Rn(p[0],p[1])),l?f=new qx(m,g):f=new Hx(m,g);let y=g?[d,h]:p,b=this.makeTensorInfo(y,n),w=this.texData.get(b.dataId);g?w.usage=mr.PIXELS:w.usage=mr.UPLOAD,w.texShape=y,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId),h,d,s);let C=[[d,h]],I=!0,$=this.runWebGLProgram(f,[b],n,C,I),A=this.texData.get($.dataId);e.texShape=A.texShape,e.isPacked=A.isPacked,e.usage=A.usage,M().get("ENGINE_COMPILE_ONLY")?this.disposeData($.dataId):(e.texture=A.texture,e.values=null,this.texData.delete($.dataId)),this.disposeIntermediateTensorInfo(b),u&&(this.uploadWaitMs+=x.now()-c)}else{let m=this.acquireTexture(p,a,n,l);e.texture=m}}convertAndCacheOnCPU(t,e){let o=this.texData.get(t),{dtype:n}=o;return this.releaseGPUData(t),e!=null&&(o.values=pj(e,n)),o.values}acquireTexture(t,e,o,n){if(this.numBytesInGPU+=this.computeBytes(t,o),!this.warnedAboutMemory&&this.numBytesInGPU>this.numMBBeforeWarning*1024*1024){let s=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${s} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,n)}computeBytes(t,e){return t[0]*t[1]*x.bytesPerElement(e)}checkCompileCompletion(){for(let[,t]of Object.entries(this.binaryCache))this.checkCompletion_(t)}async checkCompileCompletionAsync(){let t=[];if(this.gpgpu.parallelCompilationExtension){for(let[,e]of Object.entries(this.binaryCache))t.push(this.checkCompletionAsync_(e));return Promise.all(t)}else{for(let[,e]of Object.entries(this.binaryCache)){let o=new Promise(n=>{try{this.checkCompletion_(e),n(!0)}catch(s){throw s}});t.push(o)}return Promise.all(t)}}async checkCompletionAsync_(t){return this.gpgpu.gl.getProgramParameter(t.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(t):(await fm(),this.checkCompletionAsync_(t))}checkCompletion_(t){if(this.gpgpu.gl.getProgramParameter(t.webGLProgram,this.gpgpu.gl.LINK_STATUS)===!1)throw console.log(this.gpgpu.gl.getProgramInfoLog(t.webGLProgram)),this.gpgpu.gl.getShaderParameter(t.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)===!1?(MC(t.source,this.gpgpu.gl.getShaderInfoLog(t.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(let[,t]of Object.entries(this.binaryCache)){let{uniformLocations:e,customUniformLocations:o,infLoc:n,nanLoc:s,inShapesLocations:i,inTexShapesLocations:a,outShapeLocation:l,outShapeStridesLocation:u,outTexShapeLocation:c}=WC(this.gpgpu,t.program,t.webGLProgram);t.uniformLocations=e,t.customUniformLocations=o,t.infLoc=n,t.nanLoc=s,t.inShapesLocations=i,t.inTexShapesLocations=a,t.outShapeLocation=l,t.outShapeStridesLocation=u,t.outTexShapeLocation=c}}};Ba.nextDataId=0;function pj(r,t){if(t==="float32"||t==="complex64")return r;if(t==="int32"||t==="bool"){let e=t==="int32"?new Int32Array(r.length):new Uint8Array(r.length);for(let o=0;o<e.length;++o)e[o]=Math.round(r[o]);return e}else throw new Error(`Unknown dtype ${t}`)}ta.isBrowser()&&$h("webgl",()=>new Ba,2);var ty=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;var mo=class{constructor(t,e,o){this.variableNames=["A","B"],this.outputShape=T.assertAndGetBroadcastShape(e,o),this.enableShapeUniforms=ie(this.outputShape.length),this.userCode=`
      float binaryOperation(float a, float b) {
        ${t}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `}};var Va=`
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`;var Po=class{constructor(t,e,o,n=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=T.assertAndGetBroadcastShape(e,o);let s=this.outputShape.length;this.enableShapeUniforms=ie(s);let i="";if(n)if(s===0||x.sizeFromShape(this.outputShape)===1)i=`
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;else if(i=`
          ${$t(s)} coords = getOutputCoords();
        `,s===1)this.enableShapeUniforms?i+=`
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `:i+=`
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;else{let l=Ee("coords",s);this.enableShapeUniforms?i+=`
            bool nextRowOutOfBounds =
              (${l[s-2]} + 1) >= outShape[${s} - 2];
            bool nextColOutOfBounds =
              (${l[s-1]} + 1) >= outShape[${s} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `:i+=`
            bool nextRowOutOfBounds =
              (${l[s-2]} + 1) >= ${this.outputShape[s-2]};
            bool nextColOutOfBounds =
              (${l[s-1]} + 1) >= ${this.outputShape[s-1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `}this.userCode=`
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${t}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${i}

        setOutput(result);
      }
    `}};function $e(r){let{inputs:t,backend:e}=r,{x:o}=t;return e.incRef(o.dataId),{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}var mF={kernelName:an,backendName:"webgl",kernelFunc:$e};function Wr(r){let{inputs:t,backend:e}=r,{real:o,imag:n}=t,s=e.makeTensorInfo(o.shape,"complex64"),i=e.texData.get(s.dataId),a=$e({inputs:{x:o},backend:e}),l=$e({inputs:{x:n},backend:e});return i.complexTensorInfos={real:a,imag:l},s}var fF={kernelName:xu,backendName:"webgl",kernelFunc:Wr};var ZC="return (a < 0.) ? b * a : a;",JC=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function fj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{alpha:s}=o,i=e.makeTensorInfo([],"float32",x.createScalarValue(s,"float32")),a=M().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Po(JC,n.shape,i.shape):new mo(ZC,n.shape,i.shape),l=e.runWebGLProgram(a,[n,i],"float32");return e.disposeIntermediateTensorInfo(i),l}var hF={kernelName:Si,backendName:"webgl",kernelFunc:fj};var QC="return (a < 0.) ? b * a : a;",tv=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function hj(r){let{inputs:t,backend:e}=r,{x:o,alpha:n}=t,s=M().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Po(tv,o.shape,n.shape):new mo(QC,o.shape,n.shape);return e.runWebGLProgram(s,[o,n],"float32")}var dF={kernelName:Pi,backendName:"webgl",kernelFunc:hj};var zo="if (isnan(x)) return x;",gF=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`,xF=`
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`;function ft({opSnippet:r,packedOpSnippet:t,cpuKernelImpl:e,dtype:o}){return({inputs:n,backend:s})=>{let{x:i}=n,a=s,l=o||i.dtype;if(a.shouldExecuteOnCPU([i])&&e!=null){let p=a.texData.get(i.dataId),m=e(p.values,l);return a.makeTensorInfo(i.shape,l,m)}let u=M().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&t!=null,c;return u?c=new po(i.shape,t):c=new br(i.shape,r),a.runWebGLProgram(c,[i],l)}}function Wt({opSnippet:r,packedOpSnippet:t,checkOutOfBounds:e=!1,supportsComplex:o=!1,cpuKernelImpl:n,dtype:s}){return({inputs:i,backend:a})=>{let{a:l,b:u}=i,c=a;if(o&&l.dtype==="complex64"){let h=c.texData.get(l.dataId),d=c.texData.get(u.dataId),[g,y]=[[h.complexTensorInfos.real,d.complexTensorInfos.real],[h.complexTensorInfos.imag,d.complexTensorInfos.imag]].map(w=>{let[C,I]=w,$={dataId:C.dataId,dtype:C.dtype,shape:l.shape},A={dataId:I.dataId,dtype:I.dtype,shape:u.shape},_=new mo(r,l.shape,u.shape);return c.runWebGLProgram(_,[$,A],Re(C.dtype,I.dtype))}),b=Wr({inputs:{real:g,imag:y},backend:c});return c.disposeIntermediateTensorInfo(g),c.disposeIntermediateTensorInfo(y),b}let p=s||Re(l.dtype,u.dtype);if((l.dtype==="string"||u.dtype==="string"||c.shouldExecuteOnCPU([l,u]))&&n!=null){let h=c.texData.get(l.dataId).values,d=c.texData.get(u.dataId).values,g=l.dtype==="string"?T.fromUint8ToStringArray(h):h,y=l.dtype==="string"?T.fromUint8ToStringArray(d):d,[b,w]=n(l.shape,u.shape,g,y,p),C=c.makeTensorInfo(w,p),I=c.texData.get(C.dataId);return I.values=b,C}let m=M().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&t!=null,f;return m?f=new Po(t,l.shape,u.shape,e):f=new mo(r,l.shape,u.shape),c.runWebGLProgram(f,[l,u],p)}}function Ga(r,t=!1){if(r==="linear")return t?aF:eF;if(r==="relu")return t?uF:oF;if(r==="elu")return t?lF:rF;if(r==="relu6")return t?cF:nF;if(r==="prelu")return t?tv:QC;if(r==="leakyrelu")return t?JC:ZC;if(r==="sigmoid")return t?pF:sF;throw new Error(`Activation ${r} has not been implemented for the WebGL backend.`)}var Op=class{constructor(t,e,o,n=!1,s=!1,i=!1,a=null,l=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=o,this.enableShapeUniforms=ie(this.outputShape.length);let c=n?t[1]:t[2],p=Math.ceil(c/2),m=n?"i * 2, rc.y":"rc.y, i * 2",f=s?"rc.z, i * 2":"i * 2, rc.z",h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],g="",y="";a&&(l?g=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${a}
        }`:u?g=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${a}
        }`:g=`vec4 activation(vec4 x) {
          ${a}
        }`,y="result = activation(result);");let b=i?"result += getBiasAtOutCoords();":"";i&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let w="rc.x",C="rc.x";t[0]<e[0]?w=`int(min(float(rc.x), ${t[0]-1}.))`:e[0]<t[0]&&(C=`int(min(float(rc.x), ${e[0]-1}.))`),this.userCode=`
      ${g}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${p}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        for (int i = 0; i < ${p}; i++) {
          int batchA = ${w};
          int batchB = ${C};
          vec4 a = getMatrixA(batchA, ${m});
          vec4 b = getMatrixB(batchB, ${f});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${h[0]} * ${d[0]});
          result += (${h[1]} * ${d[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${b}

        ${y}

        setOutput(result);
      }
    `}};var ev={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"},rh=class{constructor(t,e,o){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=T.assertAndGetBroadcastShape(e,o),this.userCode=`
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${t}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `}};var yF="return a * b;";function oh(r){let{inputs:t,backend:e}=r,{a:o,b:n}=t,s=T.upcastType(o.dtype,n.dtype);if(o.dtype==="complex64"){let a=e.texData.get(o.dataId),l=e.texData.get(n.dataId),u=new rh(ev.REAL,o.shape,n.shape),c=new rh(ev.IMAG,o.shape,n.shape),p=[{dataId:a.complexTensorInfos.real.dataId,dtype:a.complexTensorInfos.real.dtype,shape:o.shape},{dataId:a.complexTensorInfos.imag.dataId,dtype:a.complexTensorInfos.imag.dtype,shape:o.shape},{dataId:l.complexTensorInfos.real.dataId,dtype:l.complexTensorInfos.real.dtype,shape:n.shape},{dataId:l.complexTensorInfos.imag.dataId,dtype:l.complexTensorInfos.imag.dtype,shape:n.shape}],m=e.runWebGLProgram(u,p,"float32"),f=e.runWebGLProgram(c,p,"float32"),h=Wr({inputs:{real:m,imag:f},backend:e});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),h}if(e.shouldExecuteOnCPU([o,n])){let a=e.texData.get(o.dataId),l=e.texData.get(n.dataId),[u,c]=DD(o.shape,n.shape,a.values,l.values,s),p=e.makeTensorInfo(c,s),m=e.texData.get(p.dataId);return m.values=u,p}let i;return M().getBool("WEBGL_PACK_BINARY_OPERATIONS")?i=new Po(yF,o.shape,n.shape):i=new mo(yF,o.shape,n.shape),e.runWebGLProgram(i,[o,n],s)}var bF={kernelName:fs,backendName:"webgl",kernelFunc:oh};function wF(r,t,e){let o=[za(r.shape),...Ma(r.shape)],n={dtype:r.dtype,shape:o,dataId:r.dataId},s=[za(t),...Ma(t)],i=new _p(s,o),a=!0,l=[o],u=e.runWebGLProgram(i,[n],r.dtype,l,a);return{dataId:u.dataId,shape:t,dtype:u.dtype}}function Q(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{shape:s}=o,i=e,a=x.sizeFromShape(n.shape),l=x.inferFromImplicitShape(s,a),u=x.sizeFromShape(l);x.assert(a===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${n.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`);let c=i.texData.get(n.dataId);return c.isPacked&&!Xl(n.shape,l)&&!(c.texture!==null&&Xl(c.shape,l))?wF(n,l,i):(i.incRef(n.dataId),{dataId:n.dataId,shape:l,dtype:n.dtype})}var CF={kernelName:Mi,backendName:"webgl",kernelFunc:Q};var nh=class{constructor(t,e){this.variableNames=["x"];let{windowSize:o,batchSize:n,inSize:s,outSize:i}=t;this.outputShape=[n,i];let a=Math.floor(o/4)*4,l=o%4,u="sumValue += dot(values, ones);";if(e!=null){let p=1/e;u=`sumValue += dot(values * ${x.isInt(p)?p.toPrecision(2):p}, ones);`}let c="";s%o>0&&(c=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return 0.0;
        }
      `),this.userCode=`
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${c}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        float sumValue = 0.0;

        for (int i = 0; i < ${a}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${u}
        }

        int inIdx = inOffset + ${a};
        if (${l===1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${u}
        } else if (${l===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${u}
        } else if (${l===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${u}
        }
        setOutput(sumValue);
      }
    `}};var ey=class{constructor(t,e){this.variableNames=["x"];let{windowSize:o,batchSize:n,inSize:s,outSize:i}=t;this.outputShape=[n,i];let a="0.0",l="";e==="prod"?a="1.0":e==="min"?(a="1.0 / 1e-20",l="min"):e==="max"&&(a="-1.0 / 1e-20",l="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;e==="sum"?u="sumValue":e==="prod"?u="prodValue":e==="all"?u="allValue":e==="any"&&(u="anyValue");let c=Math.floor(o/4)*4,p=o%4,m=`
      if (${e==="sum"}) {
        sumValue += dot(values, ones);
      } else if (${e==="prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${l}(values, minMaxValue);
        if (${e==="min"} || ${e==="max"}) {
          minMaxValue = ${l}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `,f="vec4";e==="all"?(a="1.0",m=`
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `,f="bvec4"):e==="any"&&(a="0.0",m=`
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `,f="bvec4");let h="";s%o>0&&(h=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `),this.userCode=`
      const float initializationValue = ${a};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${h}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        vec4 minMaxValue = vec4(${a});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${p===1}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${p===2}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${p===3}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${m}
        }
        setOutput(${u});
      }
    `}};function gj(r){let t=[];for(;t.length===0||t[t.length-1].outSize!==1;){let e=t.length?t[t.length-1].outSize:r[1],o=T.computeOptimalWindowSize(e);t.push({inSize:e,windowSize:o,outSize:Math.ceil(e/o)})}return t}function Qr(r,t,e,o){let n=gj(r.shape),s=r;for(let i=0;i<n.length;i++){let{inSize:a,windowSize:l,outSize:u}=n[i],c,p;e==="mean"?c=i===0?new nh({windowSize:l,inSize:a,batchSize:r.shape[0],outSize:u},a):new nh({windowSize:l,inSize:a,batchSize:r.shape[0],outSize:u}):c=new ey({windowSize:l,inSize:a,batchSize:r.shape[0],outSize:u},e),p=s,s=o.runWebGLProgram(c,[s],t),p.dataId!==r.dataId&&o.disposeIntermediateTensorInfo(p)}return s}var ry=class{constructor(t,e){this.variableNames=["A"];let o=new Array(t.length);for(let i=0;i<o.length;i++)o[i]=t[e[i]];this.outputShape=o,this.rank=o.length;let n=$t(this.rank),s=xj(e);this.userCode=`
    void main() {
      ${n} resRC = getOutputCoords();
      setOutput(getA(${s}));
    }
    `}};function xj(r){let t=r.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);let e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],o=new Array(t);for(let n=0;n<r.length;n++)o[r[n]]=e[n];return o.join()}var oy=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;let o=new Array(t.length);for(let c=0;c<o.length;c++)o[c]=t[e[c]];if(this.outputShape=o,this.rank=o.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);let n=$t(this.rank),s=XC("rc",this.rank),i=new Array(this.rank);for(let c=0;c<e.length;c++)i[e[c]]=s[c];let a=`vec2(${i.slice(-2).join()})`,l=`++${s[this.rank-1]} < ${o[this.rank-1]}`,u=`getChannel(getA(${i.join()}), ${a})`;this.userCode=`
    void main() {
      ${n} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${u};
      if(${l}) {
        result[1] = ${u};
      }
      --${s[this.rank-1]};
      if(++${s[this.rank-2]} < ${o[this.rank-2]}) {
        result[2] = ${u};
        if(${l}) {
          result[3] = ${u};
        }
      }
      setOutput(result);
    }
    `}};function Wa(r,t,e){let o=M().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new oy(r.shape,t):new ry(r.shape,t);return e.runWebGLProgram(o,[r],r.dtype)}function vF(r,t,e,o){let n=t,s=r.shape.length,i=x.parseAxisParam(n,r.shape),a=i,l=T.getAxesPermutation(a,s),u=l!=null,c=r;u&&(c=Wa(r,l,o),a=T.getInnerMostAxes(a.length,s)),T.assertAxesAreInnerMostDims("sum",a,s);let[p,m]=T.computeOutAndReduceShapes(c.shape,a),f=p;e&&(f=T.expandShapeToKeepDim(p,i));let h=x.sizeFromShape(m),g=x.sizeFromShape(r.shape)/h,y=Q({inputs:{x:c},attrs:{shape:[g,h]},backend:o}),b=fl(r.dtype),w=Qr(y,b,"sum",o),C=Q({inputs:{x:w},attrs:{shape:f},backend:o});return o.disposeIntermediateTensorInfo(y),o.disposeIntermediateTensorInfo(w),u&&o.disposeIntermediateTensorInfo(c),C}function eu(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;return vF(n,s,i,e)}var NF={kernelName:Hi,backendName:"webgl",kernelFunc:eu};function pe(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{perm:s}=o,i=e,a=n.shape.length,l=new Array(a);for(let c=0;c<l.length;c++)l[c]=n.shape[s[c]];let u;if(i.shouldExecuteOnCPU([n])){let p=i.texData.get(n.dataId).values,m=Ql(p,n.shape,n.dtype,s,l);u=i.makeTensorInfo(l,n.dtype);let f=i.texData.get(u.dataId);f.values=m}else u=Wa(n,s,i);return u}var SF={kernelName:un,backendName:"webgl",kernelFunc:pe};var rv=1e3;function ru({a:r,b:t,transposeA:e,transposeB:o,backend:n,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:a=0,activation:l=null}){let u=r.shape.length,c=t.shape.length,p=e?r.shape[u-2]:r.shape[u-1],m=o?t.shape[c-1]:t.shape[c-2],f=e?r.shape[u-1]:r.shape[u-2],h=o?t.shape[c-2]:t.shape[c-1],d=r.shape.slice(0,-2),g=t.shape.slice(0,-2),y=x.sizeFromShape(d),b=x.sizeFromShape(g),C=qr.assertAndGetBroadcastShape(r.shape.slice(0,-2),t.shape.slice(0,-2)).concat([f,h]);x.assert(p===m,()=>`Error in matMul: inner shapes (${p}) and (${m}) of Tensors with shapes ${r.shape} and ${t.shape} and transposeA=${e} and transposeB=${o} must match.`);let I=e?[y,p,f]:[y,f,p],$=o?[b,h,m]:[b,m,h],A=Q({inputs:{x:r},backend:n,attrs:{shape:I}}),_=Q({inputs:{x:t},backend:n,attrs:{shape:$}}),O=[A,_],P=Math.max(y,b),B=e?A.shape[1]:A.shape[2],V=s!=null,G=i!=null,H=l==="leakyrelu",W=l!=null?Ga(l,!0):null,X=V||G||H||W!=null,Z;if((f===1||h===1)&&B>rv&&X===!1){let J=A,rt=_;e&&(J=pe({inputs:{x:A},backend:n,attrs:{perm:[0,2,1]}}),O.push(J)),o&&(rt=pe({inputs:{x:_},backend:n,attrs:{perm:[0,2,1]}}),O.push(rt));let ot=h!==1,lt=h===1,it=J;ot&&(it=Q({inputs:{x:J},backend:n,attrs:{shape:[P,B,1]}}),O.push(it));let ct=h===1?2:1,at=rt;lt&&(at=Q({inputs:{x:rt},backend:n,attrs:{shape:[P,1,B]}}),O.push(at));let mt=oh({inputs:{a:it,b:at},backend:n});Z=eu({inputs:{x:mt},backend:n,attrs:{axis:ct,keepDims:!0}}),O.push(mt)}else{let J=Re(r.dtype,t.dtype),rt=new Op(I,$,[P,f,h],e,o,V,W,G,H),ot=[A,_];if(s!=null&&ot.push(s),G&&ot.push(i),H){let lt=n.makeTensorInfo([],"float32",x.createScalarValue(a,"float32"));ot.push(lt),O.push(lt)}Z=n.runWebGLProgram(rt,ot,J)}let K=Q({inputs:{x:Z},backend:n,attrs:{shape:C}});O.push(Z);for(let J of O)n.disposeIntermediateTensorInfo(J);return K}function yj(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s,bias:i,preluActivationWeights:a}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=o;return ru({a:n,b:s,transposeA:l,transposeB:u,backend:e,bias:i,preluActivationWeights:a,leakyreluAlpha:p,activation:c})}var IF={kernelName:nl,backendName:"webgl",kernelFunc:yj};var TF="return abs(x);";function bj(r){let{inputs:t,backend:e}=r,{x:o}=t;if(e.shouldExecuteOnCPU([o])&&o.dtype!=="complex64"){let s=e.texData.get(o.dataId),i=jx(s.values);return e.makeTensorInfo(o.shape,o.dtype,i)}let n;return M().getBool("WEBGL_PACK_UNARY_OPERATIONS")?n=new po(o.shape,TF):n=new br(o.shape,TF),e.runWebGLProgram(n,[o],o.dtype)}var kF={kernelName:si,backendName:"webgl",kernelFunc:bj};var wj=Ge+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`,Cj=ft({opSnippet:wj}),EF={kernelName:Bn,backendName:"webgl",kernelFunc:Cj};var vj=Ge+`
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`,Nj=ft({opSnippet:vj}),$F={kernelName:Vn,backendName:"webgl",kernelFunc:Nj};var AF="return a + b;",Sj=Wt({opSnippet:AF,packedOpSnippet:AF,supportsComplex:!0,cpuKernelImpl:mD}),DF={kernelName:Bo,backendName:"webgl",kernelFunc:Sj};var ny=class{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((s,i)=>`T${i}`);let o=[];this.variableNames.forEach(s=>{o.push(`float v${s} = get${s}AtOutCoords();`)});let n=this.variableNames.map(s=>`v${s}`).join(" + ");this.userCode=`
      void main() {
        ${o.join(`
        `)}

        float result = ${n};
        setOutput(result);
      }
    `}};var sy=class{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((s,i)=>`T${i}`);let o=[];this.variableNames.forEach(s=>{o.push(`vec4 v${s} = get${s}AtOutCoords();`)});let n=this.variableNames.map(s=>`v${s}`).join(" + ");this.userCode=`
      void main() {
        ${o.join(`
        `)}

        vec4 result = ${n};
        setOutput(result);
      }
    `}};function iy(r){let{inputs:t,backend:e}=r,o=t;if(o.length===1)return $e({inputs:{x:o[0]},backend:e});if(o.length>M().get("WEBGL_MAX_TEXTURES_IN_SHADER")){let l=Math.floor(o.length/2),u=iy({inputs:o.slice(0,l),backend:e}),c=iy({inputs:o.slice(l),backend:e});return iy({inputs:[u,c],backend:e})}let n=o.map(l=>l.dtype).reduce((l,u)=>Re(l,u)),s=o.map(l=>l.shape),a=M().getBool("WEBGL_PACK")?new sy(o[0].shape,s):new ny(o[0].shape,s);return e.runWebGLProgram(a,o,n)}var FF={kernelName:ii,backendName:"webgl",kernelFunc:iy};function Ij(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=n.shape.length,l=x.parseAxisParam(s,n.shape),u=l,c=T.getAxesPermutation(u,a),p=n;c!=null&&(p=pe({inputs:{x:n},backend:e,attrs:{perm:c}}),u=T.getInnerMostAxes(u.length,a)),T.assertAxesAreInnerMostDims("all",u,a);let[m,f]=T.computeOutAndReduceShapes(p.shape,u),h=x.sizeFromShape(f),d=Q({inputs:{x:p},backend:e,attrs:{shape:[-1,h]}}),g=Qr(d,d.dtype,"all",e),y;if(i){let b=T.expandShapeToKeepDim(m,l);y=Q({inputs:{x:g},backend:e,attrs:{shape:b}})}else y=Q({inputs:{x:g},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(g),c!=null&&e.disposeIntermediateTensorInfo(p),y}var RF={kernelName:pu,backendName:"webgl",kernelFunc:Ij};function Tj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=n.shape.length,l=x.parseAxisParam(s,n.shape),u=l,c=T.getAxesPermutation(u,a),p=n;c!=null&&(p=pe({inputs:{x:n},backend:e,attrs:{perm:c}}),u=T.getInnerMostAxes(u.length,a)),T.assertAxesAreInnerMostDims("any",u,a);let[m,f]=T.computeOutAndReduceShapes(p.shape,u),h=x.sizeFromShape(f),d=Q({inputs:{x:p},backend:e,attrs:{shape:[-1,h]}}),g=Qr(d,d.dtype,"any",e),y;if(i){let b=T.expandShapeToKeepDim(m,l);y=Q({inputs:{x:g},backend:e,attrs:{shape:b}})}else y=Q({inputs:{x:g},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(g),c!=null&&e.disposeIntermediateTensorInfo(p),y}var _F={kernelName:mu,backendName:"webgl",kernelFunc:Tj};var ay=class{constructor(t,e,o){this.variableNames=["A"];let{windowSize:n,batchSize:s,outSize:i}=t;o||this.variableNames.push("bestIndicesA"),this.outputShape=[s,i];let a=e==="max"?">":"<",l=o?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${n}; i++) {
          int inIdx = ${l};
          float candidate = getA(batch, inIdx);
          if (candidate ${a} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `}};var ly=class{constructor(t,e,o,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,x.assert(t.length>2,()=>`Packed arg${o.charAt(0).toUpperCase()+o.slice(1)} supports only inputs with rank above 2.`);let s=t[t.length-1],i=Math.ceil(s/e);this.outputShape=t.slice(0,-1),i>1&&this.outputShape.push(i),n||this.variableNames.push("bestIndicesA");let a=this.outputShape,l=a.length,u=$t(l),c=Ee("coords",l),p,m;if(i===1){m=l+1;let _=$t(m);p=`
        ${_} sourceLocR = ${_}(${c.join()}, 0);
        ++${c[l-1]};
        ${_} sourceLocG = ${_}(${c.join()}, 0);
        ++${c[l-2]};
        ${_} sourceLocA = ${_}(${c.join()}, 0);
        --${c[l-1]};
        ${_} sourceLocB = ${_}(${c.join()}, 0);
        --${c[l-2]};`}else m=l,p=`
        ${u} sourceLocR = coords;
        ++${c[l-1]};
        ${u} sourceLocG = coords;
        ++${c[l-2]};
        ${u} sourceLocA = coords;
        --${c[l-1]};
        ${u} sourceLocB = coords;
        --${c[l-2]};`;let f=["x","y","z","w","u","v"].slice(0,m),h="."+f[m-1],d=f.map(_=>"int "+_),g=Ee("sourceLocR",m-1).concat("inIdx.r"),y=Ee("sourceLocG",m-1).concat("inIdx.g"),b=Ee("sourceLocB",m-1).concat("inIdx.b"),w=Ee("sourceLocA",m-1).concat("inIdx.a"),C=o==="max"?"greaterThan":"lessThan",I=n?"":`
          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${y.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${w.join()})));`,$=`vec4(
            getAChannel(${g.join()}),
            hasNextCol ? getAChannel(${y.join()}) : 0.,
            hasNextRow ? getAChannel(${b.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${w.join()}) : 0.)`,A=n?"":`
      float getBestIndicesAChannel(${d.join()}) {
        return getChannel(getBestIndicesA(${f.join()}),
                                          vec2(${f.slice(-2).join()}));
      }`;this.userCode=`
      float getAChannel(${d.join()}) {
        return getChannel(getA(${f.join()}),
                               vec2(${f.slice(-2).join()}));
      }
      ${A}
      void main() {
        ${u} coords = getOutputCoords();
        bool hasNextCol = ${c[l-1]} < ${a[l-1]-1};
        bool hasNextRow = ${c[l-2]} < ${a[l-2]-1};
        ${p}
        ivec4 srcIdx = ivec4(sourceLocR${h}, sourceLocG${h},
          sourceLocB${h}, sourceLocA${h}) * ${e};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${$};

        for (int i = 0; i < ${e}; i++) {
          inIdx = srcIdx;
          ${I}
          vec4 candidate = ${$};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${C}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `}};function OF(r,t,e,o=null){let n=t.shape[0],s=t.shape[1];o!=null&&(n=o.shape[0],s=o.shape[1]);let i=T.computeOptimalWindowSize(s),a={windowSize:i,inSize:s,batchSize:n,outSize:Math.ceil(s/i)},l=new ay(a,e,o==null),u=[t];o!=null&&u.push(o);let c=r.runWebGLProgram(l,u,"int32");if(c.shape[1]===1)return c;let p=OF(r,t,e,c);return r.disposeIntermediateTensorInfo(c),p}function LF(r,t,e,o=null){let n=o!=null?o.shape:t.shape,s=n[n.length-1],i=T.computeOptimalWindowSize(s),a=new ly(n,i,e,o==null),l=o==null?[t]:[t,o],u=r.runWebGLProgram(a,l,"int32");if(u.shape.length===t.shape.length){let c=LF(r,t,e,u);return r.disposeIntermediateTensorInfo(u),c}return u}function uy(r,t,e,o){let n=[e];if(T.assertAxesAreInnerMostDims("arg"+o.charAt(0).toUpperCase()+o.slice(1),n,t.shape.length),!M().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){let s=[],i=r.texData.get(t.dataId),a=i!==null&&i.isPacked,l=t;a&&(l=r.unpackTensor(t),s.push(l));let[u,c]=T.computeOutAndReduceShapes(l.shape,n),p=x.sizeFromShape(c),m=Q({inputs:{x:l},backend:r,attrs:{shape:[-1,p]}});s.push(m);let f=OF(r,m,o);s.push(f);let h=Q({inputs:{x:f},backend:r,attrs:{shape:u}});return s.forEach(d=>r.disposeIntermediateTensorInfo(d)),h}return LF(r,t,o)}function kj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o,i=x.parseAxisParam(s,n.shape),a=T.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=pe({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=T.getInnerMostAxes(i.length,l.shape.length)),T.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);let c=uy(e,l,i[0],"max");return u.forEach(p=>e.disposeIntermediateTensorInfo(p)),c}var PF={kernelName:ai,backendName:"webgl",kernelFunc:kj};function Ej(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o,i=x.parseAxisParam(s,n.shape),a=T.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=pe({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=T.getInnerMostAxes(i.length,l.shape.length)),T.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);let c=uy(e,l,i[0],"min");return u.forEach(p=>e.disposeIntermediateTensorInfo(p)),c}var zF={kernelName:li,backendName:"webgl",kernelFunc:Ej};var $j=Ge+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`,Aj=ft({opSnippet:$j}),MF={kernelName:Gn,backendName:"webgl",kernelFunc:Aj};var Dj=Ge+"return log(x + sqrt(x * x + 1.0));",Fj=ft({opSnippet:Dj}),BF={kernelName:Wn,backendName:"webgl",kernelFunc:Fj};var Rj=Ge+`
  return atan(x);
`,_j=ft({opSnippet:Rj}),VF={kernelName:Un,backendName:"webgl",kernelFunc:_j};var Oj=gF+`
  return atan(a, b);
`,Lj=`
  vec4 result = atan(a, b);
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  `+xF+`
  return result;
`,Pj=Wt({opSnippet:Oj,packedOpSnippet:Lj}),GF={kernelName:qn,backendName:"webgl",kernelFunc:Pj};var zj=Ge+`
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`,Mj=ft({opSnippet:zj}),WF={kernelName:Hn,backendName:"webgl",kernelFunc:Mj};var rn=class{constructor(t,e,o,n=!1,s=!1){if(this.variableNames=["x"],e==="avg"&&o)throw new Error("Cannot compute positions for average pool.");let i=t.filterWidth,a=t.strideHeight,l=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,p=t.effectiveFilterHeight,m=t.effectiveFilterWidth,f=t.padInfo.top,h=t.padInfo.left;this.outputShape=t.outShape;let d=e==="avg",g=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,y=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`,b="0.0";if(d||(b="-1.0 / 1e-20"),o){let _=">=";this.userCode=`
        const ivec2 strides = ivec2(${a}, ${l});
        const ivec2 pads = ivec2(${f}, ${h});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${p};
              wR += ${u}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${m};
                wC += ${c}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${_} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${n?s?g:y:`wR * ${m} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let w="max",C=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;e==="avg"&&(C="avgValue / count");let I=Math.floor(i/4)*4,$=i%4,A=`
      if (${d}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${w}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec2 strides = ivec2(${a}, ${l});
      const ivec2 pads = ivec2(${f}, ${h});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${p};
            wR += ${u}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${I}; wC += 4) {
            int xC = xCCorner + wC * ${c};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              getValue(batch, xR, xC + 3 * ${c}, d)
            );

            ${A}
          }

          int xC = xCCorner + ${I};
          if (${$===1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${A}
          } else if (${$===2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              initializationValue,
              initializationValue
            );

            ${A}
          } else if (${$===3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              initializationValue
            );

            ${A}
          }
        }
        setOutput(${C});
      }
    `}},Ua=class{constructor(t,e,o,n=!1,s=!1){if(this.variableNames=["x"],e==="avg"&&o)throw new Error("Cannot compute positions for average pool.");let i=t.filterWidth,a=t.strideDepth,l=t.strideHeight,u=t.strideWidth,c=t.dilationDepth,p=t.dilationHeight,m=t.dilationWidth,f=t.effectiveFilterDepth,h=t.effectiveFilterHeight,d=t.effectiveFilterWidth,g=t.padInfo.front,y=t.padInfo.top,b=t.padInfo.left;this.outputShape=t.outShape;let w=e==="avg",C="0.0";if(w||(C="-1.0 / 1e-20"),o){let P=">=";this.userCode=`
        const ivec3 strides =
            ivec3(${a}, ${l}, ${u});
        const ivec3 pads = ivec3(${g}, ${y}, ${b});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${f};
              wD += ${c}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${t.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${h};
                wR += ${p}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${d};
                  wC += ${m}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${P} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${n?s?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${h} * ${d} +
                      wR * ${d} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let I="max",$=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;e==="avg"&&($="avgValue / count");let A=Math.floor(i/4)*4,_=i%4,O=`
      if (${w}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${I}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec3 strides =
        ivec3(${a}, ${l}, ${u});
      const ivec3 pads = ivec3(${g}, ${y}, ${b});
      const float initializationValue = ${C};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${C});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${f};
            wD += ${c}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${h};
            wR += ${p}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${A}; wC += 4) {
              int xC = xCCorner + wC * ${m};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                getValue(batch, xD, xR, xC + 3 * ${m}, ch)
              );

              ${O}
            }

            int xC = xCCorner + ${A};
            if (${_===1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${O}
            } else if (${_===2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                initializationValue,
                initializationValue
              );

              ${O}
            } else if (${_===3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                initializationValue
              );

              ${O}
            }
          }
          setOutput(${$});
        }
      }
    `}};function Bj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;_n(n,"avgPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;x.assert(T.eitherStridesOrDilationsAreOne(i,u),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=T.computePool2DInfo(n.shape,s,i,u,a,l);if(c.filterWidth===1&&c.filterHeight===1&&x.arraysEqual(c.inShape,c.outShape))return $e({inputs:{x:n},backend:e});let p=new rn(c,"avg",!1);return e.runWebGLProgram(p,[n],"float32")}var UF={kernelName:ui,backendName:"webgl",kernelFunc:Bj};function Vj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=o,c=[1,1,1],p=T.computePool3DInfo(n.shape,s,i,c,a,l,u),m=new Ua(p,"avg",!1);return e.runWebGLProgram(m,[n],"float32")}var HF={kernelName:ci,backendName:"webgl",kernelFunc:Vj};var cy=class{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;let e=t.filterHeight,o=t.filterWidth,n=t.strideHeight,s=t.strideWidth,i=t.dilationHeight,a=t.dilationWidth,l=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=l-1-t.padInfo.top,p=u-1-t.padInfo.left,m=1/(e*o);this.userCode=`
      const ivec2 pads = ivec2(${c}, ${p});
      const float avgMultiplier = float(${m});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${l};
            wR += ${i}) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${u};
            wC+= ${a}) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `}},py=class{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;let e=t.filterDepth,o=t.filterHeight,n=t.filterWidth,s=t.strideDepth,i=t.strideHeight,a=t.strideWidth,l=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,p=t.effectiveFilterDepth,m=t.effectiveFilterHeight,f=t.effectiveFilterWidth,h=p-1-t.padInfo.front,d=m-1-t.padInfo.top,g=f-1-t.padInfo.left,y=1/(e*o*n);this.userCode=`
      const ivec3 pads = ivec3(${h}, ${d}, ${g});
      const float avgMultiplier = float(${y});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${p};
            wD += ${l}) {
          float dyD = float(dyDCorner + wD) / ${s}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${m};
              wR += ${u}) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${f};
                wC += ${c}) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function Gj(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,i=s,{filterSize:a,strides:l,pad:u,dimRoundingMode:c}=o,p=[1,1,1],m=T.computePool3DInfo(i.shape,a,l,p,u,c),f=new py(m);return e.runWebGLProgram(f,[n],i.dtype)}var qF={kernelName:hu,backendName:"webgl",kernelFunc:Gj};function Wj(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,i=s;_n([n,s],"avgPoolGrad");let{filterSize:a,strides:l,pad:u}=o,c=T.computePool2DInfo(i.shape,a,l,1,u),p=new cy(c);return e.runWebGLProgram(p,[n],i.dtype)}var KF={kernelName:fu,backendName:"webgl",kernelFunc:Wj};function Uj(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s}=t,{transposeA:i,transposeB:a}=o;return ru({a:n,b:s,transposeA:i,transposeB:a,backend:e})}var jF={kernelName:pi,backendName:"webgl",kernelFunc:Uj};var my=class{constructor(t,e,o,n,s,i){this.outputShape=[],this.variableNames=["x","mean","variance"],T.assertAndGetBroadcastShape(t,e),T.assertAndGetBroadcastShape(t,o);let a="0.0";n!=null&&(T.assertAndGetBroadcastShape(t,n),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let l="1.0";s!=null&&(T.assertAndGetBroadcastShape(t,s),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${a};
        float scale = ${l};
        float inv = scale * inversesqrt(variance + float(${i}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `}};var fy=class{constructor(t,e,o,n,s,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],T.assertAndGetBroadcastShape(t,e),T.assertAndGetBroadcastShape(t,o);let a="vec4(0.0)";n!=null&&(T.assertAndGetBroadcastShape(t,n),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let l="vec4(1.0)";s!=null&&(T.assertAndGetBroadcastShape(t,s),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`
      void main() {
        vec4 offset = ${a};
        vec4 scale = ${l};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${i}));

        setOutput((x - mean) * inv + offset);
      }
    `}};var Hj=({inputs:r,backend:t,attrs:e})=>{let{x:o,mean:n,variance:s,offset:i,scale:a}=r;x.assert(n.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),x.assert(i==null||n.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),x.assert(a==null||n.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=e;l==null&&(l=.001);let u=[o,n,s],c=null;i!=null&&(c=i.shape,u.push(i));let p=null;a!=null&&(p=a.shape,u.push(a));let m=M().getBool("WEBGL_PACK_NORMALIZATION")?new fy(o.shape,n.shape,s.shape,c,p,l):new my(o.shape,n.shape,s.shape,c,p,l);return t.runWebGLProgram(m,u,u[0].dtype)},XF={kernelName:vi,backendName:"webgl",kernelFunc:Hj};var hy=class{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;let e=$t(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let o=qj(this.rank),n,s=t.map((i,a)=>`sourceLoc.${ov[a]} = start[${a}] + coords.${ov[a]};`);n=`
        ${e} sourceLoc;
        ${e} coords = getOutputCoords();
        ${s.join(`
`)}
      `,this.userCode=`
      void main() {
        ${n}
        setOutput(getSource(${o}));
      }
    `}},ov=["x","y","z","w","u","v"];function qj(r){if(r===1)return"sourceLoc";if(r<=6)return ov.slice(0,r).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${r} is not yet supported`)}var dy=class{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let e=$t(this.rank),o=Ee("coords",this.rank),n=Ee("sourceLoc",this.rank),s=this.rank===1?"sourceLoc":`vec2(${n.slice(-2).join()})`,i=`getChannel(getSource(${n.join()}), ${s})`,a=`
      result.x = ${i};
      if (++${o[this.rank-1]} < ${t[this.rank-1]}) {
        ++${n[this.rank-1]};
        result.y = ${i};
        --${n[this.rank-1]};
      }
    `,l=this.rank===1?"":`
      --${o[this.rank-1]};
      if (++${o[this.rank-2]} < ${t[this.rank-2]}) {
        ++${n[this.rank-2]};
        result.z = ${i};
        if (++${o[this.rank-1]} < ${t[this.rank-1]}) {
          ++${n[this.rank-1]};
          result.w = ${i};
        }
      }
    `,u=this.rank<=4?`sourceLoc = coords +
            ${e}(${t.map((c,p)=>`start[${p}]`).join()});`:t.map((c,p)=>`${n[p]} = ${o[p]} + start[${p}];`).join(`
`);this.userCode=`
      void main() {
        ${e} coords = getOutputCoords();
        ${e} sourceLoc;
        ${u}
        vec4 result = vec4(0.);
        ${a}
        ${l}
        setOutput(result);
      }
    `}};function Kj(r,t,e,o){let n=o.texData.get(r.dataId),s=o.makeTensorInfo(e,r.dtype),i=o.texData.get(s.dataId);Object.assign(i,n),i.refCount=1,i.shape=e,i.dtype=r.dtype;let a=qe.computeFlatOffset(t,x.computeStrides(r.shape));n.slice&&(a+=n.slice.flatOffset),i.slice={flatOffset:a,origDataId:n.slice&&n.slice.origDataId||r.dataId};let l=o.dataRefCount.get(i.slice.origDataId)||1;return o.dataRefCount.set(i.slice.origDataId,l+1),s}function on(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,size:i}=o,[a,l]=qe.parseSliceParams(n,s,i);if(qe.assertParamsValid(n,a,l),x.sizeFromShape(l)===0)return e.makeTensorInfo(l,n.dtype,[]);if(e.shouldExecuteOnCPU([n])||n.dtype==="string"){let p=e.texData.get(n.dataId),m=MD(p.values,a,l,n.shape,n.dtype);return e.makeTensorInfo(l,n.dtype,m)}let{isPacked:u}=e.texData.get(n.dataId),c=qe.isSliceContinous(n.shape,a,l);if(u||!c){let p=M().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new dy(l):new hy(l),m=[a];return e.runWebGLProgram(p,[n],n.dtype,m)}return e.uploadToGPU(n.dataId),Kj(n,a,l,e)}var YF={kernelName:Ui,backendName:"webgl",kernelFunc:on};var jj=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,crops:i}=o;x.assert(n.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");let a=s.reduce((b,w)=>b*w),l=T.getReshaped(n.shape,s,a),u=T.getPermuted(l.length,s.length),c=T.getReshapedPermuted(n.shape,s,a),p=T.getSliceBeginCoords(i,s.length),m=T.getSliceSize(c,i,s.length),f=[],h=Q({inputs:{x:n},backend:e,attrs:{shape:l}}),d=pe({inputs:{x:h},backend:e,attrs:{perm:u}}),g=Q({inputs:{x:d},backend:e,attrs:{shape:c}}),y=on({inputs:{x:g},backend:e,attrs:{begin:p,size:m}});return f.push(h),f.push(d),f.push(g),f.forEach(b=>e.disposeIntermediateTensorInfo(b)),y},ZF={kernelName:mi,backendName:"webgl",kernelFunc:jj};function Xj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:i}=o,a=e.readSync(n.dataId),l=e.readSync(s.dataId),u=Kx(a,l,s.dtype,s.shape,i);return e.makeTensorInfo([i],s.dtype,u)}var JF={kernelName:du,backendName:"webgl",kernelFunc:Xj};function Yj(r){let{inputs:t,backend:e}=r,{s0:o,s1:n}=t,s=e.readSync(o.dataId),i=e.readSync(n.dataId),a=T.assertAndGetBroadcastShape(Array.from(s),Array.from(i));return e.makeTensorInfo([a.length],"int32",Int32Array.from(a))}var QF={kernelName:gu,backendName:"webgl",kernelFunc:Yj};var Zj="return float(a != b);",nv=Wt({opSnippet:Zj,cpuKernelImpl:RD,dtype:"bool"}),tR={kernelName:ol,backendName:"webgl",kernelFunc:nv};function Js(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.texData.get(o.dataId);return $e({inputs:{x:n.complexTensorInfos.real},backend:e})}var eR={kernelName:qu,backendName:"webgl",kernelFunc:Js};var Jj="return float(int(x));";function rR(r,t){let e=new br(r.shape,Jj),o=t.runWebGLProgram(e,[r],"int32");return{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}function sv(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return $e({inputs:{x:n},backend:e});let i=re(n.shape),a=sv({inputs:{x:n},backend:e,attrs:{dtype:"float32"}}),l=Wr({inputs:{real:a,imag:i},backend:e});return i.dispose(),e.disposeIntermediateTensorInfo(a),l}if(n.dtype==="complex64"){let i=Js({inputs:{input:n},backend:e}),a=sv({inputs:{x:i},backend:e,attrs:{dtype:s}});return e.disposeIntermediateTensorInfo(i),a}if(!x.hasEncodingLoss(n.dtype,s)){let i=$e({inputs:{x:n},backend:e});return{dataId:i.dataId,shape:i.shape,dtype:s}}if(s==="int32")return rR(n,e);if(s==="bool"){let i=e.makeTensorInfo([],"bool",x.getTypedArrayFromDType("bool",1)),l=nv({inputs:{a:n,b:i},backend:e});return e.disposeIntermediateTensorInfo(i),l}throw new Error(`Error in Cast: failed to cast ${n.dtype} to ${s}`)}var oR={kernelName:sn,backendName:"webgl",kernelFunc:sv};var nR="return ceil(x);",Qj=ft({opSnippet:nR,packedOpSnippet:nR,cpuKernelImpl:hD}),sR={kernelName:Kn,backendName:"webgl",kernelFunc:Qj};var gy=class{constructor(t){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode=`

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `}};var xy=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode=`
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `}};function t6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{clipValueMin:s,clipValueMax:i}=o,a;M().getBool("WEBGL_PACK_CLIP")?a=new xy(n.shape):a=new gy(n.shape);let l=[[s],[i]];return e.runWebGLProgram(a,[n],n.dtype,l)}var iR={kernelName:jn,backendName:"webgl",kernelFunc:t6};var yy=class{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode=`
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `}};function aR(r,t){return{dataId:t.dataId,dtype:t.dtype,shape:r.shape}}function e6(r){let{inputs:t,backend:e}=r,{x:o}=t,n=e.texData.get(o.dataId),s=new yy(o.shape),i=[aR(o,n.complexTensorInfos.real),aR(o,n.complexTensorInfos.imag)];return e.runWebGLProgram(s,i,i[0].dtype)}var lR={kernelName:fi,backendName:"webgl",kernelFunc:e6};var by=class{constructor(t){this.outputShape=[],this.outputShape=T.computeOutShape(t,1),this.variableNames=t.map((i,a)=>`T${a}`);let e=new Array(t.length-1);e[0]=t[0][1];for(let i=1;i<e.length;i++)e[i]=e[i-1]+t[i][1];let o=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let i=1;i<e.length;i++){let a=e[i-1];o.push(`else if (yC < ${e[i]}) setOutput(getT${i}(yR, yC-${a}));`)}let n=e.length,s=e[e.length-1];o.push(`else setOutput(getT${n}(yR, yC-${s}));`),this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${o.join(`
        `)}
      }
    `}};var Cy=class{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=T.computeOutShape(t,e);let o=this.outputShape,n=o.length,s=$t(n),i=Ee("coords",n),a=["x","y","z","w","u","v"].slice(0,n);this.variableNames=t.map((d,g)=>`T${g}`);let l=new Array(t.length-1);l[0]=t[0][e];for(let d=1;d<l.length;d++)l[d]=l[d-1]+t[d][e];let u=a[e],c=a.slice(-2),p=a.join(),m=`if (${u} < ${l[0]}) {
        return getChannel(
            getT0(${p}), vec2(${c.join()}));
        }`;for(let d=1;d<l.length;d++){let g=l[d-1];m+=`
        if (${u} < ${l[d]}  && ${u} >= ${l[d-1]}) {
          return getChannel(
            getT${d}(${wy(a,u,g)}),
            vec2(${wy(c,u,g)}));
        }`}let f=l.length,h=l[l.length-1];m+=`
        return getChannel(
          getT${f}(${wy(a,u,h)}),
          vec2(${wy(c,u,h)}));`,this.userCode=`
      float getValue(${a.map(d=>"int "+d)}) {
        ${m}
      }

      void main() {
        ${s} coords = getOutputCoords();
        vec4 result = vec4(getValue(${i}), 0., 0., 0.);

        ${i[n-1]} = ${i[n-1]} + 1;
        if (${i[n-1]} < ${o[n-1]}) {
          result.g = getValue(${i});
        }

        ${i[n-2]} = ${i[n-2]} + 1;
        if (${i[n-2]} < ${o[n-2]}) {
          result.a = getValue(${i});
        }

        ${i[n-1]} = ${i[n-1]} - 1;
        if (${i[n-2]} < ${o[n-2]} &&
            ${i[n-1]} < ${o[n-1]}) {
          result.b = getValue(${i});
        }
        setOutput(result);
      }
    `}};function wy(r,t,e){let o=r.indexOf(t);return r.map((s,i)=>i===o?`${s} - ${e}`:s).join()}function ou(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.texData.get(o.dataId);return $e({inputs:{x:n.complexTensorInfos.imag},backend:e})}var uR={kernelName:Ou,backendName:"webgl",kernelFunc:ou};function Lp(r,t,e){let o=r[0].dtype;if(o==="complex64"){let p=r.map(g=>Js({inputs:{input:g},backend:e})),m=r.map(g=>ou({inputs:{input:g},backend:e})),f=Lp(p,t,e),h=Lp(m,t,e),d=Wr({inputs:{real:f,imag:h},backend:e});return p.forEach(g=>e.disposeIntermediateTensorInfo(g)),m.forEach(g=>e.disposeIntermediateTensorInfo(g)),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),d}let n=e.shouldExecuteOnCPU(r);if(o==="string"&&(n=!0),n){let p=r.map(b=>{let w=x.sizeFromShape(b.shape.slice(t));return Q({inputs:{x:b},backend:e,attrs:{shape:[-1,w]}})}),m=p.map(b=>({vals:e.readSync(b.dataId),shape:b.shape})),f=T.computeOutShape(p.map(b=>b.shape),1),h=p[0].shape[0]===1,d=dD(m,f,o,h),g=T.computeOutShape(r.map(b=>b.shape),t),y=e.makeTensorInfo(g,o,d);return p.forEach(b=>e.disposeIntermediateTensorInfo(b)),y}let s=M().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(r.length>s){let p=[];for(let f=0;f<r.length;f+=s){let h=r.slice(f,f+s);p.push(Lp(h,t,e))}let m=Lp(p,t,e);for(let f of p)e.disposeIntermediateTensorInfo(f);return m}if(M().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&r[0].shape.length>1){let p=new Cy(r.map(m=>m.shape),t);return e.runWebGLProgram(p,r,o)}let{tensors2D:i,outShape:a}=r6(r,t,e),l=new by(i.map(p=>p.shape)),u=e.runWebGLProgram(l,i,o);i.forEach(p=>e.disposeIntermediateTensorInfo(p));let c=Q({inputs:{x:u},attrs:{shape:a},backend:e});return e.disposeIntermediateTensorInfo(u),c}function r6(r,t,e){let o=T.computeOutShape(r.map(s=>s.shape),t);return{tensors2D:r.map(s=>Q({inputs:{x:s},attrs:{shape:[-1,x.sizeFromShape(s.shape.slice(t))]},backend:e})),outShape:o}}function iv(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o,s=x.parseAxisParam(n,t[0].shape)[0],i=T.computeOutShape(t.map(u=>u.shape),s);if(x.sizeFromShape(i)===0)return e.makeTensorInfo(i,t[0].dtype,[]);let a=t.filter(u=>x.sizeFromShape(u.shape)>0);if(a.length===1)return $e({inputs:{x:a[0]},backend:e});let l=a.map(u=>u.shape);return T.assertParamsConsistent(l,s),Lp(a,s,e)}var cR={kernelName:hi,backendName:"webgl",kernelFunc:iv};var Pp=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;let i=t.padInfo.top,a=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,p=t.dilationWidth,m=t.filterHeight,f=t.filterWidth,h=Math.floor(t.inChannels/4)*4,d=t.inChannels%4,g=t.dataFormat==="channelsLast",y=g?1:2,b=g?2:3,w=g?3:1,C="",I="";o&&(n?C=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?C=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:C=`
          float activation(float x) {
            ${o}
          }
        `,I="result = activation(result);");let $=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${C}

      const ivec2 strides = ivec2(${l}, ${u});
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${w}];

        ivec2 xRCCorner =
            ivec2(coords[${y}], coords[${b}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${m}; wR++) {
          int xR = xRCorner + wR * ${c};

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${f}; wC++) {
            int xC = xCCorner + wC * ${p};

            if (xC < 0 || xC >= ${t.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${h}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${g}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${d===1}) {

              if (${g}) {
                dotProd +=
                    getX(batch, xR, xC, ${h}) *
                    getW(wR, wC, ${h}, d2);
              } else {
                dotProd +=
                    getX(batch, ${h}, xR, xC) *
                    getW(wR, wC, ${h}, d2);
              }

            } else if (${d===2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${h}, d2),
                getW(wR, wC, ${h} + 1, d2)
              );

              if (${g}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${h}),
                  getX(batch, xR, xC, ${h} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${h}, xR, xC),
                  getX(batch, ${h} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${d===3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${h}, d2),
                getW(wR, wC, ${h} + 1, d2),
                getW(wR, wC, ${h} + 2, d2)
              );

              if (${g}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${h}),
                  getX(batch, xR, xC, ${h} + 1),
                  getX(batch, xR, xC, ${h} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${h}, xR, xC),
                  getX(batch, ${h} + 1, xR, xC),
                  getX(batch, ${h} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${$}
        ${I}
        setOutput(result);
      }
    `}},vy=class{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;let e=t.padInfo.front,o=t.padInfo.top,n=t.padInfo.left,s=t.strideDepth,i=t.strideHeight,a=t.strideWidth,l=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,p=t.filterDepth,m=t.filterHeight,f=t.filterWidth,h=Math.floor(t.inChannels/4)*4,d=t.inChannels%4;this.userCode=`
      const ivec3 strides = ivec3(${s}, ${i}, ${a});
      const ivec3 pads = ivec3(${e}, ${o}, ${n});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${p}; wF++) {
          int xF = xFCorner + wF * ${l};

          if (xF < 0 || xF >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${m}; wR++) {
            int xR = xRCorner + wR * ${u};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${f}; wC++) {
              int xC = xCCorner + wC * ${c};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${h}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${d===1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${h}) *
                  getW(wF, wR, wC, ${h}, d2);
              } else if (${d===2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${h}),
                  getX(batch, xF, xR, xC, ${h} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${h}, d2),
                  getW(wF, wR, wC, ${h} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${d===3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${h}),
                  getX(batch, xF, xR, xC, ${h} + 1),
                  getX(batch, xF, xR, xC, ${h} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${h}, d2),
                  getW(wF, wR, wC, ${h} + 1, d2),
                  getW(wF, wR, wC, ${h} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}};var Ny=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=t,this.enableShapeUniforms=ie(this.outputShape.length);let{dataFormat:o}=e,n=xe(),s=o==="channelsLast",i=s?1:2,a=s?2:3,l=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${t[2]} && pos < ${t[1]}) {`,u="";for(let c=0;c<=1;c++)for(let p=0;p<=1;p++)u+=`
          blockIndex = rc.z + ${p};
          pos = rc.y + ${c};

          ${l}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${i}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${a}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${s}) {
                  innerDims = vec2(d1, ch);
                  result[${c*2+p}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${c*2+p}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;this.userCode=`
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${u}

        ${n.output} = result;
      }
    `}};function Sy(r,t){let e=r.length;return e>=3?t?[...r.slice(0,-3),r[e-3]*r[e-2],r[e-1]]:[...r.slice(0,-3),r[e-3],r[e-2]*r[e-1]]:!t&&e===1&&r[0]>1?[r[0],1]:null}function Iy({x:r,filter:t,convInfo:e,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:a=null}){let l=r.shape,u=o.texData.get(r.dataId),c=e.inChannels,p=l[0]*l[1]*l[2],m=e.outChannels,f=e.dataFormat==="channelsLast",h=!1,d=!1,g,y=[];if(s!=null){let C=Sy(s.shape,f);C!=null&&(s=Q({inputs:{x:s},backend:o,attrs:{shape:C}}),y.push(s))}if(n!=null){let C=Sy(n.shape,f);C!=null&&(n=Q({inputs:{x:n},backend:o,attrs:{shape:C}}),y.push(n))}if(!((p===1||m===1)&&c>rv)&&u.isPacked&&f&&u.texture!=null&&l[2]%2!==0&&x.arraysEqual(u.shape.slice(-3),l.slice(-3))){let C=l[0]*l[1]*(l[2]+1),I={dataId:r.dataId,shape:[1,C,e.inChannels],dtype:r.dtype},$=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,x.assert(Xl(u.shape,I.shape),()=>`packed reshape ${u.shape} to ${I.shape} isn't free`);let A=Q({inputs:{x:t},backend:o,attrs:{shape:[1,e.inChannels,e.outChannels]}});y.push(A);let _=ru({a:I,b:A,backend:o,transposeA:h,transposeB:d,bias:n,activation:a,preluActivationWeights:s,leakyreluAlpha:i}),O=o.texData.get(_.dataId);x.assert(O.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=$,O.shape=e.outShape,g=$e({inputs:{x:_},backend:o}),g.shape=e.outShape,y.push(_)}else{let C=e.outHeight*e.outWidth,I=Q({inputs:{x:r},backend:o,attrs:{shape:f?[e.batchSize,C,e.inChannels]:[e.batchSize,e.inChannels,C]}}),$=Q({inputs:{x:t},backend:o,attrs:{shape:[1,e.inChannels,e.outChannels]}}),A=ru({a:f?I:$,b:f?$:I,transposeA:!f,transposeB:d,backend:o,bias:n,activation:a,preluActivationWeights:s,leakyreluAlpha:i});g=Q({inputs:{x:A},backend:o,attrs:{shape:e.outShape}}),y.push(I),y.push($),y.push(A)}for(let C of y)o.disposeIntermediateTensorInfo(C);return g}function Ty({x:r,filter:t,convInfo:e,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:a=null}){let{filterWidth:l,filterHeight:u,inChannels:c,outWidth:p,outHeight:m,dataFormat:f}=e,h=f==="channelsLast",d=l*u*c,g=m*p,y=[e.batchSize,d,g],b=!0,w=!1,C=[];if(s!=null){let K=Sy(s.shape,h);K!=null&&(s=Q({inputs:{x:s},backend:o,attrs:{shape:K}}),C.push(s))}if(n!=null){let K=Sy(n.shape,h);K!=null&&(n=Q({inputs:{x:n},backend:o,attrs:{shape:K}}),C.push(n))}let I=Q({inputs:{x:t},backend:o,attrs:{shape:[1,d,x.sizeFromShape(t.shape)/d]}});C.push(I);let $=new Ny(y,e),A=[r.shape,[e.padInfo.top,e.padInfo.left],[e.strideHeight,e.strideWidth],[e.dilationHeight,e.dilationWidth],[e.inChannels],[e.filterWidth*e.inChannels],[e.outWidth]],_=o.runWebGLProgram($,[r],"float32",A),O=Q({inputs:{x:_},backend:o,attrs:{shape:y}});C.push(_),C.push(O);let P=n!=null,B=s!=null,V=a==="leakyrelu",G=a?Ga(a,!0):null,H=new Op(h?O.shape:I.shape,h?I.shape:O.shape,h?[e.batchSize,g,e.outChannels]:[e.batchSize,e.outChannels,g],b,w,P,G,B,V),W=h?[O,I]:[I,O];if(n&&W.push(n),B&&W.push(s),V){let K=o.makeTensorInfo([],"float32",x.createScalarValue(i,"float32"));W.push(K),C.push(K)}let X=o.runWebGLProgram(H,W,"float32"),Z=Q({inputs:{x:X},backend:o,attrs:{shape:e.outShape}});C.push(X);for(let K of C)o.disposeIntermediateTensorInfo(K);return Z}function o6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dataFormat:l,dilations:u,dimRoundingMode:c}=o,p=T.convertConv2DDataFormat(l),m=T.computeConv2DInfo(n.shape,s.shape,i,u,a,c,!1,p),f;if(m.filterHeight===1&&m.filterWidth===1&&m.dilationHeight===1&&m.dilationWidth===1&&m.strideHeight===1&&m.strideWidth===1&&(m.padInfo.type==="SAME"||m.padInfo.type==="VALID"))f=Iy({x:n,filter:s,convInfo:m,backend:e});else if(M().getBool("WEBGL_CONV_IM2COL"))f=Ty({x:n,filter:s,convInfo:m,backend:e});else{let d=new Pp(m);f=e.runWebGLProgram(d,[n,s],"float32")}let h=Q({inputs:{x:f},backend:e,attrs:{shape:m.outShape}});return e.disposeIntermediateTensorInfo(f),h}var pR={kernelName:di,backendName:"webgl",kernelFunc:o6};var ky=class{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;let e=t.strideHeight,o=t.strideWidth,n=t.padInfo.top,s=t.padInfo.left,i=t.dataFormat==="channelsLast";this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${n};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              if (${i}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}},Ey=class{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;let e=t.filterHeight,o=t.filterWidth,n=t.strideHeight,s=t.strideWidth,i=t.dataFormat==="channelsLast",a=e-1-t.padInfo.top,l=o-1-t.padInfo.left,u=i?1:2,c=i?2:3,p=i?3:1;this.userCode=`
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${p}];

        ivec2 dyCorner = ivec2(coords[${u}], coords[${c}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {

              if (${i}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}},$y=class{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;let e=t.strideDepth,o=t.strideHeight,n=t.strideWidth,s=t.padInfo.front,i=t.padInfo.top,a=t.padInfo.left;this.userCode=`
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yF = 0; yF < ${t.outDepth}; yF++) {
            int xF = wF + yF * ${e} - ${s};

            if (xF < 0 || xF >= ${t.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${t.outHeight}; yR++) {
              int xR = wR + yR * ${o} - ${i};

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${t.outWidth}; yC++) {
                int xC = wC + yC * ${n} - ${a};

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}},Ay=class{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;let e=t.filterDepth,o=t.filterHeight,n=t.filterWidth,s=t.strideDepth,i=t.strideHeight,a=t.strideWidth,l=e-1-t.padInfo.front,u=o-1-t.padInfo.top,c=n-1-t.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${l}, ${u}, ${c});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${e}; wF++) {
          float dyF = float(dyFCorner + wF) / ${s}.0;

          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${e} - 1 - wF;

          for (int wR = 0; wR < ${o}; wR++) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${o} - 1 - wR;

            for (int wC = 0; wC < ${n}; wC++) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${n} - 1 - wC;

              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function n6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,pad:a,dataFormat:l,dimRoundingMode:u,filterShape:c}=o,p=T.convertConv2DDataFormat(l),m=T.computeConv2DInfo(n.shape,c,i,1,a,u,!1,p),f=new ky(m);return e.runWebGLProgram(f,[n,s],"float32")}var mR={kernelName:yu,backendName:"webgl",kernelFunc:n6};function s6(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{inputShape:i,strides:a,pad:l,dataFormat:u,dimRoundingMode:c}=o,p=T.convertConv2DDataFormat(u),m=T.computeConv2DInfo(i,s.shape,a,1,l,c,!1,p),f=new Ey(m);return e.runWebGLProgram(f,[n,s],"float32")}var fR={kernelName:gi,backendName:"webgl",kernelFunc:s6};function i6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l}=o,u=T.computeConv3DInfo(n.shape,s.shape,i,l,a),c=new vy(u);return e.runWebGLProgram(c,[n,s],"float32")}var hR={kernelName:xi,backendName:"webgl",kernelFunc:i6};function a6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,pad:a,filterShape:l}=o,u=T.computeConv3DInfo(n.shape,l,i,1,a),c=new $y(u);return e.runWebGLProgram(c,[n,s],"float32")}var dR={kernelName:bu,backendName:"webgl",kernelFunc:a6};function l6(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{pad:i,strides:a,inputShape:l}=o,u=T.computeConv3DInfo(l,s.shape,a,1,i),c=new Ay(u);return e.runWebGLProgram(c,[n,s],"float32")}var gR={kernelName:wu,backendName:"webgl",kernelFunc:l6};var u6=zo+`
  return cos(x);
`,c6=ft({opSnippet:u6}),xR={kernelName:Xn,backendName:"webgl",kernelFunc:c6};var p6=`
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`,m6=ft({opSnippet:p6}),yR={kernelName:Yn,backendName:"webgl",kernelFunc:m6};var Dy=class{constructor(t,e,o,n,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];let[i,a,l,u]=t,[c]=e,[p,m]=o;this.outputShape=[c,p,m,u];let f=n==="bilinear"?1:0,[h,d]=[`${a-1}.0`,`${l-1}.0`],[g,y,b]=p>1?[`${(a-1)/(p-1)}`,"(y2-y1) * height_ratio",`y1*${h} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${h}`],[w,C,I]=m>1?[`${(l-1)/(m-1)}`,"(x2-x1) * width_ratio",`x1*${d} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${d}`];this.userCode=`
      const float height_ratio = float(${g});
      const float width_ratio = float(${w});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${i}) {
          return;
        }

        float height_scale = ${y};
        float width_scale = ${C};

        float in_y = ${b};
        if( in_y < 0.0 || in_y > ${h} ) {
          setOutput(float(${s}));
          return;
        }
        float in_x = ${I};
        if( in_x < 0.0 || in_x > ${d} ) {
          setOutput(float(${s}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${f} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `}};var f6=r=>{let{inputs:t,backend:e,attrs:o}=r,{image:n,boxes:s,boxInd:i}=t,{cropSize:a,method:l,extrapolationValue:u}=o,c=new Dy(n.shape,s.shape,a,l,u);return e.runWebGLProgram(c,[n,s,i],"float32")},bR={kernelName:vu,backendName:"webgl",kernelFunc:f6};var nu;(function(r){r.Prod="*",r.Sum="+"})(nu||(nu={}));var sh=class{constructor(t,e,o,n){this.op=t,this.outputShape=e,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];let s=this.outputShape.length,i=this.op===nu.Prod?"1.0":"0.0",a=o?i:`getX(${wR(s,"coords",this.op)})`,l=this.outputShape[this.outputShape.length-1],u="",c="";o?(u=n?`end != ${l-1}`:"end != 0",c=n?"end + 1":"end - 1"):(u=n?`end + pow2 < ${l}`:"end >= pow2",c=n?"end + pow2":"end - pow2"),this.userCode=`
      void main() {
        ${$t(s)} coords = getOutputCoords();
        int end = ${CR(s,"coords",this.op)};
        float val = ${a};
        int pow2 = int(pow(2.0, index));
        if (${u}) {
          int idx = ${c};
          ${CR(s,"coords",this.op)} = idx;
          val ${this.op}= getX(${wR(s,"coords",this.op)});
        }
        setOutput(val);
      }
    `}};function wR(r,t,e){if(r===1)return`${t}`;if(r===2)return`${t}.x, ${t}.y`;if(r===3)return`${t}.x, ${t}.y, ${t}.z`;if(r===4)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${e} for rank ${r} is not yet supported`)}function CR(r,t,e){if(r===1)return`${t}`;if(r===2)return`${t}.y`;if(r===3)return`${t}.z`;if(r===4)return`${t}.w`;throw new Error(`Cumulative ${e} for rank ${r} is not yet supported`)}function Fy(r,t,e,o,n,s){let i=t.shape.length,a=T.getAxesPermutation([o],i),l=t;a!=null&&(l=pe({inputs:{x:t},backend:e,attrs:{perm:a}}));let u=T.getInnerMostAxes(1,i)[0];if(u!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${o}`);let c=l.shape[u],p=$e({inputs:{x:l},backend:e});for(let m=0;m<=Math.ceil(Math.log2(c))-1;m++){let f=new sh(r,l.shape,!1,s),h=[[m]],d=p;p=e.runWebGLProgram(f,[p],p.dtype,h),e.disposeIntermediateTensorInfo(d)}if(n){let m=new sh(r,l.shape,n,s),f=p;p=e.runWebGLProgram(m,[p],p.dtype),e.disposeIntermediateTensorInfo(f)}if(a!=null){let m=T.getUndoAxesPermutation(a),f=pe({inputs:{x:p},backend:e,attrs:{perm:m}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(l),f}return p}function h6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;return Fy(nu.Prod,n,e,s,i,a)}var vR={kernelName:Cu,backendName:"webgl",kernelFunc:h6};function d6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;return Fy(nu.Sum,n,e,s,i,a)}var NR={kernelName:yi,backendName:"webgl",kernelFunc:d6};function g6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:i,binaryOutput:a}=o;if(n.shape.length===1){let l=e.readSync(n.dataId),u=e.readSync(s.dataId),c=Kx(l,u,s.dtype,s.shape,i);return e.makeTensorInfo([i],s.dtype,c)}else if(n.shape.length===2){let l=e.bufferSync(n),u=e.bufferSync(s),c=fD(l,u,i,a);return e.makeTensorInfo(c.shape,s.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`)}var SR={kernelName:Nu,backendName:"webgl",kernelFunc:g6};var Ry=class{constructor(t,e,o){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=o,this.userCode=`
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${e};
      int offset_h = imod(h, ${e});
      int in_w = w / ${e};
      int offset_w = imod(w, ${e});
      int offset_d = (offset_h * ${e} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `}getHeightCoordString(){return this.dataFormat==="NHWC"?"coords[1]":"coords[2]"}getWidthCoordString(){return this.dataFormat==="NHWC"?"coords[2]":"coords[3]"}getDepthCoordString(){return this.dataFormat==="NHWC"?"coords[3]":"coords[1]"}getOutputDepthSize(){return this.dataFormat==="NHWC"?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return this.dataFormat==="NHWC"?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}};function x6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockSize:s,dataFormat:i}=o,a=n.shape[0],l=i==="NHWC"?n.shape[1]:n.shape[2],u=i==="NHWC"?n.shape[2]:n.shape[3],c=i==="NHWC"?n.shape[3]:n.shape[1],p=l*s,m=u*s,f=c/(s*s),h=i==="NHWC"?[a,p,m,f]:[a,f,p,m],d=new Ry(h,s,i);return e.runWebGLProgram(d,[n],n.dtype)}var IR={kernelName:Su,backendName:"webgl",kernelFunc:x6};var zp=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=ie(this.outputShape.length);let i=t.filterHeight,a=t.filterWidth,l=t.outChannels/t.inChannels,u="",c="";o&&(n?u=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?u=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:u=`
          float activation(float x) {
            ${o}
          }
        `,c="result = activation(result);");let p=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${u}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${l};
        int q = d2 - d1 * ${l};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${i}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${a}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${p}
        ${c}
        setOutput(result);
      }
    `}};var Mp=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=ie(this.outputShape.length);let i=t.outChannels/t.inChannels,a=t.padInfo.left,l=t.strideWidth,u=t.dilationWidth,c=t.filterHeight,p=t.filterWidth,m=p,f=`
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;for(let y=0;y<p;y++)f+=`
          vec4 xTexelC${y*2};
          int xTexelC${y*2}Ready;
          vec4 xTexelC${y*2+1};
          int xTexelC${y*2+1}Ready;
          vec4 xC${y};`;f+=`
    for (int r = 0; r < ${c}; r++) {
      `;for(let y=0;y<p;y++)f+=`
          xTexelC${y*2} = vec4(0.0);
          xTexelC${y*2}Ready = 0;
          xTexelC${y*2+1} = vec4(0.0);
          xTexelC${y*2+1}Ready = 0;
          xC${y} = vec4(0.0);`;f+=`
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;for(let y=0;y<(m+1)/2;y++){let b=y*2;if(f+=`
          xC = xCCorner + ${b*u};
          `,l===1){if(b<p&&(a%2===1?(f+=`
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }
              `,u===1&&b>0?f+=`
                xC${b} = vec4(xTexelC${b-2}.zw, xTexelC${b}.xy);
                `:f+=`
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                  } else {
                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                  }
                  `):f+=`
                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xC${b} = xTexelC${b};
                `,b+1<p)){let w=a%2===0?x.nearestLargerEven(u):u;u%2===0&&a%2===1||u%2!==0&&a%2!==1?(f+=`
                  xCOffset = xC + imod(pads[1], 2) + ${w};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                    xTexelC${b+1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${b+1}.zw = vec2(0.0);
                    }
                    xTexelC${b+1}Ready = 1;
                  }
                  `,u>1&&(f+=`
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                      xTexelC${b} = getX(batch, xR, xCOffset, d1);
                      xTexelC${b}Ready = 1;
                    }
                    `),f+=`
                  xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.xy);
                  `):w===1?f+=`
                    xC${b+1} = xTexelC${b};
                    `:f+=`
                    xCOffset = xC + ${w};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                      xTexelC${b+1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${b+1}.zw = vec2(0.0);
                      }
                      xTexelC${b+1}Ready = 1;
                    }

                    xC${b+1} = xTexelC${b+1};
                    `}}else b<p&&(a%2===1?(f+=`
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b+1}Ready == 0) {
                  xTexelC${b+1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${b+1}.zw = vec2(0.0);
                  }
                  xTexelC${b+1}Ready = 1;
                }

                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);
              `,b+1<p&&(f+=`
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${b+1} = vec4(xTexelC${b+1}.xy, final.xy);
                `)):(f+=`
                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                  xTexelC${b+1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b+1}.zw = vec2(0.);
                  }
                  xTexelC${b+1}Ready = 1;
                }

                xC${b} = vec4(
                  xTexelC${b}.xy, xTexelC${b+1}.xy);
              `,b+1<p&&(f+=`
                  xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);
                `)));b<p&&(f+=`
            wTexel = getW(r, ${b}, d1, q);
            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);
          `,b+1<p&&(f+=`
              wTexel = getW(r, ${b+1}, d1, q);
              dotProd += xC${b+1} * vec4(wTexel.xz, wTexel.xz);
            `))}f+=`
    }
  `,f+=`
      }
    `;let h="",d="";o&&(n?h=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?h=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:h=`vec4 activation(vec4 x) {
          ${o}
        }`,d="result = activation(result);");let g=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${h}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${i};
        int q = d2 - d1 * ${i};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${f}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${g}
        ${d}
        setOutput(result);
      }
    `}};function y6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l,dimRoundingMode:u}=o,c=l;c==null&&(c=[1,1]),x.assert(T.eitherStridesOrDilationsAreOne(i,c),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);let p=T.computeConv2DInfo(n.shape,s.shape,i,c,a,u,!0),m;M().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels===1?m=new Mp(p):m=new zp(p);let f=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];return e.runWebGLProgram(m,[n,s],"float32",f)}var TR={kernelName:bi,backendName:"webgl",kernelFunc:y6};var _y=class{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;let e=t.strideHeight,o=t.strideWidth,n=t.padInfo.top,s=t.padInfo.left,i=t.outChannels/t.inChannels;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${i} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${n};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `}},Oy=class{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;let e=t.filterHeight,o=t.filterWidth,n=t.strideHeight,s=t.strideWidth,i=e-1-t.padInfo.top,a=o-1-t.padInfo.left,l=t.outChannels/t.inChannels;this.userCode=`
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${l}; dm++) {
              int d2 = d1 * ${l} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function b6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,filterShape:c}=o,p=T.computeConv2DInfo(n.shape,c,i,a,l,u,!0),m=new _y(p);return e.runWebGLProgram(m,[n,s],"float32")}var kR={kernelName:Iu,backendName:"webgl",kernelFunc:b6};function w6(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,inputShape:c}=o,p=T.computeConv2DInfo(c,s.shape,i,a,l,u,!0),m=new Oy(p);return e.runWebGLProgram(m,[n,s],"float32")}var ER={kernelName:Tu,backendName:"webgl",kernelFunc:w6};var Ly=class{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode=`
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `}};function C6(r){let{inputs:t,backend:e}=r,{x:o}=t,n=[...o.shape,...o.shape],s=x.sizeFromShape(o.shape),i=Q({inputs:{x:o},backend:e,attrs:{shape:[s]}}),a=new Ly(s),l=e.runWebGLProgram(a,[i],i.dtype),u=Q({inputs:{x:l},backend:e,attrs:{shape:n}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}var $R={kernelName:ku,backendName:"webgl",kernelFunc:C6};var Py=class{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;let{inHeight:e,inWidth:o,padInfo:n,strideHeight:s,strideWidth:i,filterHeight:a,filterWidth:l,dilationHeight:u,dilationWidth:c}=t,{top:p,left:m}=n;this.userCode=`
      const ivec2 strides = ivec2(${s}, ${i});
      const ivec2 pads = ivec2(${p}, ${m});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${a}; h++) {
          int hIn = hBeg + h * ${u};

          if (hIn >= 0 && hIn < ${e}) {
            for (int w = 0; w < ${l}; w++) {
              int wIn = wBeg + w * ${c};

              if (wIn >= 0 && wIn < ${o}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `}};function v6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l}=o,u=T.computeDilation2DInfo(n.shape,s.shape,i,a,"NHWC",l),c,p=new Py(u);c=e.runWebGLProgram(p,[n,s],"float32");let m=Q({inputs:{x:c},backend:e,attrs:{shape:u.outShape}});return e.disposeIntermediateTensorInfo(c),m}var AR={kernelName:wi,backendName:"webgl",kernelFunc:v6};function N6(r){let{inputs:t,backend:e,attrs:o}=r,{equation:n}=o,s=t,{allDims:i,summedDims:a,idDims:l}=T.decodeEinsumEquation(n,s.length);T.checkEinsumDimSizes(i.length,l,s);let{path:u,steps:c}=T.getEinsumComputePath(a,l),p=c.length,m=null,f=i.length,h=[];for(let d=0;d<p;++d){for(let g of c[d]){let{permutationIndices:y,expandDims:b}=T.getEinsumPermutation(f,l[g]),w;T.isIdentityPermutation(y)?w=s[g]:(w=pe({inputs:{x:s[g]},backend:e,attrs:{perm:y}}),h.push(w));let C=w.shape.slice();for(let I=0;I<b.length;++I)C.splice(b[I],0,1);x.arraysEqual(w.shape,C)||(w=Q({inputs:{x:w},backend:e,attrs:{shape:C}}),h.push(w)),m===null?m=w:(m=oh({inputs:{a:w,b:m},backend:e}),h.push(m))}d<p-1&&(u[d]>=0&&(m=eu({inputs:{x:m},backend:e,attrs:{axis:u[d]-(i.length-f),keepDims:!1}}),h.push(m)),f--)}for(let d of h)d!==m&&e.disposeIntermediateTensorInfo(d);return m}var DR={kernelName:Eu,backendName:"webgl",kernelFunc:N6};var S6="return (x >= 0.0) ? x : (exp(x) - 1.0);",I6=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,T6=ft({opSnippet:S6,packedOpSnippet:I6}),FR={kernelName:Jn,backendName:"webgl",kernelFunc:T6};var k6="return (b >= 1.0) ? a : a * (b + 1.0);",E6=`
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,$6=r=>{let{inputs:t,backend:e}=r,{dy:o,y:n}=t,s=M().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Po(E6,o.shape,n.shape):new mo(k6,o.shape,n.shape);return e.runWebGLProgram(s,[o,n],o.dtype)},RR={kernelName:$u,backendName:"webgl",kernelFunc:$6};var A6=`
  return vec4(equal(a, b));
`,D6="return float(a == b);",F6=Wt({opSnippet:D6,packedOpSnippet:A6,dtype:"bool",cpuKernelImpl:gD}),_R={kernelName:Ya,backendName:"webgl",kernelFunc:F6};var R6=`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${T.ERF_P};
  float a1 = ${T.ERF_A1};
  float a2 = ${T.ERF_A2};
  float a3 = ${T.ERF_A3};
  float a4 = ${T.ERF_A4};
  float a5 = ${T.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`,_6=ft({opSnippet:R6}),OR={kernelName:Qn,backendName:"webgl",kernelFunc:_6};var O6=zo+`
  return exp(x);
`,L6=`
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,av=ft({opSnippet:O6,packedOpSnippet:L6,cpuKernelImpl:xD,dtype:"float32"}),LR={kernelName:ts,backendName:"webgl",kernelFunc:av};function zy(r){let{inputs:t,attrs:e,backend:o}=r,{dim:n}=e,{input:s}=t,i=s.shape.length,a=s.shape.slice(),l=n;return n<0&&(x.assert(-(i+1)<=n,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+n+1),a.splice(l,0,1),Q({inputs:{x:s},backend:o,attrs:{shape:a}})}var PR={kernelName:Ci,backendName:"webgl",kernelFunc:zy};var zR="return exp(x) - 1.0;",P6=ft({opSnippet:zR,packedOpSnippet:zR,cpuKernelImpl:yD}),MR={kernelName:es,backendName:"webgl",kernelFunc:P6};var ih=class{constructor(t,e,o){this.variableNames=["real","imag"];let n=e[1];this.outputShape=e;let s=o?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,i=o?`${n}.0`:"1.0",a;if(t==="real")a="return real * expR - imag * expI;";else if(t==="imag")a="return real * expI + imag * expR;";else throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);this.userCode=`
      const float exponentMultiplier = ${s};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${a}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${n});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${n}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${i};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `}};function My(r,t,e){let o=e.texData.get(r.dataId),n=x.sizeFromShape(r.shape),s=r.shape[r.shape.length-1],i=n/s,a=Q({inputs:{x:r},backend:e,attrs:{shape:[i,s]}}),l=a.shape,u=new ih("real",l,t),c=new ih("imag",l,t),p=[{dataId:o.complexTensorInfos.real.dataId,dtype:o.complexTensorInfos.real.dtype,shape:l},{dataId:o.complexTensorInfos.imag.dataId,dtype:o.complexTensorInfos.imag.dtype,shape:l}],m=e.runWebGLProgram(u,p,"float32"),f=e.runWebGLProgram(c,p,"float32"),h=Wr({inputs:{real:m,imag:f},backend:e});e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f);let d=Q({inputs:{x:h},backend:e,attrs:{shape:r.shape}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(h),d}function z6(r){let{inputs:t,backend:e}=r,{input:o}=t;return My(o,!1,e)}var BR={kernelName:Au,backendName:"webgl",kernelFunc:z6};var By=class{constructor(t,e){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=t,this.userCode=`
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `}};function Qs(r){let{backend:t,attrs:e}=r,{shape:o,value:n}=e,{dtype:s}=e;if(s=s||x.inferDtype(n),s==="string"){let i=x.getArrayFromDType(s,x.sizeFromShape(o));return i.fill(n),t.makeTensorInfo(o,s,i)}else{let i=new By(o,n),a=[[n]];return t.runWebGLProgram(i,[],s,a)}}var VR={kernelName:Du,backendName:"webgl",kernelFunc:Qs};var Vy=class{constructor(t){this.variableNames=["Image"],this.outputShape=[];let e=t[2];this.outputShape=t,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${e} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${e}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `}};var GR={kernelName:Fu,backendName:"webgl",kernelFunc:({inputs:r,backend:t})=>{let{image:e}=r,o=t,n=new Vy(e.shape);return o.runWebGLProgram(n,[e],e.dtype)}};var WR="return floor(x);",M6=ft({opSnippet:WR,packedOpSnippet:WR,cpuKernelImpl:bD}),UR={kernelName:rs,backendName:"webgl",kernelFunc:M6};var B6=`
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`,V6=`
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`,G6=Wt({opSnippet:B6,packedOpSnippet:V6,dtype:"int32"}),HR={kernelName:os,backendName:"webgl",kernelFunc:G6};var Gy=class{constructor(t){this.variableNames=["A"];let e=xe(),[o,n]=t;this.outputShape=t,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${n}.0, ${o}.0);

        vec4 values = ${e.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `}};var Wy=class{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;let e=xe(),[o,n]=t;this.outputShape=t,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${n}.0, ${o}.0);
            vec4 values = ${e.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${e.output} = result;
      }
    `}};var qR={kernelName:Zp,backendName:"webgl",kernelFunc:W6},Bp;function W6(r){let{inputs:t,backend:e,attrs:o}=r,{pixels:n}=t,{numChannels:s}=o,i=typeof HTMLVideoElement!="undefined"&&n instanceof HTMLVideoElement,a=typeof HTMLImageElement!="undefined"&&n instanceof HTMLImageElement,[l,u]=i?[n.videoWidth,n.videoHeight]:[n.width,n.height],c=[u,l],p=[u,l,s];(a||i)&&(Bp==null&&(Bp=document.createElement("canvas").getContext("2d")),Bp.canvas.width=l,Bp.canvas.height=u,Bp.drawImage(n,0,0,l,u),n=Bp.canvas);let m=e.makeTensorInfo(c,"int32");e.texData.get(m.dataId).usage=mr.PIXELS,e.gpgpu.uploadPixelDataToTexture(e.getTexture(m.dataId),n);let f=M().getBool("WEBGL_PACK")?new Wy(p):new Gy(p),h=e.runWebGLProgram(f,[m],"int32");return e.disposeData(m.dataId),h}function U6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:h}=o,d=T.convertConv2DDataFormat(c),g=T.computeConv2DInfo(n.shape,s.shape,l,p,u,m,!1,d),y,b=[];if(g.filterHeight===1&&g.filterWidth===1&&g.dilationHeight===1&&g.dilationWidth===1&&g.strideHeight===1&&g.strideWidth===1&&(g.padInfo.type==="SAME"||g.padInfo.type==="VALID"))y=Iy({x:n,filter:s,convInfo:g,backend:e,bias:i,activation:f,preluActivationWeights:a,leakyreluAlpha:h});else if(M().getBool("WEBGL_CONV_IM2COL"))y=Ty({x:n,filter:s,convInfo:g,backend:e,bias:i,activation:f,preluActivationWeights:a,leakyreluAlpha:h});else{let C=i!=null,I=a!=null,$=f==="leakyrelu",A=f?Ga(f,!1):null,_=new Pp(g,C,A,I,$),O=[n,s],P=(B,V)=>{if(V==="NCHW"&&B.shape.length===1&&B.shape[0]!==1){let G=Q({inputs:{x:B},backend:e,attrs:{shape:[B.shape[0],1,1]}});return b.push(G),G}return B};if(C&&O.push(P(i,c)),I&&O.push(P(a,c)),$){let B=e.makeTensorInfo([],"float32",x.createScalarValue(h,"float32"));O.push(B),b.push(B)}y=e.runWebGLProgram(_,O,"float32")}let w=Q({inputs:{x:y},backend:e,attrs:{shape:g.outShape}});return b.push(y),b.forEach(C=>e.disposeIntermediateTensorInfo(C)),w}var KR={kernelName:sl,backendName:"webgl",kernelFunc:U6};function H6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:p,activation:m,leakyreluAlpha:f}=o,h=[],d=c;d==null&&(d=[1,1]),x.assert(T.eitherStridesOrDilationsAreOne(l,d),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${d}'`);let g=T.computeConv2DInfo(n.shape,s.shape,l,d,u,p,!0),y=M().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels===1,b=m?Ga(m,y):null,w=[n,s],C=i!=null,I=a!=null,$=m==="leakyrelu";if(C&&w.push(i),I&&w.push(a),$){let P=e.makeTensorInfo([],"float32",x.createScalarValue(f,"float32"));w.push(P),h.push(P)}let A;y?A=new Mp(g,C,b,I,$):A=new zp(g,C,b,I,$);let _=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],O=e.runWebGLProgram(A,w,"float32",_);return h.forEach(P=>e.disposeIntermediateTensorInfo(P)),O}var jR={kernelName:il,backendName:"webgl",kernelFunc:H6};var Uy=class{constructor(t,e,o,n){this.sliceDim=t,this.strides=e,this.paramsShape=n,this.variableNames=["x","indices"],this.outputShape=o;let s=$t(e.length),i=$t(o.length),a=this.sliceDim>1?"strides[j]":"strides",l=$t(n.length),u=n.length>1?"paramsShape[j]":"paramsShape";this.userCode=`
        ${s} strides = ${s}(${this.strides});
        ${l} paramsShape = ${l}(${this.paramsShape});
         void main() {
          ${i} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;
          for (int j = 0; j < ${this.sliceDim}; j++) {
            int index = round(getIndices(coords[0], j));
            out_of_bounds = out_of_bounds || index < 0;
            out_of_bounds = out_of_bounds || index >= ${u};
            flattenIndex += index * ${a};
          }
          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `}};function q6(r){let{inputs:t,backend:e}=r,{params:o,indices:n}=t,s=n.shape,i=s[s.length-1],a=x.sizeFromShape(o.shape),[l,u,c,p]=T.prepareAndValidate(o,n),m=Q({inputs:{x:n},backend:e,attrs:{shape:[u,i]}}),f=Q({inputs:{x:o},backend:e,attrs:{shape:[x.sizeFromShape(o.shape)/c,c]}});if(e.shouldExecuteOnCPU([o,n])||o.dtype==="string"){let y=e.readSync(n.dataId),b=e.bufferSync(o),w=wD(y,b,o.dtype,u,i,c,p,o.shape,a);return e.makeTensorInfo(l,o.dtype,w.values)}let h=new Uy(i,p,[u,c],o.shape),d=e.runWebGLProgram(h,[f,m],f.dtype),g=Q({inputs:{x:d},backend:e,attrs:{shape:l}});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(d),g}var XR={kernelName:Ru,backendName:"webgl",kernelFunc:q6};var Hy=class{constructor(t,e){this.variableNames=["A","indices"],this.outputShape=e,this.rank=e.length;let o=$t(this.rank),n=K6(t,2);this.userCode=`
      void main() {
        ${o} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${t[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${n}));
      }
    `}};function K6(r,t){let e=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[];for(let n=0;n<r.length;n++)n===2?o.push("index"):o.push(`${e[n]}`);return o.join()}function lv(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,indices:s}=t,{axis:i,batchDims:a}=o,l=x.parseAxisParam(i,n.shape)[0];if(M().get("DEBUG")){let b=e.readSync(s.dataId),w=n.shape[l];for(let C=0;C<b.length;++C){let I=b[C];x.assert(I<=w-1&&I>=0,()=>`GatherV2: the index value ${I} is not in [0, ${w-1}]`)}}let u=T.segment_util.collectGatherOpShapeInfo(n,s,l,a),c=x.sizeFromShape(s.shape),p=[],m=Q({inputs:{x:n},backend:e,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),f=Q({inputs:{x:s},backend:e,attrs:{shape:[u.batchSize,c/u.batchSize]}});p.push(m),p.push(f);let h=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(e.shouldExecuteOnCPU([n,s])||n.dtype==="string"){let b=e.bufferSync(f),w=e.bufferSync(m),C=CD(w,b,h);return p.forEach(I=>e.disposeIntermediateTensorInfo(I)),e.makeTensorInfo(u.outputShape,C.dtype,C.values)}let d=new Hy(m.shape,h),g=e.runWebGLProgram(d,[m,f],m.dtype);p.push(g);let y=Q({inputs:{x:g},backend:e,attrs:{shape:u.outputShape}});return p.forEach(b=>e.disposeIntermediateTensorInfo(b)),y}var YR={kernelName:Ni,backendName:"webgl",kernelFunc:lv};var j6="return float(a > b);",X6=`
  return vec4(greaterThan(a, b));
`,Y6=Wt({opSnippet:j6,packedOpSnippet:X6,cpuKernelImpl:vD,dtype:"bool"}),ZR={kernelName:Za,backendName:"webgl",kernelFunc:Y6};var Z6="return float(a >= b);",J6=`
  return vec4(greaterThanEqual(a, b));
`,Q6=Wt({opSnippet:Z6,packedOpSnippet:J6,dtype:"bool",cpuKernelImpl:ND}),JR={kernelName:ns,backendName:"webgl",kernelFunc:Q6};function tX(r){let{inputs:t,backend:e}=r,{input:o}=t;return My(o,!0,e)}var QR={kernelName:_u,backendName:"webgl",kernelFunc:tX};var eX="return float(!isnan(x) && !isinf(x));",rX=ft({opSnippet:eX,dtype:"bool"}),t_={kernelName:ss,backendName:"webgl",kernelFunc:rX};var oX="return float(isinf(x));",nX=ft({opSnippet:oX,dtype:"bool"}),e_={kernelName:is,backendName:"webgl",kernelFunc:nX};var sX="return float(isnan(x));",iX=ft({opSnippet:sX,dtype:"bool"}),r_={kernelName:as,backendName:"webgl",kernelFunc:iX};var aX="return float(a < b);",lX=`
  return vec4(lessThan(a, b));
`,uX=Wt({opSnippet:aX,packedOpSnippet:lX,cpuKernelImpl:SD,dtype:"bool"}),o_={kernelName:Ja,backendName:"webgl",kernelFunc:uX};var cX="return float(a <= b);",pX=`
  return vec4(lessThanEqual(a, b));
`,mX=Wt({opSnippet:cX,packedOpSnippet:pX,cpuKernelImpl:ID,dtype:"bool"}),n_={kernelName:Qa,backendName:"webgl",kernelFunc:mX};function fX(r){let{backend:t,attrs:e}=r,{start:o,stop:n,num:s}=e,i=TD(o,n,s);return t.makeTensorInfo([i.length],"float32",i)}var s_={kernelName:Lu,backendName:"webgl",kernelFunc:fX};var hX=zo+`
  return x < 0.0 ? 0./0. : log(x);
`,dX=`
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`,gX=ft({opSnippet:hX,packedOpSnippet:dX,cpuKernelImpl:kD}),i_={kernelName:ls,backendName:"webgl",kernelFunc:gX};var xX=zo+`
  return log(1.0 + x);
`,yX=ft({opSnippet:xX}),a_={kernelName:us,backendName:"webgl",kernelFunc:yX};var bX="return float(a >= 1.0 && b >= 1.0);",wX=`
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`,CX=Wt({opSnippet:bX,packedOpSnippet:wX,dtype:"bool"}),l_={kernelName:tl,backendName:"webgl",kernelFunc:CX};var vX="return float(!(x >= 1.0));",NX=ft({opSnippet:vX}),u_={kernelName:el,backendName:"webgl",kernelFunc:NX};var SX="return float(a >= 1.0 || b >= 1.0);",IX=`
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`,TX=Wt({opSnippet:SX,packedOpSnippet:IX,dtype:"bool"}),c_={kernelName:rl,backendName:"webgl",kernelFunc:TX};var qy=class{constructor(t,e,o,n,s){this.variableNames=["x"],this.outputShape=[];let i=e,a=t[3]-1;this.outputShape=t;let l,u=`float(${o}) + float(${n}) * sum`;s===.5?l=`inversesqrt(${u})`:s===1?l=`1.0/(${u})`:l=`exp(log(${u}) * float(-${s}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${i}; j <= ${i}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${a}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${l};
        setOutput(val);
      }
    `}};var Ky=class{constructor(t,e,o,n,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;let i=e,a=t[3]-1;this.outputShape=t;let l,u=`float(${o}) + float(${n}) * sum`;s===.5?l=`inversesqrt(${u})`:s===1?l=`1.0/(${u})`:l=`exp(log(${u}) * float(-${s}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${i};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${i}; j <= ${i}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${a}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${l};
        setOutput(result);
      }
    `}};var kX=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{depthRadius:s,bias:i,alpha:a,beta:l}=o,u=M().getBool("WEBGL_PACK_NORMALIZATION")?new Ky(n.shape,s,i,a,l):new qy(n.shape,s,i,a,l);return e.runWebGLProgram(u,[n],n.dtype)},p_={kernelName:Ii,backendName:"webgl",kernelFunc:kX};var jy=class{constructor(t,e,o,n,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=o,this.alpha=n,this.beta=s,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${e})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${e} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${n}) * norm + float(${o});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${n})
                * float(${s})
                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${s});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `}};var EX=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n,y:s,dy:i}=t,{depthRadius:a,bias:l,alpha:u,beta:c}=o,p=new jy(n.shape,a,l,u,c);return e.runWebGLProgram(p,[n,s,i],n.dtype)},m_={kernelName:Pu,backendName:"webgl",kernelFunc:EX};function f_(r,t,e,o){let n=x.sizeFromShape(t),i=x.sizeFromShape(r.shape)/n,a=Q({inputs:{x:r},attrs:{shape:[i,n]},backend:o}),l=Qr(a,r.dtype,"max",o),u=Q({inputs:{x:l},attrs:{shape:e},backend:o});return o.disposeIntermediateTensorInfo(a),o.disposeIntermediateTensorInfo(l),u}function uv(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reductionIndices:s,keepDims:i}=o,a=n.shape.length,l=x.parseAxisParam(s,n.shape),u=l,c=T.getAxesPermutation(u,a),p=c!=null,m=e.shouldExecuteOnCPU([n]),f=n;if(p){if(m){let w=e.texData.get(f.dataId).values,C=new Array(a);for(let A=0;A<C.length;A++)C[A]=n.shape[c[A]];let I=Ql(w,n.shape,n.dtype,c,C);f=e.makeTensorInfo(C,n.dtype);let $=e.texData.get(f.dataId);$.values=I}else f=Wa(n,c,e);u=T.getInnerMostAxes(u.length,a)}T.assertAxesAreInnerMostDims("max",u,a);let[h,d]=T.computeOutAndReduceShapes(f.shape,u),g=h;i&&(g=T.expandShapeToKeepDim(h,l));let y;if(m){let w=e.texData.get(f.dataId).values,C=ED(w,x.sizeFromShape(d),g,n.dtype);y=e.makeTensorInfo(g,n.dtype);let I=e.texData.get(y.dataId);I.values=C}else y=f_(f,d,g,e);return p&&e.disposeIntermediateTensorInfo(f),y}var h_={kernelName:Ti,backendName:"webgl",kernelFunc:uv};var $X=ty+`
  return max(a, b);
`,AX=`
  vec4 result = vec4(max(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  `+Va+`
  return result;
`,DX=Wt({opSnippet:$X,packedOpSnippet:AX,cpuKernelImpl:$D}),d_={kernelName:cs,backendName:"webgl",kernelFunc:DX};function FX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;_n(n,"maxPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;x.assert(T.eitherStridesOrDilationsAreOne(i,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=T.computePool2DInfo(n.shape,s,i,u,a,l);if(c.filterWidth===1&&c.filterHeight===1&&x.arraysEqual(c.inShape,c.outShape))return $e({inputs:{x:n},backend:e});let p=new rn(c,"max",!1);return e.runWebGLProgram(p,[n],n.dtype)}var g_={kernelName:ki,backendName:"webgl",kernelFunc:FX};function RX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dataFormat:l,dimRoundingMode:u}=o,c=[1,1,1],p=T.computePool3DInfo(n.shape,s,i,c,a,u,l),m=new Ua(p,"max",!1);return e.runWebGLProgram(m,[n],n.dtype)}var x_={kernelName:Ei,backendName:"webgl",kernelFunc:RX};var Xy=class{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;let e=t.strideHeight,o=t.strideWidth,n=t.dilationHeight,s=t.effectiveFilterHeight,i=t.effectiveFilterWidth,a=s-1-t.padInfo.top,l=i-1-t.padInfo.left,u=s*i-1;this.userCode=`
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${s};
          wR += ${n}) {
          float dyR = float(dyRCorner + wR) / ${e}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${i}; wC++) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${i} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `}},Yy=class{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;let e=t.strideDepth,o=t.strideHeight,n=t.strideWidth,s=t.dilationDepth,i=t.dilationHeight,a=t.dilationWidth,l=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth,p=l-1-t.padInfo.front,m=u-1-t.padInfo.top,f=c-1-t.padInfo.left,h=l*u*c-1;this.userCode=`
      const ivec3 pads = ivec3(${p}, ${m}, ${f});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${l};
           wD += ${s}) {
          float dyD = float(dyDCorner + wD) / ${e}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${u};
              wR += ${i}) {
            float dyR = float(dyRCorner + wR) / ${o}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${c};
                wC += ${a}) {
              float dyC = float(dyCCorner + wC) / ${n}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${h} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${u} * ${c} +
                  wR * ${c} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function _X(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,i=s,{filterSize:a,strides:l,pad:u,dimRoundingMode:c}=o,p=[1,1,1],m=T.computePool3DInfo(i.shape,a,l,p,u,c),f=new Ua(m,"max",!0),h=e.runWebGLProgram(f,[i],i.dtype),d=new Yy(m),g=e.runWebGLProgram(d,[n,h],i.dtype);return e.disposeIntermediateTensorInfo(h),g}var y_={kernelName:Mu,backendName:"webgl",kernelFunc:_X};function OX(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s,output:i}=t,a=s;_n([s,i],"maxPoolGrad");let{filterSize:l,strides:u,pad:c,dimRoundingMode:p}=o,m=T.computePool2DInfo(a.shape,l,u,1,c,p),f=!0,h=new rn(m,"max",f),d=e.runWebGLProgram(h,[a],a.dtype),g=new Xy(m),y=e.runWebGLProgram(g,[n,d],a.dtype);return e.disposeIntermediateTensorInfo(d),y}var b_={kernelName:zu,backendName:"webgl",kernelFunc:OX};function w_(r,t,e,o){let n=new rn(e,"max",!1),s=o.runWebGLProgram(n,[r],"float32");n=new rn(e,"max",!0,!0,t);let i=o.runWebGLProgram(n,[r],"float32");return[s,i]}var C_={kernelName:Bu,backendName:"webgl",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o}=r,{filterSize:n,strides:s,pad:i,includeBatchInIndex:a}=t,l=e;x.assert(o.shape.length===4,()=>`Error in maxPool: input must be rank 4 but got rank ${o.shape.length}.`);let u=[1,1];x.assert(T.eitherStridesOrDilationsAreOne(s,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${u}'`);let c=T.computePool2DInfo(o.shape,n,s,u,i),[p,m]=w_(o,a,c,l);return[p,m]}};function v_(r,t,e,o){let n=x.sizeFromShape(t),i=x.sizeFromShape(r.shape)/n,a=Q({inputs:{x:r},attrs:{shape:[i,n]},backend:o}),l=Qr(a,"float32","mean",o),u=Q({inputs:{x:l},attrs:{shape:e},backend:o});return o.disposeIntermediateTensorInfo(a),o.disposeIntermediateTensorInfo(l),u}var N_={kernelName:$i,backendName:"webgl",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o}=r,{keepDims:n,axis:s}=t,i=e,a=o.shape.length,l=x.parseAxisParam(s,o.shape),u=l,c=T.getAxesPermutation(u,a),p=c!=null,m=i.shouldExecuteOnCPU([o]),f=[],h=o;if(p){if(m){let C=i.texData.get(h.dataId).values,I=new Array(a);for(let _=0;_<I.length;_++)I[_]=o.shape[c[_]];let $=Ql(C,o.shape,o.dtype,c,I);h=i.makeTensorInfo(I,o.dtype);let A=i.texData.get(h.dataId);A.values=$}else h=Wa(o,c,i);f.push(h),u=T.getInnerMostAxes(u.length,a)}T.assertAxesAreInnerMostDims("sum",u,a);let[d,g]=T.computeOutAndReduceShapes(h.shape,u),y=d;n&&(y=T.expandShapeToKeepDim(d,l));let b=v_(h,g,y,i);for(let w of f)i.disposeIntermediateTensorInfo(w);return b}};function LX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=n.shape.length,l=x.parseAxisParam(s,n.shape),u=l,c=T.getAxesPermutation(u,a),p=n;c!=null&&(p=pe({inputs:{x:n},backend:e,attrs:{perm:c}}),u=T.getInnerMostAxes(u.length,n.shape.length)),T.assertAxesAreInnerMostDims("min",u,a);let[m,f]=T.computeOutAndReduceShapes(p.shape,u),h=x.sizeFromShape(f),d=Q({inputs:{x:p},backend:e,attrs:{shape:[-1,h]}}),g=Qr(d,d.dtype,"min",e),y;if(i){let b=T.expandShapeToKeepDim(m,l);y=Q({inputs:{x:g},backend:e,attrs:{shape:b}})}else y=Q({inputs:{x:g},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(g),c!=null&&e.disposeIntermediateTensorInfo(p),y}var S_={kernelName:Ai,backendName:"webgl",kernelFunc:LX};var PX=ty+`
  return min(a, b);
`,zX=`
  vec4 result = vec4(min(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  `+Va+`
  return result;
`,MX=Wt({opSnippet:PX,packedOpSnippet:zX,cpuKernelImpl:AD}),I_={kernelName:ps,backendName:"webgl",kernelFunc:MX};var Zy=class{constructor(t,e,o){this.variableNames=["x"],this.outputShape=e.map((c,p)=>c[0]+t[p]+c[1]);let n=t.length,s=$t(n),i=e.map(c=>c[0]).join(","),a=e.map((c,p)=>c[0]+t[p]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n),u=o==="reflect"?0:1;if(n===1){this.userCode=`
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${u};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${u};
          }
          setOutput(getX(outC - start));
        }
      `;return}this.userCode=`
      ${s} start = ${s}(${i});
      ${s} end = ${s}(${a});

      void main() {
        ${s} outC = getOutputCoords();
        for (int i = 0; i < ${n}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${u};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};
          }
        }
        ${s} coords = outC - start;
        setOutput(getX(${l}));
      }
    `}};var Jy=class{constructor(t,e,o){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((h,d)=>h[0]+t[d]+h[1]);let n=t.length,s=$t(n),i=e.map(h=>h[0]).join(","),a=e.map((h,d)=>h[0]+t[d]).join(","),l=Ee("rc",n),u=Ee("source",n),c=`${l[n-1]} < ${this.outputShape[n-1]}`,p=n===1?"source":`vec2(${u.slice(-2).join()})`,m=o==="reflect"?0:1,f="";if(n===1){let h=`
        ${s} source = rc;
        if (source < start) {
          source = start * 2 - source - ${m};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${m};
        }
        source -= start;
      `;f=`
        ${s} rc = outputLoc;
        ${h}
        result[0] = getChannel(getX(${u.join()}), ${p});
        ${l[n-1]} += 1;
        if(${c}) {
          ${h}
          result[1] = getChannel(getX(${u.join()}), ${p});
        }
      `}else{let h=`
        ${s} source = rc;
        ${s} lt = ${s}(lessThan(source, start));
        ${s} gte = ${s}(greaterThanEqual(source, end));
        ${s} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${m}) +
                gte * ((end - 1) * 2 - source + ${m});
        source -= start;
      `;f=`
        ${s} rc = outputLoc;
        ${h}
        result[0] = getChannel(getX(${u.join()}), ${p});
        ${l[n-1]} += 1;
        if(${c}) {
          ${h}
          result[1] = getChannel(getX(${u.join()}), ${p});
        }
        rc = outputLoc;
        ${l[n-2]} += 1;
        if(${l[n-2]} < ${this.outputShape[n-2]}) {
          ${h}
          result[2] = getChannel(getX(${u.join()}), ${p});
          ${l[n-1]} += 1;
          if(${c}) {
            ${h}
            result[3] = getChannel(getX(${u.join()}), ${p});
          }
        }
      `}this.userCode=`
      const ${s} start = ${s}(${i});
      const ${s} end = ${s}(${a});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `}};var BX=({inputs:r,backend:t,attrs:e})=>{let{x:o}=r,{paddings:n,mode:s}=e,i=M().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Jy(o.shape,n,s):new Zy(o.shape,n,s);return t.runWebGLProgram(i,[o],o.dtype)},T_={kernelName:Di,backendName:"webgl",kernelFunc:BX};var VX=`if (b == 0.0) return NAN;
  return mod(a, b);`,GX=`
  vec4 result = mod(a, b);
  vec4 isNaN = vec4(equal(b, vec4(0.0)));
  `+Va+`
  return result;
`,WX=Wt({opSnippet:VX,packedOpSnippet:GX}),k_={kernelName:ms,backendName:"webgl",kernelFunc:WX};var Qy=class{constructor(t,e,o){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[t,o],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${e-1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${e-1}));
      }
    `}};var UX=`
if (a == b) {
  return 1.0;
};
return a / b;`,HX=`
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`,cv=Wt({opSnippet:UX,packedOpSnippet:HX,checkOutOfBounds:!0}),E_={kernelName:Zn,backendName:"webgl",kernelFunc:cv};var $_="return a - b;",pv=Wt({opSnippet:$_,packedOpSnippet:$_,supportsComplex:!0,cpuKernelImpl:KD}),A_={kernelName:Es,backendName:"webgl",kernelFunc:pv};function mv(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{dim:s}=o,i=x.parseAxisParam([s],n.shape),a=uv({inputs:{x:n},backend:e,attrs:{reductionIndices:i,keepDims:!1}}),l=T.expandShapeToKeepDim(a.shape,i),u=Q({inputs:{x:a},backend:e,attrs:{shape:l}}),c=pv({inputs:{a:n,b:u},backend:e}),p=av({inputs:{x:c},backend:e}),m=eu({inputs:{x:p},backend:e,attrs:{axis:i,keepDims:!1}}),f=Q({inputs:{x:m},backend:e,attrs:{shape:l}}),h=cv({inputs:{a:p,b:f},backend:e});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),h}var D_={kernelName:ji,backendName:"webgl",kernelFunc:mv};function qX(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{numSamples:s,seed:i,normalized:a}=o,l=a?n:mv({inputs:{logits:n},backend:e,attrs:{dim:n.shape.length-1}}),u=l.shape[0],c=l.shape[1],p=new Qy(u,c,s),m=[[i]],f=e.runWebGLProgram(p,[l],"int32",m);return a||e.disposeIntermediateTensorInfo(l),f}var F_={kernelName:Vu,backendName:"webgl",kernelFunc:qX};var KX=Ge+`
  return -x;
`,jX=`
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;function XX(r){let{inputs:t,backend:e}=r,{x:o}=t;if(e.shouldExecuteOnCPU([o])){let s=e.texData.get(o.dataId),[i,a]=FD(s.values,o.shape,o.dtype);return e.makeTensorInfo(a,o.dtype,i)}let n;return M().getBool("WEBGL_PACK_UNARY_OPERATIONS")?n=new po(o.shape,jX):n=new br(o.shape,KX),e.runWebGLProgram(n,[o],o.dtype)}var R_={kernelName:Fi,backendName:"webgl",kernelFunc:XX};var YX=ur.nonMaxSuppressionV3Impl;function ZX(r){T.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l}=o,u=e.readSync(n.dataId),c=e.readSync(s.dataId),{selectedIndices:p}=YX(u,c,i,a,l);return e.makeTensorInfo([p.length],"int32",new Int32Array(p))}var __={kernelName:Gu,backendName:"webgl",kernelFunc:ZX};var JX=ur.nonMaxSuppressionV4Impl;function QX(r){T.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,padToMaxOutputSize:u}=o,c=e.readSync(n.dataId),p=e.readSync(s.dataId),{selectedIndices:m,validOutputs:f}=JX(c,p,i,a,l,u);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([],"int32",new Int32Array([f]))]}var O_={kernelName:Wu,backendName:"webgl",kernelFunc:QX};var t5=ur.nonMaxSuppressionV5Impl;function e5(r){T.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,softNmsSigma:u}=o,c=e.readSync(n.dataId),p=e.readSync(s.dataId),m=i,f=a,h=l,d=u,{selectedIndices:g,selectedScores:y}=t5(c,p,m,f,h,d);return[e.makeTensorInfo([g.length],"int32",new Int32Array(g)),e.makeTensorInfo([y.length],"float32",new Float32Array(y))]}var L_={kernelName:Uu,backendName:"webgl",kernelFunc:e5};var tb=class{constructor(t,e,o,n){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${n}), float(${o}),
                      float(index == coords.y)));
      }
    `}};var r5=r=>{let{inputs:t,backend:e,attrs:o}=r,{indices:n}=t,{depth:s,onValue:i,offValue:a}=o,l=x.sizeFromShape(n.shape),u=new tb(l,s,i,a),c=Q({inputs:{x:n},backend:e,attrs:{shape:[l]}}),p=e.runWebGLProgram(u,[c],n.dtype);e.disposeIntermediateTensorInfo(c);let m=[...n.shape,s],f=Q({inputs:{x:p},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(p),f},P_={kernelName:_i,backendName:"webgl",kernelFunc:r5};function ah(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="complex64"){let n=Js({inputs:{input:o},backend:e}),s=ah({inputs:{x:n},backend:e}),i=ou({inputs:{input:o},backend:e}),a=ah({inputs:{x:i},backend:e}),l=Wr({inputs:{real:s,imag:a},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}else return Qs({attrs:{shape:o.shape,dtype:o.dtype,value:o.dtype==="string"?"":0},backend:e})}var z_={kernelName:Zi,backendName:"webgl",kernelFunc:ah};function M_(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="string")throw new Error("onesLike is not supported under string dtype");if(o.dtype==="complex64"){let n=Js({inputs:{input:o},backend:e}),s=M_({inputs:{x:n},backend:e}),i=ou({inputs:{input:o},backend:e}),a=ah({inputs:{x:i},backend:e}),l=Wr({inputs:{real:s,imag:a},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}else return Qs({attrs:{shape:o.shape,dtype:o.dtype,value:1},backend:e})}var B_={kernelName:Ri,backendName:"webgl",kernelFunc:M_};function o5(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o;if(t.length===1)return zy({inputs:{input:t[0]},backend:e,attrs:{dim:n}});let s=t[0].shape,i=t[0].dtype;t.forEach(c=>{x.assertShapesMatch(s,c.shape,"All tensors passed to stack must have matching shapes"),x.assert(i===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});let a=[],l=t.map(c=>{let p=zy({inputs:{input:c},backend:e,attrs:{dim:n}});return a.push(p),p}),u=iv({inputs:l,backend:e,attrs:{axis:n}});return a.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}var V_={kernelName:Oi,backendName:"webgl",kernelFunc:o5};var eb=class{constructor(t,e,o){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((u,c)=>u[0]+t[c]+u[1]);let n=t.length,s=$t(n),i=e.map(u=>u[0]).join(","),a=e.map((u,c)=>u[0]+t[c]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n);if(n===1){this.userCode=`
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;return}this.userCode=`
      ${s} start = ${s}(${i});
      ${s} end = ${s}(${a});

      void main() {
        ${s} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${s} coords = outC - start;
          setOutput(getX(${l}));
        }
      }
    `}};var rb=class{constructor(t,e,o){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((d,g)=>d[0]+t[g]+d[1]);let n=t.length,s=$t(n),i=e.map(d=>d[0]).join(","),a=e.map((d,g)=>d[0]+t[g]).join(","),l=Ee("rc",n),u=Ee("source",n),c=`${l[n-1]} < ${this.outputShape[n-1]}`,p=n===1?"source":`vec2(${u.slice(-2).join()})`,m=[`${s} rc = outputLoc;`,`${l[n-1]} += 1;
       if(${c}) {
      `,n===1?"":`}
       rc = outputLoc;
       ${l[n-2]} += 1;
       if(${l[n-2]} < ${this.outputShape[n-2]}) {`,n===1?"":`  ${l[n-1]} += 1;
         if(${c}) {`],f=n===1?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",h="";for(let d=0,g=n===1?2:4;d<g;d++)h+=`
        ${m[d]}
        if (${f}) {
          result[${d}] = float(value);
        } else {
          ${s} source = rc - start;
          result[${d}] = getChannel(getX(${u.join()}), ${p});
        }
      `;h+=n===1?"} ":"}}",this.userCode=`
      const ${s} start = ${s}(${i});
      const ${s} end = ${s}(${a});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${h}
        setOutput(result);
      }
    `}};var fv=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{paddings:s,constantValue:i}=o;if(x.sizeFromShape(n.shape)===0){let u=s.map((c,p)=>c[0]+n.shape[p]+c[1]);return Qs({backend:e,attrs:{shape:u,value:i,dtype:n.dtype}})}let a=M().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new rb(n.shape,s,i):new eb(n.shape,s,i),l=[[i]];return e.runWebGLProgram(a,[n],n.dtype,l)},G_={kernelName:Li,backendName:"webgl",kernelFunc:fv};var n5=`
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`,s5=`
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));
  `+Va+`
  return result;
`,i5=Wt({opSnippet:n5,packedOpSnippet:s5}),W_={kernelName:hs,backendName:"webgl",kernelFunc:i5};function a5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=n.shape.length,l=[],u=x.parseAxisParam(s,n.shape),c=u,p=T.getAxesPermutation(c,a),m=n;p!=null&&(m=pe({inputs:{x:n},backend:e,attrs:{perm:p}}),c=T.getInnerMostAxes(c.length,a),l.push(m)),T.assertAxesAreInnerMostDims("prod",c,a);let f;if(e.shouldExecuteOnCPU([m])){let h=e.texData.get(m.dataId).values,{outVals:d,outShape:g,outDtype:y}=_D(m.shape,m.dtype,h,c);f=e.makeTensorInfo(g,y,d)}else{let[h,d]=T.computeOutAndReduceShapes(m.shape,c),g=x.sizeFromShape(d),y=Q({inputs:{x:m},backend:e,attrs:{shape:[-1,g]}}),b=fl(n.dtype),w=Qr(y,b,"prod",e);f=Q({inputs:{x:w},backend:e,attrs:{shape:h}}),l.push(y),l.push(w)}if(i){l.push(f);let h=T.expandShapeToKeepDim(f.shape,u);f=Q({inputs:{x:f},backend:e,attrs:{shape:h}})}return l.forEach(h=>e.disposeIntermediateTensorInfo(h)),f}var U_={kernelName:zi,backendName:"webgl",kernelFunc:a5};var hv=r=>{let{backend:t,attrs:e}=r,{start:o,stop:n,step:s,dtype:i}=e,a=OD(o,n,s,i);return t.makeTensorInfo([a.length],i,a)},H_={kernelName:Hu,backendName:"webgl",kernelFunc:hv};var l5="return 1.0 / x;",u5=ft({opSnippet:l5}),q_={kernelName:ds,backendName:"webgl",kernelFunc:u5};var c5=Ge+`
  return (x < 0.0) ? 0.0 : x;
`,p5=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,m5=ft({opSnippet:c5,packedOpSnippet:p5}),K_={kernelName:gs,backendName:"webgl",kernelFunc:m5};var f5=Ge+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,h5=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,d5=ft({opSnippet:f5,packedOpSnippet:h5}),j_={kernelName:xs,backendName:"webgl",kernelFunc:d5};var ob=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.outputShape=[];let[i,a,l,u]=t;this.outputShape=[i,e,o,u];let c=[n&&e>1?a-1:a,n&&o>1?l-1:l],p=[n&&e>1?e-1:e,n&&o>1?o-1:o],m;s?m="(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":m="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0]/p[0]},
          ${c[1]/p[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `}};var nb=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[i,a,l,u]=t;this.outputShape=[i,e,o,u];let c=[n&&e>1?a-1:a,n&&o>1?l-1:l],p=[n&&e>1?e-1:e,n&&o>1?o-1:o],m;s?m="(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":m="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0]/p[0]},
          ${c[1]/p[1]},
          ${c[1]/p[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u-1};
        bool hasNextRow = coords.z < ${o-1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `}};function g5(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o,[l,u]=a,c=M().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new nb(n.shape,l,u,s,i):new ob(n.shape,l,u,s,i);return e.runWebGLProgram(c,[n],"float32")}var X_={kernelName:Vi,backendName:"webgl",kernelFunc:g5};var sb=class{constructor(t,e,o){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;let[,n,s]=e,[,i,a]=t,l=[o&&i>1?n-1:n,o&&a>1?s-1:s],u=[o&&i>1?i-1:i,o&&a>1?a-1:a],c=l[0]/u[0],p=l[1]/u[1],m=1/c,f=1/p,h=Math.ceil(m)*2+2,d=Math.ceil(f)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${p});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${f});

        const int winHeight = int(${h});
        const int winWidth = int(${d});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${n-1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};function x5(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:i}=o,a=new sb(s.shape,n.shape,i);return e.runWebGLProgram(a,[s],s.dtype)}var Y_={kernelName:ju,backendName:"webgl",kernelFunc:x5};var ib=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.outputShape=[];let[i,a,l,u]=t;this.outputShape=[i,e,o,u];let c=[n&&e>1?a-1:a,n&&o>1?l-1:l],p=[n&&e>1?e-1:e,n&&o>1?o-1:o],m=n?"0.5":"0.0",f;s?f="max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":f="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0]/p[0]},
          ${c[1]/p[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${f};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `}};var ab=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[i,a,l,u]=t;this.outputShape=[i,e,o,u];let c=[n&&e>1?a-1:a,n&&o>1?l-1:l],p=[n&&e>1?e-1:e,n&&o>1?o-1:o],m=n?"0.5":"0.0",f;s?f="max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":f="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0]/p[0]},
          ${c[1]/p[1]},
          ${c[1]/p[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${f};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u-1};
        bool hasNextRow = coords.z < ${o-1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `}};function y5(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o,[l,u]=a,c=M().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new ab(n.shape,l,u,s,i):new ib(n.shape,l,u,s,i);return e.runWebGLProgram(c,[n],n.dtype)}var Z_={kernelName:Bi,backendName:"webgl",kernelFunc:y5};var lb=class{constructor(t,e,o){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;let[,n,s]=e,[,i,a]=t,l=[o&&i>1?n-1:n,o&&a>1?s-1:s],u=[o&&i>1?i-1:i,o&&a>1?a-1:a],c=l[0]/u[0],p=l[1]/u[1],m=1/c,f=1/p,h=Math.ceil(m)*2+2,d=Math.ceil(f)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${p});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${f});

        const int winHeight = int(${h});
        const int winWidth = int(${d});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float sourceFracRow =
              float(${l[0]}) *
                (float(dyR) / float(${u[0]}));

            float sourceFracCol =
                float(${l[1]}) *
                  (float(dyC) / float(${u[1]}));

            int sourceNearestRow = int(min(
                float(int(${n}) - 1),
                ${o} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${s}) - 1),
                ${o} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};function b5(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:i}=o,a=new lb(s.shape,n.shape,i);return e.runWebGLProgram(a,[s],s.dtype)}var J_={kernelName:Ku,backendName:"webgl",kernelFunc:b5};var ub=class{constructor(t,e){this.variableNames=["x"];let o=t.length;if(o>4)throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);if(this.outputShape=t,o===1){this.userCode=`
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${t[0]} - coord - 1));
        }
      `;return}let n=a=>e.indexOf(a)!==-1&&t[a]!==1?`${t[a]} - coords[${a}] - 1`:`coords[${a}]`,s=t.map((a,l)=>n(l)).join(","),i=$t(o);this.userCode=`
      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${s}));
      }
    `}};var cb=class{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;let o=t.length;if(o>4)throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);this.outputShape=t;let n=Ee("rc",o),s=`${n[o-1]} + 1 < ${this.outputShape[o-1]}`,i=`${n[o-2]} + 1 < ${this.outputShape[o-2]}`,a=$t(o);o===1?this.userCode=`
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${t[0]} - rc - 1),
            ${t[0]} - rc - 1);
          if(${s}){
              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),
                ${t[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `:this.userCode=`
        void main() {
          ${a} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${l(n.slice())};
          if(${s}){
            result.g = ${u(n.slice())};
          }
          if(${i}) {
            result.b = ${c(n.slice())};
            if(${s}) {
              result.a = ${p(n.slice())};
            }
          }
          setOutput(result);
        }
    `;function l(h){return m(h)}function u(h){return h[o-1]="("+h[o-1]+" + 1)",m(h)}function c(h){return h[o-2]="("+h[o-2]+" + 1)",m(h)}function p(h){return h[o-1]="("+h[o-1]+" + 1)",h[o-2]="("+h[o-2]+" + 1)",m(h)}function m(h){let d=t.map((b,w)=>f(w,h)),g=d.join(","),y=d.slice(-2).join(",");return`getChannel(getX(${g}), vec2(${y}))`}function f(h,d){return e.indexOf(h)!==-1&&t[h]!==1?`${t[h]} - ${d[h]} - 1`:`${d[h]}`}}};function w5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dims:s}=o,i=n.shape.length,a=x.parseAxisParam(s,n.shape);if(i===0)return $e({inputs:{x:n},backend:e});let l=M().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new cb(n.shape,a):new ub(n.shape,a);return e.runWebGLProgram(l,[n],n.dtype)}var Q_={kernelName:Gi,backendName:"webgl",kernelFunc:w5};var pb=class{constructor(t,e){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];let o=t[1],n=t[2];this.outputShape=t;let s="";typeof e=="number"?s=`float outputValue = ${e.toFixed(2)};`:s=`
        vec3 fill = vec3(${e.join(",")});
        float outputValue = fill[coords[3]];`,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${s}
          if(coordX >= 0 && coordX < ${n} && coordY >= 0 && coordY < ${o}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `}};var tO={kernelName:cc,backendName:"webgl",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{image:o}=r,{radians:n,fillValue:s,center:i}=t,a=e,l=new pb(o.shape,s),[u,c]=T.getImageCenter(i,o.shape[1],o.shape[2]),p=[[u,c,Math.sin(n),Math.cos(n)]];return a.runWebGLProgram(l,[o],o.dtype,p)}};var C5=`
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`,v5=ft({opSnippet:C5}),eO={kernelName:ys,backendName:"webgl",kernelFunc:v5};var N5="return inversesqrt(x);",S5=ft({opSnippet:N5,cpuKernelImpl:LD}),rO={kernelName:bs,backendName:"webgl",kernelFunc:S5};var Vp=class{constructor(t,e,o,n,s,i,a=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;let l=$t(s.length),u=$t(i.length),c="";o===1?c="i":o===2&&(c="i, j");let p=`getIndices(${c})`,m="";n===1?m="i":n===2&&(m="i, coords[1]");let f=`getUpdates(${m})`,h=e>1?"strides[j]":"strides";this.userCode=`
        ${l} strides = ${l}(${s});

        void main() {
          ${u} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${t}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${e}; j++) {
              int index = round(${p});
              flattenedIndex += index * ${h};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${f};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `}};function I5(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n,updates:s}=t,{shape:i}=o,{sliceRank:a,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=T.calculateShapes(s,n,i),m=[p/u,u];if(p===0)return e.makeTensorInfo(i,n.dtype);let f=Q({inputs:{x:n},backend:e,attrs:{shape:[l,a]}}),h=Q({inputs:{x:s},backend:e,attrs:{shape:[l,u]}}),d=e.makeTensorInfo([],"float32",new Float32Array([0])),g=new Vp(l,a,f.shape.length,h.shape.length,c,m),y=e.runWebGLProgram(g,[h,f,d],h.dtype),b=Q({inputs:{x:y},backend:e,attrs:{shape:i}});return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(d),b}var oO={kernelName:Xu,backendName:"webgl",kernelFunc:I5};var mb=class{constructor(t,e,o,n){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[t,o];let s="while (left < right) {",i=`for (int i = 0; i < ${Math.ceil(Math.log2(e+1))}; ++i) { if (left >= right) break;`,a=M().getNumber("WEBGL_VERSION")===2?s:i,l=n==="left"?"<":"<=";this.userCode=`
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${a}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${l} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `}};function T5(r){let{inputs:t,backend:e,attrs:o}=r,{sortedSequence:n,values:s}=t,{side:i}=o,a=new mb(n.shape[0],n.shape[1],s.shape[1],i),l=[[n.shape[1]]];return e.runWebGLProgram(a,[n,s],"int32",l)}var nO={kernelName:Yu,backendName:"webgl",kernelFunc:T5};var fb=class{constructor(t,e,o){this.variableNames=["c","a","b"],this.outputShape=e;let n,s;if(o>4)throw Error(`Where for rank ${o} is not yet supported`);if(o===1)s="resRC",n="resRC";else{let a=["resRC.x","resRC.y","resRC.z","resRC.w"],l=[],u=[];for(let c=0;c<e.length;c++)u.push(`${a[c]}`),c<t&&l.push(`${a[c]}`);n=l.join(),s=u.join()}let i=$t(o);this.userCode=`
      void main() {
        ${i} resRC = getOutputCoords();
        float cVal = getC(${n});
        if (cVal >= 1.0) {
          setOutput(getA(${s}));
        } else {
          setOutput(getB(${s}));
        }
      }
    `}};function k5(r){let{inputs:t,backend:e}=r,{condition:o,t:n,e:s}=t,i=new fb(o.shape.length,n.shape,n.shape.length);return e.runWebGLProgram(i,[o,n,s],Re(n.dtype,s.dtype))}var sO={kernelName:Wi,backendName:"webgl",kernelFunc:k5};var E5=`
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${T.SELU_SCALEALPHA};
  float scale = ${T.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`,$5=ft({opSnippet:E5}),iO={kernelName:ws,backendName:"webgl",kernelFunc:$5};var A5=zo+`
  return 1.0 / (1.0 + exp(-1.0 * x));
`,D5=`
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,F5=ft({opSnippet:A5,packedOpSnippet:D5,cpuKernelImpl:zD}),aO={kernelName:Ss,backendName:"webgl",kernelFunc:F5};var R5=`
  if (isnan(x)) { return 0.0; }
  return sign(x);
`,_5=ft({opSnippet:R5}),lO={kernelName:Ns,backendName:"webgl",kernelFunc:_5};var O5=zo+`
  return sin(x);
`,L5=ft({opSnippet:O5}),uO={kernelName:Cs,backendName:"webgl",kernelFunc:L5};var P5=`
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`,z5=ft({opSnippet:P5}),cO={kernelName:vs,backendName:"webgl",kernelFunc:z5};var M5=`
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`,B5=ft({opSnippet:M5}),pO={kernelName:Is,backendName:"webgl",kernelFunc:B5};var V5=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,paddings:i}=o;x.assert(n.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");let a=s.reduce((y,b)=>y*b),l=[[0,0]];l.push(...i);for(let y=1+s.length;y<n.shape.length;++y)l.push([0,0]);let u=[],c=fv({inputs:{x:n},backend:e,attrs:{paddings:l,constantValue:0}}),p=T.getReshaped(c.shape,s,a,!1),m=T.getPermuted(p.length,s.length,!1),f=T.getReshapedPermuted(c.shape,s,a,!1),h=Q({inputs:{x:c},backend:e,attrs:{shape:p}}),d=pe({inputs:{x:h},backend:e,attrs:{perm:m}}),g=Q({inputs:{x:d},backend:e,attrs:{shape:f}});return u.push(c),u.push(h),u.push(d),u.forEach(y=>e.disposeIntermediateTensorInfo(y)),g},mO={kernelName:qi,backendName:"webgl",kernelFunc:V5};function G5(r){let{inputs:t,backend:e}=r,{indices:o,values:n,denseShape:s,defaultValue:i}=t;if(s.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
         ${s.shape}`);if(o.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
         ${o.shape}`);if(n.shape.length!==1)throw new Error(`Values must be a vector, saw:
         ${n.shape}`);if(i.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);let a=e.readSync(o.dataId),l=e.readSync(n.dataId),u=e.readSync(s.dataId),c=e.readSync(i.dataId)[0],[p,m,f,h,d]=BD(a,o.shape,o.dtype,l,n.dtype,u,c);return[e.makeTensorInfo(m,o.dtype,p),e.makeTensorInfo([m[0]],n.dtype,f),e.makeTensorInfo([h.length],"bool",new Uint8Array(h.map(g=>Number(g)))),e.makeTensorInfo([d.length],o.dtype,new Int32Array(d))]}var fO={kernelName:Zu,backendName:"webgl",kernelFunc:G5};function W5(r){let{inputs:t,backend:e}=r,{inputIndices:o,inputShape:n,newShape:s}=t;if(o.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape ${o.shape}`);if(n.shape.length!==1)throw new Error(`Input shape should be a vector but received shape ${n.shape}`);if(s.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);let i=Array.from(e.readSync(n.dataId)),a=e.readSync(o.dataId),l=Array.from(e.readSync(s.dataId)),[u,c,p]=VD(a,o.shape,o.dtype,i,l);return[e.makeTensorInfo(c,o.dtype,u),e.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}var hO={kernelName:Ju,backendName:"webgl",kernelFunc:W5};function U5(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
              ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
              ${s.shape}`);let i=e.readSync(o.dataId),a=e.readSync(n.dataId),l=e.readSync(s.dataId),[u,c]=Xx(i,o.shape,o.dtype,a,l,!0);return e.makeTensorInfo(c,o.dtype,u)}var dO={kernelName:Qu,backendName:"webgl",kernelFunc:U5};function H5(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
             ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
             ${s.shape}`);let i=e.readSync(o.dataId),a=e.readSync(n.dataId),l=e.readSync(s.dataId),[u,c]=Xx(i,o.shape,o.dtype,a,l);return e.makeTensorInfo(c,o.dtype,u)}var gO={kernelName:tc,backendName:"webgl",kernelFunc:H5};function q5(r){let{inputs:t,backend:e,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:i}=t,{outputShape:a}=o,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:m}=T.calculateShapes(s,n,a),f=!1;if(s.dtype==="string"){let y=e.bufferSync(n),b=e.bufferSync(s),w=x.decodeString(e.readSync(i.dataId)[0]),C=PD(y,b,a,m,c,u,l,p,w,f);return e.makeTensorInfo(a,C.dtype,C.values)}let h=new Vp(u,l,n.shape.length,s.shape.length,p,[m,1],f),d=e.runWebGLProgram(h,[s,n,i],s.dtype),g=Q({inputs:{x:d},backend:e,attrs:{shape:a}});return e.disposeIntermediateTensorInfo(d),g}var xO={kernelName:ec,backendName:"webgl",kernelFunc:q5};function K5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{numOrSizeSplits:s,axis:i}=o,a=x.parseAxisParam(i,n.shape)[0],l=T.prepareSplitSize(n,s,a),u=n.shape.length,c=new Array(u).fill(0),p=n.shape.slice();return l.map(m=>{let f=[...p];f[a]=m;let h=on({inputs:{x:n},backend:e,attrs:{begin:c,size:f}});return c[a]+=m,h})}var yO={kernelName:Ki,backendName:"webgl",kernelFunc:K5};var bO="return sqrt(x);",j5=ft({opSnippet:bO,packedOpSnippet:bO,cpuKernelImpl:GD}),wO={kernelName:Ts,backendName:"webgl",kernelFunc:j5};var X5="return x * x;",Y5=ft({opSnippet:X5}),CO={kernelName:rc,backendName:"webgl",kernelFunc:Y5};var vO="return (a - b) * (a - b);",Z5=Wt({opSnippet:vO,packedOpSnippet:vO}),NO={kernelName:ks,backendName:"webgl",kernelFunc:Z5};function J5({inputs:r,attrs:t,backend:e}){let{x:o}=r,n=Ge+`
    return x > 0.0 ? 1.0 : float(${t.alpha});
  `,s=new br(o.shape,n);return e.runWebGLProgram(s,[o],o.dtype)}var SO={kernelName:Ds,backendName:"webgl",kernelFunc:J5};var hb=class{constructor(t,e,o){this.variableNames=["x"],this.outputShape=o;let n=o.length,s=$t(o.length),i=$t(o.length),a="";if(n===1)a="coords * strides + begin";else{let l=0;a=o.map((u,c)=>(l++,o.length===1?`coords * strides[${c}] + begin[${c}]`:`coords[${l-1}] * strides[${c}] + begin[${c}]`)).join(",")}this.userCode=`
      ${s} begin = ${s}(${t});
      ${s} strides = ${s}(${e});

      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `}};function Q5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,end:i,strides:a,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:m}=o,{finalShapeSparse:f,finalShape:h,isIdentity:d,sliceDim0:g,isSimpleSlice:y,begin:b,end:w,strides:C}=qe.sliceInfo(n.shape,s,i,a,l,u,c,p,m),I;if(d)I=Q({inputs:{x:n},backend:e,attrs:{shape:h}});else if(g||y){x.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let A=qe.computeOutShape(b,w,C),_=on({inputs:{x:n},backend:e,attrs:{begin:b,size:A}});I=Q({inputs:{x:_},backend:e,attrs:{shape:h}}),e.disposeIntermediateTensorInfo(_)}else if(e.shouldExecuteOnCPU([n])){let _=e.readSync(n.dataId),O=pt(n.shape,n.dtype,_),P=WD(f,O,C,b);I=e.makeTensorInfo(h,n.dtype,P.values)}else{let _=new hb(b,C,f);I=e.runWebGLProgram(_,[n],n.dtype)}let $=Q({inputs:{x:I},backend:e,attrs:{shape:h}});return e.disposeIntermediateTensorInfo(I),$}var IO={kernelName:oc,backendName:"webgl",kernelFunc:Q5};function t8(r){let{inputs:t,backend:e,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:i,rightPad:a,padWidth:l,preserveShortSequences:u}=o,{data:c,dataSplits:p}=t,m=e.readSync(c.dataId),f=e.readSync(p.dataId),[h,d]=UD(m,f,n,s,i,a,l,u);return[e.makeTensorInfo([h.length],"string",h),e.makeTensorInfo(p.shape,"int32",d)]}var TO={kernelName:nc,backendName:"webgl",kernelFunc:t8};function e8(r){let{inputs:t,backend:e,attrs:o}=r,{skipEmpty:n}=o,{input:s,delimiter:i}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(s.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(i.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);let a=e.readSync(s.dataId),l=e.readSync(i.dataId)[0],[u,c,p]=HD(a,l,n),m=c.length;return[e.makeTensorInfo([m,2],"int32",u),e.makeTensorInfo([m],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(p))]}var kO={kernelName:sc,backendName:"webgl",kernelFunc:e8};function r8(r){let{inputs:t,backend:e,attrs:o}=r,{numBuckets:n}=o,{input:s}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(n<=0)throw new Error("Number of buckets must be at least 1");let i=e.readSync(s.dataId),a=qD(i,n);return e.makeTensorInfo(s.shape,"int32",a)}var EO={kernelName:ic,backendName:"webgl",kernelFunc:r8};var o8="return tan(x);",n8=ft({opSnippet:o8}),$O={kernelName:$s,backendName:"webgl",kernelFunc:n8};var s8=`
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`,i8=ft({opSnippet:s8}),AO={kernelName:As,backendName:"webgl",kernelFunc:i8};var db=class{constructor(t,e){this.variableNames=["A"];let o=new Array(t.length);for(let i=0;i<o.length;i++)o[i]=t[i]*e[i];this.outputShape=o,this.rank=o.length;let n=$t(this.rank),s=a8(t);this.userCode=`
      void main() {
        ${n} resRC = getOutputCoords();
        setOutput(getA(${s}));
      }
    `}};function a8(r){let t=r.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(t===1)return`imod(resRC, ${r[0]})`;let e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],o=[];for(let n=0;n<r.length;n++)o.push(`imod(${e[n]}, ${r[n]})`);return o.join()}function dv(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reps:s}=o;if(n.dtype==="string"||n.shape.length>5){let l=e.readSync(n.dataId),u=n.dtype==="string"?l.map(m=>x.decodeString(m)):l,c=pt(n.shape,n.dtype,u),p=jD(c,s);return e.makeTensorInfo(p.shape,p.dtype,p.values)}let i=new db(n.shape,s);return e.runWebGLProgram(i,[n],n.dtype)}var DO={kernelName:ln,backendName:"webgl",kernelFunc:dv};var gb=class{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=t,this.userCode=`
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `}},xb=class{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=t,this.userCode=`
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `}};function su(r,t){t!==null&&r.disposeIntermediateTensorInfo(t)}function FO(r){let t=1;for(;t<r;)t*=2;return t}function l8(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{k:s,sorted:i}=o,a=M().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=M().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=n.shape,c=u[u.length-1];if(e.shouldExecuteOnCPU([n])||c<a||s>l){let P=e.readSync(n.dataId),[B,V]=XD(P,u,n.dtype,s,i);return[e.makeTensorInfo(B.shape,B.dtype,B.values),e.makeTensorInfo(V.shape,V.dtype,V.values)]}if(s===0)return u[u.length-1]=0,[e.makeTensorInfo(u,n.dtype,[]),e.makeTensorInfo(u,"int32",[])];if(c===1)return[n,Qs({attrs:{shape:u,dtype:"int32",value:0},backend:e})];let p=e.texData.get(n.dataId),m=p!==null&&p.isPacked,f=m?e.unpackTensor(n):n,d=x.sizeFromShape(u)/c,g=Q({inputs:{x:f},attrs:{shape:[d,c]},backend:e});m&&su(e,f);let y=FO(s),b=FO(c),w=null,C=()=>w===null?[g,g]:[g,w],I=(P,B,V)=>{let G=C(),H=new gb(V),X=[[c],[w===null?1:0],[Number.NEGATIVE_INFINITY],[P],[B]],Z=w;w=e.runWebGLProgram(H,G,"int32",X),su(e,Z)};for(let P=1;P<y;P*=2){let B=P*2;for(let V=P;V>=1;V/=2)I(B,V,[d,b])}for(let P=b;P>y;P/=2){let B=C(),V=new xb([d,P/2]),H=[[c],[w===null?1:0],[y]],W=w;w=e.runWebGLProgram(V,B,"int32",H),su(e,W);let X=y/2,Z=X*2;for(let K=X;K>=1;K/=2)I(Z,K,w.shape)}let $=w;w=on({inputs:{x:w},backend:e,attrs:{begin:0,size:[d,s]}}),su(e,$);let A=lv({inputs:{x:g,indices:w},backend:e,attrs:{axis:1,batchDims:1}});su(e,g);let _=u.slice(0,-1);_.push(s),$=w,w=Q({inputs:{x:w},attrs:{shape:_},backend:e}),su(e,$);let O=A;return A=Q({inputs:{x:A},attrs:{shape:_},backend:e}),su(e,O),[A,w]}var RO={kernelName:ac,backendName:"webgl",kernelFunc:l8};var yb=class{constructor(t,e,o,n,s,i){this.variableNames=["Image","Transforms"],this.outputShape=i;let a=o==="nearest"?1:2,l;switch(n){case"constant":l=1;break;case"reflect":l=2;break;case"wrap":l=3;break;case"nearest":l=4;break;default:l=1;break}this.userCode=`
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${l} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${s});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${s});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${e}));
                float mapY = mapCoord(inY, float(${t}));

                if (${a} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `}};function u8(r){let{inputs:t,backend:e,attrs:o}=r,{image:n,transforms:s}=t,{interpolation:i,fillMode:a,fillValue:l,outputShape:u}=o,[c,p,m,f]=n.shape,[h,d]=u!=null?u:[p,m],g=[c,h,d,f],y=new yb(p,m,i,a,l,g);return e.runWebGLProgram(y,[n,s],"float32")}var _O={kernelName:lc,backendName:"webgl",kernelFunc:u8};function c8(r){let{inputs:t,attrs:e,backend:o}=r,{axis:n}=e,{x:s}=t;_n(s,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");let i=o.readSync(s.dataId),{outputValues:a,outputShape:l,indices:u}=YD(i,n,s.shape,s.dtype);return[o.makeTensorInfo(l,s.dtype,a),o.makeTensorInfo([u.length],"int32",u)]}var OO={kernelName:uc,backendName:"webgl",kernelFunc:c8};function p8(r){let{inputs:t,backend:e,attrs:o}=r,{value:n}=t,{axis:s}=o;s<0&&(s+=n.shape.length);let i=n,a=i.shape.length,l=n.shape[s],u=new Array(a-1),c=0;for(let d=0;d<a;d++)d!==s&&(u[c++]=i.shape[d]);let p=[],m=new Array(a).fill(0),f=i.shape.slice();f[s]=1;let h=new Array(l);for(let d=0;d<h.length;d++){m[s]=d;let g=on({inputs:{x:i},backend:e,attrs:{begin:m,size:f}}),y=Q({inputs:{x:g},backend:e,attrs:{shape:u}});h[d]=y,p.push(g)}return p.forEach(d=>e.disposeIntermediateTensorInfo(d)),h}var LO={kernelName:Xi,backendName:"webgl",kernelFunc:p8};var bb=class{constructor(t,e){this.variableNames=["x","segmentIds"];let o=t.windowSize,n=t.batchSize,s=t.inSize,i=t.numSegments,a=i*Math.ceil(s/o);this.outputShape=[n,a];let l="0.0",u="sumValue",c=Math.floor(o/4)*4,p=o%4,m=`
        sumValue += dot(values, segFilter);
    `,f="";s%o>0&&(f=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `);let h="";s%o>0&&(h=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return -1.0;
        }
      `),this.userCode=`
      const float initializationValue = ${l};

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${h}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${i})) * float(${o}));
        int currentSeg = int(mod(float(outIdx), float(${i})));

        float sumValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${p===1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${m}
        } else if (${p===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${m}
        } else if (${p===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${m}
        }
        setOutput(${u});
      }
    `}};function m8(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,segmentIds:s}=t,{numSegments:i}=o,a=n.shape.length,l=[],u=0,c=T.getAxesPermutation([u],a),p=n;c!=null&&(p=pe({inputs:{x:n},backend:e,attrs:{perm:c}}),l.push(p),u=T.getInnerMostAxes(1,a)[0]);let m=T.segment_util.computeOutShape(p.shape,u,i),f=x.sizeFromShape([p.shape[u]]),h=Q({inputs:{x:p},backend:e,attrs:{shape:[-1,f]}});l.push(h);let d=fl(n.dtype),g=(C,I,$,A,_)=>{let O=C.shape[0],P=C.shape[1],B=T.segment_util.segOpComputeOptimalWindowSize(P,_),V={windowSize:B,inSize:P,batchSize:O,numSegments:_},G=new bb(V,I),H=e.compileAndRun(G,[C,$],A);if(l.push(H),H.shape[1]===_)return H;let W=hv({backend:e,attrs:{start:0,stop:_,step:1,dtype:"float32"}}),X=dv({inputs:{x:W},backend:e,attrs:{reps:[P/B]}});return l.push(W),l.push(X),g(H,I,X,A,_)},y=g(h,"unsortedSegmentSum",s,d,i),b=Q({inputs:{x:y},backend:e,attrs:{shape:m}}),w=b;if(c!=null){l.push(b);let C=T.getUndoAxesPermutation(c);w=pe({inputs:{x:w},backend:e,attrs:{perm:C}})}return l.forEach(C=>e.disposeIntermediateTensorInfo(C)),w}var PO={kernelName:Yi,backendName:"webgl",kernelFunc:m8};var f8=[IF,kF,EF,$F,DF,FF,RF,_F,PF,zF,MF,BF,VF,GF,WF,UF,HF,qF,KF,jF,XF,ZF,JF,QF,oR,sR,iR,fF,lR,cR,pR,mR,fR,hR,dR,gR,xR,yR,bR,vR,NR,SR,IR,TR,kR,ER,$R,AR,DR,FR,RR,_R,OR,LR,PR,MR,BR,VR,GR,UR,HR,qR,KR,jR,XR,YR,ZR,JR,mF,QR,uR,t_,e_,r_,hF,o_,n_,s_,i_,a_,l_,u_,c_,p_,m_,h_,d_,g_,x_,y_,b_,C_,N_,S_,I_,T_,k_,F_,bF,R_,__,O_,L_,tR,P_,B_,V_,G_,W_,dF,U_,H_,eR,E_,q_,K_,j_,CF,X_,Y_,Z_,J_,Q_,tO,eO,rO,oO,nO,sO,iO,aO,lO,uO,cO,YF,D_,pO,mO,fO,hO,dO,gO,xO,yO,wO,CO,NO,SO,IO,TO,kO,EO,A_,NF,$O,AO,DO,RO,_O,SF,OO,LO,PO,z_];for(let r of f8)fh(r);var ti=(...r)=>{let t=new Date,e=`${t.getHours().toString().padStart(2,"0")}:${t.getMinutes().toString().padStart(2,"0")}:${t.getSeconds().toString().padStart(2,"0")}.${t.getMilliseconds().toString().padStart(3,"0")}`;console.log(e,...r)};var d8="../model/model.json",gv=[720,720],wb,fo,lh;async function g8(){ti("starting webcam...");let r={audio:!1,video:{facingMode:"user",resizeMode:"crop",width:{ideal:gv[0]},height:{ideal:gv[1]}}},t=await navigator.mediaDevices.getUserMedia(r),e=new Promise(a=>{fo.onloadeddata=()=>a(!0)});fo.srcObject=t,fo.play(),await e,lh.width=fo.videoWidth,lh.height=fo.videoHeight;let o=t.getVideoTracks()[0],n=o.getCapabilities?o.getCapabilities():"",s=o.getSettings?o.getSettings():"",i=o.getConstraints?o.getConstraints():"";ti("video:",fo.videoWidth,fo.videoHeight,o.label,{stream:t,track:o,settings:s,constraints:i,capabilities:n}),lh.onclick=()=>{fo.paused?(ti("play"),fo.play()):(ti("pause"),fo.pause())}}var zO=Number.MAX_SAFE_INTEGER;async function MO(r=0){if(!fo.paused){let t=performance.now(),e={};e.pixels=await wc.fromPixelsAsync(fo,3),e.resize=Ms.resizeBilinear(e.pixels,gv),e.div=et(e.resize,127.5),e.sub=tt(e.div,1),e.expand=ze(e.sub,0),e.result=wb.execute(e.expand);let o=performance.now();e.squeeze=kr(e.result),e.add=U(e.squeeze,1),e.mul=D(e.add,127.5),e.cast=q(e.mul,"int32"),e.clip=Pe(e.cast,0,255),await wc.toPixels(e.clip,lh);for(let s of Object.keys(e))yt(e[s]);let n=performance.now();ti("frame",{frame:r,fps:Math.round(1e4/(n-zO))/10,inference:Math.round(o-t),draw:Math.round(n-o),tensors:oa().numTensors,bytes:oa().numBytes}),zO=n}setTimeout(()=>MO(++r),1e3)}async function x8(){ti("whitebox"),await fw("webgl"),await EN(),ti("tf",Dh,hw()),hw()==="webgl"&&(wb=await O0(d8),wb&&(fo=document.getElementById("video"),lh=document.getElementById("canvas"),ti("model",wb),await g8(),MO()))}window.onload=x8;
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2022 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/** @license See the LICENSE file. */
//# sourceMappingURL=whitebox.js.map
